
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000bd6  00000c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800144  00800144  00000cae  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000650  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001117  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004cb  00000000  00000000  00002475  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e87  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a0  00000000  00000000  000037c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000742  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f5  00000000  00000000  000042aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000489f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

uint32_t last_val=0;
uint8_t  state=0;


int main(void){
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	a0 97       	sbiw	r28, 0x20	; 32
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61

  DDRD  |= (1<<4);
  c4:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  c6:	5c 98       	cbi	0x0b, 4	; 11
  
  DDRD&=~((1<<3)|(1<<2));
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	83 7f       	andi	r24, 0xF3	; 243
  cc:	8a b9       	out	0x0a, r24	; 10
  PORTD|=(1<<3)|(1<<2);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	8b b9       	out	0x0b, r24	; 11
  
  nRF24L01P_Init();
  d4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <nRF24L01P_Init>
  Sleep_Init();
  d8:	0e 94 c9 00 	call	0x192	; 0x192 <Sleep_Init>
  dc:	00 e0       	ldi	r16, 0x00	; 0
  de:	10 e0       	ldi	r17, 0x00	; 0
  
  for(uint16_t i=0;i<5000;i++){
    uint8_t buf[32];
	nRF24L01P_WakeUp();
    nRF24L01P_Transmit_Basic(buf,10);
  e0:	7e 01       	movw	r14, r28
  e2:	08 94       	sec
  e4:	e1 1c       	adc	r14, r1
  e6:	f1 1c       	adc	r15, r1
  nRF24L01P_Init();
  Sleep_Init();
  
  for(uint16_t i=0;i<5000;i++){
    uint8_t buf[32];
	nRF24L01P_WakeUp();
  e8:	0e 94 48 04 	call	0x890	; 0x890 <nRF24L01P_WakeUp>
    nRF24L01P_Transmit_Basic(buf,10);
  ec:	c7 01       	movw	r24, r14
  ee:	6a e0       	ldi	r22, 0x0A	; 10
  f0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <nRF24L01P_Transmit_Basic>
	nRF24L01P_Deep_Sleep();
  f4:	0e 94 3c 04 	call	0x878	; 0x878 <nRF24L01P_Deep_Sleep>
  PORTD|=(1<<3)|(1<<2);
  
  nRF24L01P_Init();
  Sleep_Init();
  
  for(uint16_t i=0;i<5000;i++){
  f8:	0f 5f       	subi	r16, 0xFF	; 255
  fa:	1f 4f       	sbci	r17, 0xFF	; 255
  fc:	83 e1       	ldi	r24, 0x13	; 19
  fe:	08 38       	cpi	r16, 0x88	; 136
 100:	18 07       	cpc	r17, r24
 102:	91 f7       	brne	.-28     	; 0xe8 <main+0x42>
    nRF24L01P_Transmit_Basic(buf,10);
	nRF24L01P_Deep_Sleep();
  }
  while(1){
      
	    uint8_t buf[32]="Bello world\r\n";
 104:	8e 01       	movw	r16, r28
 106:	0f 5f       	subi	r16, 0xFF	; 255
 108:	1f 4f       	sbci	r17, 0xFF	; 255
 10a:	92 e1       	ldi	r25, 0x12	; 18
 10c:	d9 2e       	mov	r13, r25
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	e8 2e       	mov	r14, r24
 112:	f1 2c       	mov	r15, r1
 114:	ec 0e       	add	r14, r28
 116:	fd 1e       	adc	r15, r29
 118:	d8 01       	movw	r26, r16
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	8e e0       	ldi	r24, 0x0E	; 14
 120:	01 90       	ld	r0, Z+
 122:	0d 92       	st	X+, r0
 124:	81 50       	subi	r24, 0x01	; 1
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x7a>
 128:	f7 01       	movw	r30, r14
 12a:	8d 2d       	mov	r24, r13
 12c:	11 92       	st	Z+, r1
 12e:	8a 95       	dec	r24
 130:	e9 f7       	brne	.-6      	; 0x12c <main+0x86>
	    PORTD |=(1<<4);
 132:	5c 9a       	sbi	0x0b, 4	; 11
	    nRF24L01P_WakeUp();
 134:	0e 94 48 04 	call	0x890	; 0x890 <nRF24L01P_WakeUp>
	    nRF24L01P_Transmit_Basic(buf,13);
 138:	c8 01       	movw	r24, r16
 13a:	6d e0       	ldi	r22, 0x0D	; 13
 13c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <nRF24L01P_Transmit_Basic>
	    nRF24L01P_Deep_Sleep();
 140:	0e 94 3c 04 	call	0x878	; 0x878 <nRF24L01P_Deep_Sleep>
	    PORTD &=~(1<<4);
 144:	5c 98       	cbi	0x0b, 4	; 11
	    Deep_Sleep();
 146:	0e 94 a6 00 	call	0x14c	; 0x14c <Deep_Sleep>
 14a:	e6 cf       	rjmp	.-52     	; 0x118 <main+0x72>

0000014c <Deep_Sleep>:
#include <avr/sleep.h>

volatile uint32_t WDT_Ticks=0;

void Deep_Sleep(void){
  sleep_enable();
 14c:	83 b7       	in	r24, 0x33	; 51
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
 152:	85 b7       	in	r24, 0x35	; 53
 154:	80 66       	ori	r24, 0x60	; 96
 156:	85 bf       	out	0x35, r24	; 53
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	85 bf       	out	0x35, r24	; 53
  sei();
 15c:	78 94       	sei
  sleep_cpu();
 15e:	88 95       	sleep
  sleep_disable();
 160:	83 b7       	in	r24, 0x33	; 51
 162:	8e 7f       	andi	r24, 0xFE	; 254
 164:	83 bf       	out	0x33, r24	; 51
}
 166:	08 95       	ret

00000168 <ADC_Disable>:

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
 168:	ea e7       	ldi	r30, 0x7A	; 122
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 77       	andi	r24, 0x7F	; 127
 170:	80 83       	st	Z, r24
}
 172:	08 95       	ret

00000174 <Analog_Comparator_Disable>:

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
 174:	80 b7       	in	r24, 0x30	; 48
 176:	8f 77       	andi	r24, 0x7F	; 127
 178:	80 bf       	out	0x30, r24	; 48
}
 17a:	08 95       	ret

0000017c <WDT_Get_Ticks>:

uint32_t WDT_Get_Ticks(void){
  return WDT_Ticks;
 17c:	20 91 49 01 	lds	r18, 0x0149
 180:	30 91 4a 01 	lds	r19, 0x014A
 184:	40 91 4b 01 	lds	r20, 0x014B
 188:	50 91 4c 01 	lds	r21, 0x014C
}
 18c:	b9 01       	movw	r22, r18
 18e:	ca 01       	movw	r24, r20
 190:	08 95       	ret

00000192 <Sleep_Init>:


void Sleep_Init(void){
  cli();
 192:	f8 94       	cli
  WDTCSR=(1<<WDCE)|(1<<WDE);
 194:	e0 e6       	ldi	r30, 0x60	; 96
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	80 83       	st	Z, r24
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
 19c:	86 e4       	ldi	r24, 0x46	; 70
 19e:	80 83       	st	Z, r24
  sei();
 1a0:	78 94       	sei
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 1a2:	83 b7       	in	r24, 0x33	; 51
 1a4:	81 7f       	andi	r24, 0xF1	; 241
 1a6:	84 60       	ori	r24, 0x04	; 4
 1a8:	83 bf       	out	0x33, r24	; 51
  sleep_cpu();
  sleep_disable();
}

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8f 77       	andi	r24, 0x7F	; 127
 1b2:	80 83       	st	Z, r24
}

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
 1b4:	80 b7       	in	r24, 0x30	; 48
 1b6:	8f 77       	andi	r24, 0x7F	; 127
 1b8:	80 bf       	out	0x30, r24	; 48
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
  sei();
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ADC_Disable();
  Analog_Comparator_Disable();
}
 1ba:	08 95       	ret

000001bc <__vector_6>:

ISR(WDT_vect){
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
  WDTCSR|=(1<<WDIE);
 1d2:	e0 e6       	ldi	r30, 0x60	; 96
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	80 83       	st	Z, r24
  WDT_Ticks++;
 1dc:	80 91 49 01 	lds	r24, 0x0149
 1e0:	90 91 4a 01 	lds	r25, 0x014A
 1e4:	a0 91 4b 01 	lds	r26, 0x014B
 1e8:	b0 91 4c 01 	lds	r27, 0x014C
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	a1 1d       	adc	r26, r1
 1f0:	b1 1d       	adc	r27, r1
 1f2:	80 93 49 01 	sts	0x0149, r24
 1f6:	90 93 4a 01 	sts	0x014A, r25
 1fa:	a0 93 4b 01 	sts	0x014B, r26
 1fe:	b0 93 4c 01 	sts	0x014C, r27
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <nRF24L01P_Struct_Init>:

nrf24l01p_t nRF24L01P_type;
nrf24l01p_t *nRF24L01P;

void nRF24L01P_Struct_Init(void){
  nRF24L01P=&nRF24L01P_type;
 218:	8d e4       	ldi	r24, 0x4D	; 77
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	90 93 61 01 	sts	0x0161, r25
 220:	80 93 60 01 	sts	0x0160, r24
  nRF24L01P->Mode=0x00;
 224:	10 92 4d 01 	sts	0x014D, r1
  nRF24L01P->TempBuf[0]=0x00;
 228:	10 92 4e 01 	sts	0x014E, r1
  nRF24L01P->TempBuf[1]=0x00;
 22c:	10 92 4f 01 	sts	0x014F, r1
  nRF24L01P->Address.Own=0x00;
 230:	10 92 50 01 	sts	0x0150, r1
  nRF24L01P->Address.Dest=0x01;
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	20 93 51 01 	sts	0x0151, r18
  nRF24L01P->Config.RxTimeout=10;
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 53 01 	sts	0x0153, r25
 242:	80 93 52 01 	sts	0x0152, r24
  nRF24L01P->Config.RxTicks=0;
 246:	10 92 55 01 	sts	0x0155, r1
 24a:	10 92 54 01 	sts	0x0154, r1
  nRF24L01P->Config.MaxDataLength=0;
 24e:	10 92 56 01 	sts	0x0156, r1
  nRF24L01P->Config.MaxRetry=0;
 252:	10 92 58 01 	sts	0x0158, r1
 256:	10 92 57 01 	sts	0x0157, r1
  nRF24L01P->Config.RetryOccured=0;
 25a:	10 92 5a 01 	sts	0x015A, r1
 25e:	10 92 59 01 	sts	0x0159, r1
  nRF24L01P->Packet.PID=0;
 262:	10 92 5b 01 	sts	0x015B, r1
  nRF24L01P->Packet.ACKReq=1;
 266:	20 93 5c 01 	sts	0x015C, r18
  nRF24L01P->ErrorTicks=0;
 26a:	10 92 5e 01 	sts	0x015E, r1
 26e:	10 92 5d 01 	sts	0x015D, r1
  nRF24L01P->Error=0;
 272:	10 92 5f 01 	sts	0x015F, r1
}
 276:	08 95       	ret

00000278 <nRF24L01P_CSN_High>:

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 278:	28 9a       	sbi	0x05, 0	; 5
}
 27a:	08 95       	ret

0000027c <nRF24L01P_CSN_Low>:

void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
 27c:	28 98       	cbi	0x05, 0	; 5
}
 27e:	08 95       	ret

00000280 <nRF24L01P_CE_High>:

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 280:	5f 9a       	sbi	0x0b, 7	; 11
}
 282:	08 95       	ret

00000284 <nRF24L01P_CE_Low>:

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 284:	5f 98       	cbi	0x0b, 7	; 11
}
 286:	08 95       	ret

00000288 <nRF24L01P_Enable_GPIO>:

void nRF24L01P_Enable_GPIO(void){
  DDRB |= (1<<5)|(1<<3)|(1<<2);
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	8c 62       	ori	r24, 0x2C	; 44
 28c:	84 b9       	out	0x04, r24	; 4
  DDRB &=~(1<<4);
 28e:	24 98       	cbi	0x04, 4	; 4
  nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
 290:	20 9a       	sbi	0x04, 0	; 4
  nRF24L01P_CE_DDR  |= (1<<nRF24L01P_CE_bp) ;
 292:	57 9a       	sbi	0x0a, 7	; 10
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 294:	28 9a       	sbi	0x05, 0	; 5
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 296:	5f 98       	cbi	0x0b, 7	; 11
  DDRB &=~(1<<4);
  nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
  nRF24L01P_CE_DDR  |= (1<<nRF24L01P_CE_bp) ;
  nRF24L01P_CSN_High();
  nRF24L01P_CE_Low()  ;
}
 298:	08 95       	ret

0000029a <nRF24L01P_Disable_GPIO>:

void nRF24L01P_Disable_GPIO(void){
  DDRB |= (1<<4);                              
 29a:	24 9a       	sbi	0x04, 4	; 4
  PORTB&=~((1<<5)|(1<<4)|(1<<3)|(1<<2));
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	83 7c       	andi	r24, 0xC3	; 195
 2a0:	85 b9       	out	0x05, r24	; 5
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 2a2:	28 9a       	sbi	0x05, 0	; 5
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 2a4:	5f 98       	cbi	0x0b, 7	; 11
void nRF24L01P_Disable_GPIO(void){
  DDRB |= (1<<4);                              
  PORTB&=~((1<<5)|(1<<4)|(1<<3)|(1<<2));
  nRF24L01P_CSN_High(); 
  nRF24L01P_CE_Low() ;  
}
 2a6:	08 95       	ret

000002a8 <nRF24L01P_Enable_SPI>:

void nRF24L01P_Enable_SPI(void){
  SPCR=(1<<SPE)|(1<<MSTR);                     
 2a8:	80 e5       	ldi	r24, 0x50	; 80
 2aa:	8c bd       	out	0x2c, r24	; 44
  SPSR=(1<<SPI2X);                             
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	8d bd       	out	0x2d, r24	; 45
}
 2b0:	08 95       	ret

000002b2 <nRF24L01P_Disable_SPI>:

void nRF24L01P_Disable_SPI(void){                 
  SPCR=0x00;
 2b2:	1c bc       	out	0x2c, r1	; 44
  SPSR=0x00;
 2b4:	1d bc       	out	0x2d, r1	; 45
}
 2b6:	08 95       	ret

000002b8 <nRF24L01P_Enable>:

void nRF24L01P_Enable(void){
  nRF24L01P_Enable_GPIO();
 2b8:	0e 94 44 01 	call	0x288	; 0x288 <nRF24L01P_Enable_GPIO>
  nRF24L01P_CSN_High(); 
  nRF24L01P_CE_Low() ;  
}

void nRF24L01P_Enable_SPI(void){
  SPCR=(1<<SPE)|(1<<MSTR);                     
 2bc:	80 e5       	ldi	r24, 0x50	; 80
 2be:	8c bd       	out	0x2c, r24	; 44
  SPSR=(1<<SPI2X);                             
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	8d bd       	out	0x2d, r24	; 45
}

void nRF24L01P_Enable(void){
  nRF24L01P_Enable_GPIO();
  nRF24L01P_Enable_SPI();
}
 2c4:	08 95       	ret

000002c6 <nRF24L01P_Disable>:
  SPCR=(1<<SPE)|(1<<MSTR);                     
  SPSR=(1<<SPI2X);                             
}

void nRF24L01P_Disable_SPI(void){                 
  SPCR=0x00;
 2c6:	1c bc       	out	0x2c, r1	; 44
  SPSR=0x00;
 2c8:	1d bc       	out	0x2d, r1	; 45
  nRF24L01P_Enable_SPI();
}

void nRF24L01P_Disable(void){
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
 2ca:	0e 94 4d 01 	call	0x29a	; 0x29a <nRF24L01P_Disable_GPIO>
}
 2ce:	08 95       	ret

000002d0 <nRF24L01P_Error_Clear>:

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 2d0:	e0 91 60 01 	lds	r30, 0x0160
 2d4:	f0 91 61 01 	lds	r31, 0x0161
 2d8:	11 8a       	std	Z+17, r1	; 0x11
 2da:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 2dc:	12 8a       	std	Z+18, r1	; 0x12
}
 2de:	08 95       	ret

000002e0 <nRF24L01P_Get_Error>:

uint8_t nRF24L01P_Get_Error(void){
 2e0:	e0 91 60 01 	lds	r30, 0x0160
 2e4:	f0 91 61 01 	lds	r31, 0x0161
  return nRF24L01P->Error;
}
 2e8:	82 89       	ldd	r24, Z+18	; 0x12
 2ea:	08 95       	ret

000002ec <nRF24L01P_No_Error>:

uint8_t nRF24L01P_No_Error(void){
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	e0 91 60 01 	lds	r30, 0x0160
 2f2:	f0 91 61 01 	lds	r31, 0x0161
 2f6:	82 89       	ldd	r24, Z+18	; 0x12
 2f8:	88 23       	and	r24, r24
 2fa:	09 f4       	brne	.+2      	; 0x2fe <nRF24L01P_No_Error+0x12>
 2fc:	91 e0       	ldi	r25, 0x01	; 1
  if(nRF24L01P_Get_Error()==0){
    return 1;
  }else{
    return 0;
  }
}
 2fe:	89 2f       	mov	r24, r25
 300:	08 95       	ret

00000302 <nRF24L01P_Error_Timeout>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	8a 95       	dec	r24
 306:	f1 f7       	brne	.-4      	; 0x304 <nRF24L01P_Error_Timeout+0x2>

uint8_t nRF24L01P_Error_Timeout(void){
  _delay_us(1);
  nRF24L01P->ErrorTicks++;
 308:	e0 91 60 01 	lds	r30, 0x0160
 30c:	f0 91 61 01 	lds	r31, 0x0161
 310:	80 89       	ldd	r24, Z+16	; 0x10
 312:	91 89       	ldd	r25, Z+17	; 0x11
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	91 8b       	std	Z+17, r25	; 0x11
 318:	80 8b       	std	Z+16, r24	; 0x10
  if(nRF24L01P->ErrorTicks>1000){
 31a:	89 5e       	subi	r24, 0xE9	; 233
 31c:	93 40       	sbci	r25, 0x03	; 3
 31e:	20 f0       	brcs	.+8      	; 0x328 <nRF24L01P_Error_Timeout+0x26>
    nRF24L01P->ErrorTicks=0;
 320:	11 8a       	std	Z+17, r1	; 0x11
 322:	10 8a       	std	Z+16, r1	; 0x10
    nRF24L01P->Error=0x10;
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	82 8b       	std	Z+18, r24	; 0x12
  }
  return nRF24L01P->Error;
}
 328:	82 89       	ldd	r24, Z+18	; 0x12
 32a:	08 95       	ret

0000032c <nRF24L01P_SPI_Transfer>:

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
 32c:	98 2f       	mov	r25, r24
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 32e:	e0 91 60 01 	lds	r30, 0x0160
 332:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 336:	82 89       	ldd	r24, Z+18	; 0x12
 338:	88 23       	and	r24, r24
 33a:	a9 f4       	brne	.+42     	; 0x366 <nRF24L01P_SPI_Transfer+0x3a>
}

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  uint8_t sts=0;
  if(nRF24L01P_No_Error()){
    SPDR = data;
 33c:	9e bd       	out	0x2e, r25	; 46
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
}

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 33e:	11 8a       	std	Z+17, r1	; 0x11
 340:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 342:	12 8a       	std	Z+18, r1	; 0x12
 344:	04 c0       	rjmp	.+8      	; 0x34e <nRF24L01P_SPI_Transfer+0x22>
  uint8_t sts=0;
  if(nRF24L01P_No_Error()){
    SPDR = data;
    nRF24L01P_Error_Clear();
    while(!(SPSR & (1 << SPIF))){
      if(nRF24L01P_Error_Timeout()){
 346:	0e 94 81 01 	call	0x302	; 0x302 <nRF24L01P_Error_Timeout>
 34a:	88 23       	and	r24, r24
 34c:	19 f4       	brne	.+6      	; 0x354 <nRF24L01P_SPI_Transfer+0x28>
uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  uint8_t sts=0;
  if(nRF24L01P_No_Error()){
    SPDR = data;
    nRF24L01P_Error_Clear();
    while(!(SPSR & (1 << SPIF))){
 34e:	0d b4       	in	r0, 0x2d	; 45
 350:	07 fe       	sbrs	r0, 7
 352:	f9 cf       	rjmp	.-14     	; 0x346 <nRF24L01P_SPI_Transfer+0x1a>
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 354:	e0 91 60 01 	lds	r30, 0x0160
 358:	f0 91 61 01 	lds	r31, 0x0161
 35c:	82 89       	ldd	r24, Z+18	; 0x12
 35e:	88 23       	and	r24, r24
 360:	11 f4       	brne	.+4      	; 0x366 <nRF24L01P_SPI_Transfer+0x3a>
	    sts=0;
	    break;
	  }
    }
    if(nRF24L01P_No_Error()){
      sts=SPDR;
 362:	8e b5       	in	r24, 0x2e	; 46
 364:	08 95       	ret
 366:	80 e0       	ldi	r24, 0x00	; 0
    }
  }else{
    sts=0;
  }
  return sts;
}
 368:	08 95       	ret

0000036a <nRF24L01P_Calcuate_CRC>:

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
 36a:	36 2f       	mov	r19, r22
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	28 27       	eor	r18, r24
 370:	39 27       	eor	r19, r25
 372:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
	  crc=(crc<<1)^0x1021;
 374:	61 e2       	ldi	r22, 0x21	; 33
 376:	70 e1       	ldi	r23, 0x10	; 16
 378:	c9 01       	movw	r24, r18
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
}

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
 37e:	37 ff       	sbrs	r19, 7
 380:	04 c0       	rjmp	.+8      	; 0x38a <nRF24L01P_Calcuate_CRC+0x20>
	  crc=(crc<<1)^0x1021;
 382:	9c 01       	movw	r18, r24
 384:	26 27       	eor	r18, r22
 386:	37 27       	eor	r19, r23
 388:	01 c0       	rjmp	.+2      	; 0x38c <nRF24L01P_Calcuate_CRC+0x22>
	}
    else{
	  crc<<=1;
 38a:	9c 01       	movw	r18, r24
  return sts;
}

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
 38c:	4f 5f       	subi	r20, 0xFF	; 255
 38e:	48 30       	cpi	r20, 0x08	; 8
 390:	99 f7       	brne	.-26     	; 0x378 <nRF24L01P_Calcuate_CRC+0xe>
    else{
	  crc<<=1;
	}
  }
  return crc;
}
 392:	c9 01       	movw	r24, r18
 394:	08 95       	ret

00000396 <nRF24L01P_Calcuate_CRC_Block>:

uint16_t nRF24L01P_Calcuate_CRC_Block(uint8_t *buf, uint8_t len){
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	06 2f       	mov	r16, r22
 3a0:	ec 01       	movw	r28, r24
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	10 e0       	ldi	r17, 0x00	; 0
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <nRF24L01P_Calcuate_CRC_Block+0x20>
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
    crc=nRF24L01P_Calcuate_CRC(crc,buf[i]);
 3aa:	c9 01       	movw	r24, r18
 3ac:	69 91       	ld	r22, Y+
 3ae:	0e 94 b5 01 	call	0x36a	; 0x36a <nRF24L01P_Calcuate_CRC>
 3b2:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t nRF24L01P_Calcuate_CRC_Block(uint8_t *buf, uint8_t len){
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
 3b4:	1f 5f       	subi	r17, 0xFF	; 255
 3b6:	10 17       	cp	r17, r16
 3b8:	c0 f3       	brcs	.-16     	; 0x3aa <nRF24L01P_Calcuate_CRC_Block+0x14>
    crc=nRF24L01P_Calcuate_CRC(crc,buf[i]);
  }
  return crc;
}
 3ba:	c9 01       	movw	r24, r18
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	08 95       	ret

000003c6 <nRF24L01P_ReadWrite_Register>:


void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	98 2f       	mov	r25, r24
 3d2:	14 2f       	mov	r17, r20
 3d4:	05 2f       	mov	r16, r21
 3d6:	f2 2e       	mov	r15, r18
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 3d8:	e0 91 60 01 	lds	r30, 0x0160
 3dc:	f0 91 61 01 	lds	r31, 0x0161
 3e0:	82 89       	ldd	r24, Z+18	; 0x12
 3e2:	88 23       	and	r24, r24
 3e4:	29 f5       	brne	.+74     	; 0x430 <nRF24L01P_ReadWrite_Register+0x6a>
void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
 3e6:	28 98       	cbi	0x05, 0	; 5


void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
  if(nRF24L01P_No_Error()){
    nRF24L01P_CSN_Low();
    if(rw==0){
 3e8:	66 23       	and	r22, r22
 3ea:	89 f4       	brne	.+34     	; 0x40e <nRF24L01P_ReadWrite_Register+0x48>
      reg|=0x20;
	  nRF24L01P_SPI_Transfer(reg);
 3ec:	89 2f       	mov	r24, r25
 3ee:	80 62       	ori	r24, 0x20	; 32
 3f0:	0e 94 96 01 	call	0x32c	; 0x32c <nRF24L01P_SPI_Transfer>
 3f4:	81 2f       	mov	r24, r17
 3f6:	90 2f       	mov	r25, r16
 3f8:	9c 01       	movw	r18, r24
 3fa:	e9 01       	movw	r28, r18
 3fc:	10 e0       	ldi	r17, 0x00	; 0
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <nRF24L01P_ReadWrite_Register+0x42>
	  for(uint8_t i=0;i<len;i++){
	    nRF24L01P_SPI_Transfer(data[i]);
 400:	89 91       	ld	r24, Y+
 402:	0e 94 96 01 	call	0x32c	; 0x32c <nRF24L01P_SPI_Transfer>
  if(nRF24L01P_No_Error()){
    nRF24L01P_CSN_Low();
    if(rw==0){
      reg|=0x20;
	  nRF24L01P_SPI_Transfer(reg);
	  for(uint8_t i=0;i<len;i++){
 406:	1f 5f       	subi	r17, 0xFF	; 255
 408:	1f 15       	cp	r17, r15
 40a:	d0 f3       	brcs	.-12     	; 0x400 <nRF24L01P_ReadWrite_Register+0x3a>
 40c:	10 c0       	rjmp	.+32     	; 0x42e <nRF24L01P_ReadWrite_Register+0x68>
	    nRF24L01P_SPI_Transfer(data[i]);
	  }
    }else{
      nRF24L01P_SPI_Transfer(reg);
 40e:	89 2f       	mov	r24, r25
 410:	0e 94 96 01 	call	0x32c	; 0x32c <nRF24L01P_SPI_Transfer>
 414:	81 2f       	mov	r24, r17
 416:	90 2f       	mov	r25, r16
 418:	9c 01       	movw	r18, r24
 41a:	e9 01       	movw	r28, r18
 41c:	10 e0       	ldi	r17, 0x00	; 0
 41e:	05 c0       	rjmp	.+10     	; 0x42a <nRF24L01P_ReadWrite_Register+0x64>
      for(uint8_t i=0;i<len;i++){
        data[i]=nRF24L01P_SPI_Transfer(0xFF);
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	0e 94 96 01 	call	0x32c	; 0x32c <nRF24L01P_SPI_Transfer>
 426:	89 93       	st	Y+, r24
	  for(uint8_t i=0;i<len;i++){
	    nRF24L01P_SPI_Transfer(data[i]);
	  }
    }else{
      nRF24L01P_SPI_Transfer(reg);
      for(uint8_t i=0;i<len;i++){
 428:	1f 5f       	subi	r17, 0xFF	; 255
 42a:	1f 15       	cp	r17, r15
 42c:	c8 f3       	brcs	.-14     	; 0x420 <nRF24L01P_ReadWrite_Register+0x5a>
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 42e:	28 9a       	sbi	0x05, 0	; 5
        data[i]=nRF24L01P_SPI_Transfer(0xFF);
      }
    }
    nRF24L01P_CSN_High();
  }
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	08 95       	ret

0000043c <nRF24L01P_Flush_Transmit_Buffer>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 43c:	e0 91 60 01 	lds	r30, 0x0160
 440:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 444:	82 89       	ldd	r24, Z+18	; 0x12
 446:	88 23       	and	r24, r24
 448:	39 f4       	brne	.+14     	; 0x458 <nRF24L01P_Flush_Transmit_Buffer+0x1c>
  }
}

void nRF24L01P_Flush_Transmit_Buffer(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0xE1,0,nRF24L01P->TempBuf,0);
 44a:	31 96       	adiw	r30, 0x01	; 1
 44c:	81 ee       	ldi	r24, 0xE1	; 225
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	af 01       	movw	r20, r30
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
 458:	08 95       	ret

0000045a <nRF24L01P_Write_Data_To_Transmit_Buffer>:
  }
}

void nRF24L01P_Write_Data_To_Transmit_Buffer(uint8_t *data){
 45a:	ac 01       	movw	r20, r24
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 45c:	e0 91 60 01 	lds	r30, 0x0160
 460:	f0 91 61 01 	lds	r31, 0x0161
 464:	82 89       	ldd	r24, Z+18	; 0x12
 466:	88 23       	and	r24, r24
 468:	29 f4       	brne	.+10     	; 0x474 <nRF24L01P_Write_Data_To_Transmit_Buffer+0x1a>
  }
}

void nRF24L01P_Write_Data_To_Transmit_Buffer(uint8_t *data){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0xA0,0,data,32);
 46a:	80 ea       	ldi	r24, 0xA0	; 160
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	20 e2       	ldi	r18, 0x20	; 32
 470:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
 474:	08 95       	ret

00000476 <nRF24L01P_Transmit_Buffer_Empty>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 476:	e0 91 60 01 	lds	r30, 0x0160
 47a:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 47e:	82 89       	ldd	r24, Z+18	; 0x12
 480:	88 23       	and	r24, r24
 482:	11 f0       	breq	.+4      	; 0x488 <nRF24L01P_Transmit_Buffer_Empty+0x12>
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	08 95       	ret
  }
}

uint8_t nRF24L01P_Transmit_Buffer_Empty(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0;
 488:	11 82       	std	Z+1, r1	; 0x01
    nRF24L01P_ReadWrite_Register(0x17,1,nRF24L01P->TempBuf,1);
 48a:	31 96       	adiw	r30, 0x01	; 1
 48c:	87 e1       	ldi	r24, 0x17	; 23
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	af 01       	movw	r20, r30
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
 498:	e0 91 60 01 	lds	r30, 0x0160
 49c:	f0 91 61 01 	lds	r31, 0x0161
 4a0:	81 81       	ldd	r24, Z+1	; 0x01
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	64 e0       	ldi	r22, 0x04	; 4
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	6a 95       	dec	r22
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <nRF24L01P_Transmit_Buffer_Empty+0x30>
 4ae:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
 4b0:	08 95       	ret

000004b2 <nRF24L01P_Wait_Till_Transmission_Completes>:

void nRF24L01P_Wait_Till_Transmission_Completes(void){
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 4b6:	e0 91 60 01 	lds	r30, 0x0160
 4ba:	f0 91 61 01 	lds	r31, 0x0161
 4be:	82 89       	ldd	r24, Z+18	; 0x12
 4c0:	88 23       	and	r24, r24
 4c2:	29 f0       	breq	.+10     	; 0x4ce <nRF24L01P_Wait_Till_Transmission_Completes+0x1c>
 4c4:	0a c0       	rjmp	.+20     	; 0x4da <nRF24L01P_Wait_Till_Transmission_Completes+0x28>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <nRF24L01P_Wait_Till_Transmission_Completes+0x16>
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <nRF24L01P_Wait_Till_Transmission_Completes+0x20>
 4ce:	cc e2       	ldi	r28, 0x2C	; 44
 4d0:	d1 e0       	ldi	r29, 0x01	; 1
  }
}

void nRF24L01P_Wait_Till_Transmission_Completes(void){
  if(nRF24L01P_No_Error()){
    while(!nRF24L01P_Transmit_Buffer_Empty()){
 4d2:	0e 94 3b 02 	call	0x476	; 0x476 <nRF24L01P_Transmit_Buffer_Empty>
 4d6:	88 23       	and	r24, r24
 4d8:	b1 f3       	breq	.-20     	; 0x4c6 <nRF24L01P_Wait_Till_Transmission_Completes+0x14>
      _delay_us(100);
    }
  }
}
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <nRF24L01P_Flush_Receive_Buffer>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 4e0:	e0 91 60 01 	lds	r30, 0x0160
 4e4:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 4e8:	82 89       	ldd	r24, Z+18	; 0x12
 4ea:	88 23       	and	r24, r24
 4ec:	39 f4       	brne	.+14     	; 0x4fc <nRF24L01P_Flush_Receive_Buffer+0x1c>
  }
}

void nRF24L01P_Flush_Receive_Buffer(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0xE2,0,nRF24L01P->TempBuf,0);
 4ee:	31 96       	adiw	r30, 0x01	; 1
 4f0:	82 ee       	ldi	r24, 0xE2	; 226
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	af 01       	movw	r20, r30
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
 4fc:	08 95       	ret

000004fe <nRF24L01P_Read_Data_From_Receive_Buffer>:
  }
}

void nRF24L01P_Read_Data_From_Receive_Buffer(uint8_t *data){
 4fe:	ac 01       	movw	r20, r24
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 500:	e0 91 60 01 	lds	r30, 0x0160
 504:	f0 91 61 01 	lds	r31, 0x0161
 508:	82 89       	ldd	r24, Z+18	; 0x12
 50a:	88 23       	and	r24, r24
 50c:	29 f4       	brne	.+10     	; 0x518 <nRF24L01P_Read_Data_From_Receive_Buffer+0x1a>
  }
}

void nRF24L01P_Read_Data_From_Receive_Buffer(uint8_t *data){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x61,1,data,32);
 50e:	81 e6       	ldi	r24, 0x61	; 97
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	20 e2       	ldi	r18, 0x20	; 32
 514:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
 518:	08 95       	ret

0000051a <nRF24L01P_Receive_Buffer_Not_Empty>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 51a:	e0 91 60 01 	lds	r30, 0x0160
 51e:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 522:	82 89       	ldd	r24, Z+18	; 0x12
 524:	88 23       	and	r24, r24
 526:	11 f0       	breq	.+4      	; 0x52c <nRF24L01P_Receive_Buffer_Not_Empty+0x12>
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
  }
}

uint8_t nRF24L01P_Receive_Buffer_Not_Empty(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0;
 52c:	11 82       	std	Z+1, r1	; 0x01
    nRF24L01P_ReadWrite_Register(0x17,1,nRF24L01P->TempBuf,1);
 52e:	31 96       	adiw	r30, 0x01	; 1
 530:	87 e1       	ldi	r24, 0x17	; 23
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	af 01       	movw	r20, r30
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
 53c:	e0 91 60 01 	lds	r30, 0x0160
 540:	f0 91 61 01 	lds	r31, 0x0161
 544:	81 81       	ldd	r24, Z+1	; 0x01
 546:	80 95       	com	r24
 548:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
 54a:	08 95       	ret

0000054c <nRF24L01P_Get_Mode>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 54c:	e0 91 60 01 	lds	r30, 0x0160
 550:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 554:	82 89       	ldd	r24, Z+18	; 0x12
 556:	88 23       	and	r24, r24
 558:	11 f0       	breq	.+4      	; 0x55e <nRF24L01P_Get_Mode+0x12>
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	08 95       	ret
  }
}

uint8_t nRF24L01P_Get_Mode(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x00,1,nRF24L01P->TempBuf,1);
 55e:	31 96       	adiw	r30, 0x01	; 1
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	af 01       	movw	r20, r30
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
    if(nRF24L01P->TempBuf[0] & (1<<1)){
 56c:	e0 91 60 01 	lds	r30, 0x0160
 570:	f0 91 61 01 	lds	r31, 0x0161
 574:	81 81       	ldd	r24, Z+1	; 0x01
 576:	81 ff       	sbrs	r24, 1
 578:	07 c0       	rjmp	.+14     	; 0x588 <nRF24L01P_Get_Mode+0x3c>
      if(nRF24L01P->TempBuf[0] & (1<<0)){
 57a:	80 ff       	sbrs	r24, 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <nRF24L01P_Get_Mode+0x36>
	    nRF24L01P->Mode=0x01;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	01 c0       	rjmp	.+2      	; 0x584 <nRF24L01P_Get_Mode+0x38>
	    return 1; //rx mode
	  }else{
	    nRF24L01P->Mode=0x02;
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	80 83       	st	Z, r24
 586:	08 95       	ret
	    return 2; //tx mode
	  }
    }else{
      nRF24L01P->Mode=0x00;
 588:	10 82       	st	Z, r1
 58a:	80 e0       	ldi	r24, 0x00	; 0
      return 0;   //pwr down
    }
  }else{
    return 0;
  }
}
 58c:	08 95       	ret

0000058e <nRF24L01P_Set_Mode_Sleep>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 58e:	e0 91 60 01 	lds	r30, 0x0160
 592:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 596:	82 89       	ldd	r24, Z+18	; 0x12
 598:	88 23       	and	r24, r24
 59a:	61 f4       	brne	.+24     	; 0x5b4 <nRF24L01P_Set_Mode_Sleep+0x26>
  }
}
  
void nRF24L01P_Set_Mode_Sleep(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x00;
 59c:	11 82       	std	Z+1, r1	; 0x01
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 59e:	31 96       	adiw	r30, 0x01	; 1
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	af 01       	movw	r20, r30
 5a4:	21 e0       	ldi	r18, 0x01	; 1
 5a6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
    nRF24L01P->Mode=0x00;
 5aa:	e0 91 60 01 	lds	r30, 0x0160
 5ae:	f0 91 61 01 	lds	r31, 0x0161
 5b2:	10 82       	st	Z, r1
 5b4:	08 95       	ret

000005b6 <nRF24L01P_Set_Mode_Tx>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 5b6:	e0 91 60 01 	lds	r30, 0x0160
 5ba:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 5be:	82 89       	ldd	r24, Z+18	; 0x12
 5c0:	88 23       	and	r24, r24
 5c2:	91 f4       	brne	.+36     	; 0x5e8 <nRF24L01P_Set_Mode_Tx+0x32>
  }
}

void nRF24L01P_Set_Mode_Tx(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x72;
 5c4:	82 e7       	ldi	r24, 0x72	; 114
 5c6:	81 83       	std	Z+1, r24	; 0x01
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 5c8:	5f 98       	cbi	0x0b, 7	; 11

void nRF24L01P_Set_Mode_Tx(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x72;
    nRF24L01P_CE_Low();
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 5ca:	31 96       	adiw	r30, 0x01	; 1
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	af 01       	movw	r20, r30
 5d2:	21 e0       	ldi	r18, 0x01	; 1
 5d4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
	nRF24L01P_Flush_Transmit_Buffer();
 5d8:	0e 94 1e 02 	call	0x43c	; 0x43c <nRF24L01P_Flush_Transmit_Buffer>
	nRF24L01P->Mode=0x02;
 5dc:	e0 91 60 01 	lds	r30, 0x0160
 5e0:	f0 91 61 01 	lds	r31, 0x0161
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	80 83       	st	Z, r24
 5e8:	08 95       	ret

000005ea <nRF24L01P_Set_Mode_Rx>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 5ea:	e0 91 60 01 	lds	r30, 0x0160
 5ee:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 5f2:	82 89       	ldd	r24, Z+18	; 0x12
 5f4:	88 23       	and	r24, r24
 5f6:	81 f4       	brne	.+32     	; 0x618 <nRF24L01P_Set_Mode_Rx+0x2e>
  }
}

void nRF24L01P_Set_Mode_Rx(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x73;
 5f8:	83 e7       	ldi	r24, 0x73	; 115
 5fa:	81 83       	std	Z+1, r24	; 0x01
void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 5fc:	5f 9a       	sbi	0x0b, 7	; 11

void nRF24L01P_Set_Mode_Rx(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x73;
    nRF24L01P_CE_High();
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 5fe:	31 96       	adiw	r30, 0x01	; 1
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	af 01       	movw	r20, r30
 606:	21 e0       	ldi	r18, 0x01	; 1
 608:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
	nRF24L01P->Mode=0x01;
 60c:	e0 91 60 01 	lds	r30, 0x0160
 610:	f0 91 61 01 	lds	r31, 0x0161
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 83       	st	Z, r24
 618:	08 95       	ret

0000061a <nRF24L01P_ReadModifyWrite>:
  }
}

void nRF24L01P_ReadModifyWrite(uint8_t reg, uint8_t bit_pos, uint8_t bit_val){
 61a:	ff 92       	push	r15
 61c:	0f 93       	push	r16
 61e:	1f 93       	push	r17
 620:	f8 2e       	mov	r15, r24
 622:	16 2f       	mov	r17, r22
 624:	04 2f       	mov	r16, r20
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 626:	e0 91 60 01 	lds	r30, 0x0160
 62a:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 62e:	82 89       	ldd	r24, Z+18	; 0x12
 630:	88 23       	and	r24, r24
 632:	69 f5       	brne	.+90     	; 0x68e <nRF24L01P_ReadModifyWrite+0x74>
  }
}

void nRF24L01P_ReadModifyWrite(uint8_t reg, uint8_t bit_pos, uint8_t bit_val){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(reg,1,nRF24L01P->TempBuf,1);
 634:	31 96       	adiw	r30, 0x01	; 1
 636:	8f 2d       	mov	r24, r15
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	af 01       	movw	r20, r30
 63c:	21 e0       	ldi	r18, 0x01	; 1
 63e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
 642:	e0 91 60 01 	lds	r30, 0x0160
 646:	f0 91 61 01 	lds	r31, 0x0161
    if(bit_val){
 64a:	00 23       	and	r16, r16
 64c:	51 f0       	breq	.+20     	; 0x662 <nRF24L01P_ReadModifyWrite+0x48>
      nRF24L01P->TempBuf[0]|=(1<<bit_pos);
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <nRF24L01P_ReadModifyWrite+0x3e>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	1a 95       	dec	r17
 65a:	e2 f7       	brpl	.-8      	; 0x654 <nRF24L01P_ReadModifyWrite+0x3a>
 65c:	21 81       	ldd	r18, Z+1	; 0x01
 65e:	28 2b       	or	r18, r24
 660:	0a c0       	rjmp	.+20     	; 0x676 <nRF24L01P_ReadModifyWrite+0x5c>
    }else{
      nRF24L01P->TempBuf[0]&=~(1<<bit_pos);
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <nRF24L01P_ReadModifyWrite+0x52>
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	1a 95       	dec	r17
 66e:	e2 f7       	brpl	.-8      	; 0x668 <nRF24L01P_ReadModifyWrite+0x4e>
 670:	80 95       	com	r24
 672:	21 81       	ldd	r18, Z+1	; 0x01
 674:	28 23       	and	r18, r24
 676:	21 83       	std	Z+1, r18	; 0x01
    }
    nRF24L01P_ReadWrite_Register(reg,0,nRF24L01P->TempBuf,1);
 678:	40 91 60 01 	lds	r20, 0x0160
 67c:	50 91 61 01 	lds	r21, 0x0161
 680:	4f 5f       	subi	r20, 0xFF	; 255
 682:	5f 4f       	sbci	r21, 0xFF	; 255
 684:	8f 2d       	mov	r24, r15
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	21 e0       	ldi	r18, 0x01	; 1
 68a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  }
}
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	ff 90       	pop	r15
 694:	08 95       	ret

00000696 <nRF24L01P_Get_Channel>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 696:	e0 91 60 01 	lds	r30, 0x0160
 69a:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 69e:	82 89       	ldd	r24, Z+18	; 0x12
 6a0:	88 23       	and	r24, r24
 6a2:	11 f0       	breq	.+4      	; 0x6a8 <nRF24L01P_Get_Channel+0x12>
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	08 95       	ret
  }
}

uint8_t nRF24L01P_Get_Channel(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x05,1,nRF24L01P->TempBuf,1);
 6a8:	31 96       	adiw	r30, 0x01	; 1
 6aa:	85 e0       	ldi	r24, 0x05	; 5
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	af 01       	movw	r20, r30
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
    return nRF24L01P->TempBuf[0];
 6b6:	e0 91 60 01 	lds	r30, 0x0160
 6ba:	f0 91 61 01 	lds	r31, 0x0161
 6be:	81 81       	ldd	r24, Z+1	; 0x01
  }else{
    return 0;
  }
}
 6c0:	08 95       	ret

000006c2 <nRF24L01P_Set_Channel>:

void nRF24L01P_Set_Channel(uint8_t channel){
 6c2:	98 2f       	mov	r25, r24
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 6c4:	e0 91 60 01 	lds	r30, 0x0160
 6c8:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 6cc:	82 89       	ldd	r24, Z+18	; 0x12
 6ce:	88 23       	and	r24, r24
 6d0:	61 f4       	brne	.+24     	; 0x6ea <nRF24L01P_Set_Channel+0x28>
void nRF24L01P_Set_Channel(uint8_t channel){
  if(nRF24L01P_No_Error()){
    if(channel>125){
      channel=125;
    }
    nRF24L01P->TempBuf[0]=channel;
 6d2:	89 2f       	mov	r24, r25
 6d4:	9e 37       	cpi	r25, 0x7E	; 126
 6d6:	08 f0       	brcs	.+2      	; 0x6da <nRF24L01P_Set_Channel+0x18>
 6d8:	8d e7       	ldi	r24, 0x7D	; 125
 6da:	81 83       	std	Z+1, r24	; 0x01
    nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
 6dc:	31 96       	adiw	r30, 0x01	; 1
 6de:	85 e0       	ldi	r24, 0x05	; 5
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	af 01       	movw	r20, r30
 6e4:	21 e0       	ldi	r18, 0x01	; 1
 6e6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
 6ea:	08 95       	ret

000006ec <nRF24L01P_Get_Speed>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 6ec:	e0 91 60 01 	lds	r30, 0x0160
 6f0:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 6f4:	82 89       	ldd	r24, Z+18	; 0x12
 6f6:	88 23       	and	r24, r24
 6f8:	11 f0       	breq	.+4      	; 0x6fe <nRF24L01P_Get_Speed+0x12>
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	08 95       	ret
  }
}

uint8_t nRF24L01P_Get_Speed(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
 6fe:	31 96       	adiw	r30, 0x01	; 1
 700:	86 e0       	ldi	r24, 0x06	; 6
 702:	61 e0       	ldi	r22, 0x01	; 1
 704:	af 01       	movw	r20, r30
 706:	21 e0       	ldi	r18, 0x01	; 1
 708:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
    nRF24L01P->TempBuf[1]=(nRF24L01P->TempBuf[0] >> 3) & 0x01;
 70c:	e0 91 60 01 	lds	r30, 0x0160
 710:	f0 91 61 01 	lds	r31, 0x0161
 714:	91 81       	ldd	r25, Z+1	; 0x01
 716:	96 95       	lsr	r25
 718:	96 95       	lsr	r25
 71a:	96 95       	lsr	r25
    nRF24L01P->TempBuf[0]>>=4;
    nRF24L01P->TempBuf[0]&=0x02;
 71c:	89 2f       	mov	r24, r25
 71e:	86 95       	lsr	r24
 720:	82 70       	andi	r24, 0x02	; 2
 722:	81 83       	std	Z+1, r24	; 0x01
}

uint8_t nRF24L01P_Get_Speed(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
    nRF24L01P->TempBuf[1]=(nRF24L01P->TempBuf[0] >> 3) & 0x01;
 724:	91 70       	andi	r25, 0x01	; 1
    nRF24L01P->TempBuf[0]>>=4;
    nRF24L01P->TempBuf[0]&=0x02;
    nRF24L01P->TempBuf[1]|=nRF24L01P->TempBuf[0];
 726:	89 2b       	or	r24, r25
 728:	82 83       	std	Z+2, r24	; 0x02
    if      (nRF24L01P->TempBuf[1]==0x02){
 72a:	82 30       	cpi	r24, 0x02	; 2
 72c:	11 f4       	brne	.+4      	; 0x732 <nRF24L01P_Get_Speed+0x46>
      nRF24L01P->TempBuf[0]=0;
 72e:	11 82       	std	Z+1, r1	; 0x01
 730:	06 c0       	rjmp	.+12     	; 0x73e <nRF24L01P_Get_Speed+0x52>
    }else if(nRF24L01P->TempBuf[1]==0x01){
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	19 f0       	breq	.+6      	; 0x73c <nRF24L01P_Get_Speed+0x50>
      nRF24L01P->TempBuf[0]=1;
    }else if(nRF24L01P->TempBuf[1]==0x00){
 736:	88 23       	and	r24, r24
 738:	11 f4       	brne	.+4      	; 0x73e <nRF24L01P_Get_Speed+0x52>
      nRF24L01P->TempBuf[0]=2;
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	81 83       	std	Z+1, r24	; 0x01
    }
    return nRF24L01P->TempBuf[0];
 73e:	81 81       	ldd	r24, Z+1	; 0x01
  }else{
    return 0;
  }
}  
 740:	08 95       	ret

00000742 <nRF24L01P_Set_Speed>:

void nRF24L01P_Set_Speed(uint8_t index){
 742:	98 2f       	mov	r25, r24
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 744:	e0 91 60 01 	lds	r30, 0x0160
 748:	f0 91 61 01 	lds	r31, 0x0161
 74c:	82 89       	ldd	r24, Z+18	; 0x12
 74e:	88 23       	and	r24, r24
 750:	41 f5       	brne	.+80     	; 0x7a2 <nRF24L01P_Set_Speed+0x60>
  }
}  

void nRF24L01P_Set_Speed(uint8_t index){
  if(nRF24L01P_No_Error()){
    if(index==0){       //250kbps
 752:	99 23       	and	r25, r25
 754:	21 f4       	brne	.+8      	; 0x75e <nRF24L01P_Set_Speed+0x1c>
      nRF24L01P_ReadModifyWrite(0x06,5,1);
 756:	86 e0       	ldi	r24, 0x06	; 6
 758:	65 e0       	ldi	r22, 0x05	; 5
 75a:	41 e0       	ldi	r20, 0x01	; 1
 75c:	05 c0       	rjmp	.+10     	; 0x768 <nRF24L01P_Set_Speed+0x26>
      nRF24L01P_ReadModifyWrite(0x06,3,0);
    }
    else if(index==1){  //1Mbps
 75e:	91 30       	cpi	r25, 0x01	; 1
 760:	49 f4       	brne	.+18     	; 0x774 <nRF24L01P_Set_Speed+0x32>
      nRF24L01P_ReadModifyWrite(0x06,5,0);
 762:	86 e0       	ldi	r24, 0x06	; 6
 764:	65 e0       	ldi	r22, 0x05	; 5
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,3,0);
 76c:	86 e0       	ldi	r24, 0x06	; 6
 76e:	63 e0       	ldi	r22, 0x03	; 3
 770:	40 e0       	ldi	r20, 0x00	; 0
 772:	0a c0       	rjmp	.+20     	; 0x788 <nRF24L01P_Set_Speed+0x46>
    }
    else if(index==2){  //2Mbps
 774:	92 30       	cpi	r25, 0x02	; 2
 776:	59 f4       	brne	.+22     	; 0x78e <nRF24L01P_Set_Speed+0x4c>
      nRF24L01P_ReadModifyWrite(0x06,5,0);
 778:	86 e0       	ldi	r24, 0x06	; 6
 77a:	65 e0       	ldi	r22, 0x05	; 5
 77c:	40 e0       	ldi	r20, 0x00	; 0
 77e:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,3,1);
 782:	86 e0       	ldi	r24, 0x06	; 6
 784:	63 e0       	ldi	r22, 0x03	; 3
 786:	41 e0       	ldi	r20, 0x01	; 1
 788:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
 78c:	08 95       	ret
    }else{              //2Mbps
      nRF24L01P_ReadModifyWrite(0x06,5,0);
 78e:	86 e0       	ldi	r24, 0x06	; 6
 790:	65 e0       	ldi	r22, 0x05	; 5
 792:	40 e0       	ldi	r20, 0x00	; 0
 794:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,3,1);
 798:	86 e0       	ldi	r24, 0x06	; 6
 79a:	63 e0       	ldi	r22, 0x03	; 3
 79c:	41 e0       	ldi	r20, 0x01	; 1
 79e:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
 7a2:	08 95       	ret

000007a4 <nRF24L01P_Get_Tx_Power>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 7a4:	e0 91 60 01 	lds	r30, 0x0160
 7a8:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 7ac:	82 89       	ldd	r24, Z+18	; 0x12
 7ae:	88 23       	and	r24, r24
 7b0:	11 f0       	breq	.+4      	; 0x7b6 <nRF24L01P_Get_Tx_Power+0x12>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	08 95       	ret
  }
}

uint8_t nRF24L01P_Get_Tx_Power(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
 7b6:	31 96       	adiw	r30, 0x01	; 1
 7b8:	86 e0       	ldi	r24, 0x06	; 6
 7ba:	61 e0       	ldi	r22, 0x01	; 1
 7bc:	af 01       	movw	r20, r30
 7be:	21 e0       	ldi	r18, 0x01	; 1
 7c0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
    nRF24L01P->TempBuf[0]>>=1;
 7c4:	e0 91 60 01 	lds	r30, 0x0160
 7c8:	f0 91 61 01 	lds	r31, 0x0161
    nRF24L01P->TempBuf[0]&=0x03;
 7cc:	81 81       	ldd	r24, Z+1	; 0x01
 7ce:	86 95       	lsr	r24
 7d0:	83 70       	andi	r24, 0x03	; 3
 7d2:	81 83       	std	Z+1, r24	; 0x01
    return nRF24L01P->TempBuf[0];
  }else{
    return 0;
  }
}  
 7d4:	08 95       	ret

000007d6 <nRF24L01P_Set_Tx_Power>:

void nRF24L01P_Set_Tx_Power(uint8_t index){
 7d6:	98 2f       	mov	r25, r24
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 7d8:	e0 91 60 01 	lds	r30, 0x0160
 7dc:	f0 91 61 01 	lds	r31, 0x0161
 7e0:	82 89       	ldd	r24, Z+18	; 0x12
 7e2:	88 23       	and	r24, r24
 7e4:	71 f5       	brne	.+92     	; 0x842 <nRF24L01P_Set_Tx_Power+0x6c>
  }
}  

void nRF24L01P_Set_Tx_Power(uint8_t index){
  if(nRF24L01P_No_Error()){
    if(index==0){
 7e6:	99 23       	and	r25, r25
 7e8:	21 f4       	brne	.+8      	; 0x7f2 <nRF24L01P_Set_Tx_Power+0x1c>
      nRF24L01P_ReadModifyWrite(0x06,2,0);
 7ea:	86 e0       	ldi	r24, 0x06	; 6
 7ec:	62 e0       	ldi	r22, 0x02	; 2
 7ee:	40 e0       	ldi	r20, 0x00	; 0
 7f0:	0b c0       	rjmp	.+22     	; 0x808 <nRF24L01P_Set_Tx_Power+0x32>
      nRF24L01P_ReadModifyWrite(0x06,1,0);
    }
    else if(index==1){
 7f2:	91 30       	cpi	r25, 0x01	; 1
 7f4:	21 f4       	brne	.+8      	; 0x7fe <nRF24L01P_Set_Tx_Power+0x28>
      nRF24L01P_ReadModifyWrite(0x06,2,0);
 7f6:	86 e0       	ldi	r24, 0x06	; 6
 7f8:	62 e0       	ldi	r22, 0x02	; 2
 7fa:	40 e0       	ldi	r20, 0x00	; 0
 7fc:	10 c0       	rjmp	.+32     	; 0x81e <nRF24L01P_Set_Tx_Power+0x48>
      nRF24L01P_ReadModifyWrite(0x06,1,1);
    }
    else if(index==2){
 7fe:	92 30       	cpi	r25, 0x02	; 2
 800:	49 f4       	brne	.+18     	; 0x814 <nRF24L01P_Set_Tx_Power+0x3e>
      nRF24L01P_ReadModifyWrite(0x06,2,1);
 802:	86 e0       	ldi	r24, 0x06	; 6
 804:	62 e0       	ldi	r22, 0x02	; 2
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,1,0);
 80c:	86 e0       	ldi	r24, 0x06	; 6
 80e:	61 e0       	ldi	r22, 0x01	; 1
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	0a c0       	rjmp	.+20     	; 0x828 <nRF24L01P_Set_Tx_Power+0x52>
    }
    else if(index==3){
 814:	93 30       	cpi	r25, 0x03	; 3
 816:	59 f4       	brne	.+22     	; 0x82e <nRF24L01P_Set_Tx_Power+0x58>
      nRF24L01P_ReadModifyWrite(0x06,2,1);
 818:	86 e0       	ldi	r24, 0x06	; 6
 81a:	62 e0       	ldi	r22, 0x02	; 2
 81c:	41 e0       	ldi	r20, 0x01	; 1
 81e:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,1,1);
 822:	86 e0       	ldi	r24, 0x06	; 6
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	41 e0       	ldi	r20, 0x01	; 1
 828:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
 82c:	08 95       	ret
    }else{
      nRF24L01P_ReadModifyWrite(0x06,2,1);
 82e:	86 e0       	ldi	r24, 0x06	; 6
 830:	62 e0       	ldi	r22, 0x02	; 2
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,1,1);
 838:	86 e0       	ldi	r24, 0x06	; 6
 83a:	61 e0       	ldi	r22, 0x01	; 1
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01P_ReadModifyWrite>
 842:	08 95       	ret

00000844 <nRF24L01P_Set_Own_Address>:
    }
  }
}

void nRF24L01P_Set_Own_Address(uint8_t addr){
  nRF24L01P->Address.Own=addr;
 844:	e0 91 60 01 	lds	r30, 0x0160
 848:	f0 91 61 01 	lds	r31, 0x0161
 84c:	83 83       	std	Z+3, r24	; 0x03
}
 84e:	08 95       	ret

00000850 <nRF24L01P_Set_Destination_Address>:

void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
 850:	e0 91 60 01 	lds	r30, 0x0160
 854:	f0 91 61 01 	lds	r31, 0x0161
 858:	84 83       	std	Z+4, r24	; 0x04
}
 85a:	08 95       	ret

0000085c <nRF24L01P_Set_Receive_Timeout>:

void nRF24L01P_Set_Receive_Timeout(uint16_t val){
  nRF24L01P->Config.RxTimeout=val;
 85c:	e0 91 60 01 	lds	r30, 0x0160
 860:	f0 91 61 01 	lds	r31, 0x0161
 864:	96 83       	std	Z+6, r25	; 0x06
 866:	85 83       	std	Z+5, r24	; 0x05
}
 868:	08 95       	ret

0000086a <nRF24L01P_Set_MaxRetransmission>:

void nRF24L01P_Set_MaxRetransmission(uint16_t val){
  nRF24L01P->Config.MaxRetry=val;
 86a:	e0 91 60 01 	lds	r30, 0x0160
 86e:	f0 91 61 01 	lds	r31, 0x0161
 872:	93 87       	std	Z+11, r25	; 0x0b
 874:	82 87       	std	Z+10, r24	; 0x0a
}
 876:	08 95       	ret

00000878 <nRF24L01P_Deep_Sleep>:

void nRF24L01P_Deep_Sleep(void){
  if(nRF24L01P->Mode!=0x00){
 878:	e0 91 60 01 	lds	r30, 0x0160
 87c:	f0 91 61 01 	lds	r31, 0x0161
 880:	80 81       	ld	r24, Z
 882:	88 23       	and	r24, r24
 884:	21 f0       	breq	.+8      	; 0x88e <nRF24L01P_Deep_Sleep+0x16>
    nRF24L01P_Set_Mode_Sleep();
 886:	0e 94 c7 02 	call	0x58e	; 0x58e <nRF24L01P_Set_Mode_Sleep>
    nRF24L01P_Disable();
 88a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <nRF24L01P_Disable>
 88e:	08 95       	ret

00000890 <nRF24L01P_WakeUp>:
  }
}


void nRF24L01P_WakeUp(void){
  if(nRF24L01P->Mode==0x00){
 890:	e0 91 60 01 	lds	r30, 0x0160
 894:	f0 91 61 01 	lds	r31, 0x0161
 898:	80 81       	ld	r24, Z
 89a:	88 23       	and	r24, r24
 89c:	21 f4       	brne	.+8      	; 0x8a6 <nRF24L01P_WakeUp+0x16>
    nRF24L01P_Enable();
 89e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01P_Enable>
    nRF24L01P_Set_Mode_Rx();
 8a2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <nRF24L01P_Set_Mode_Rx>
 8a6:	08 95       	ret

000008a8 <nRF24L01P_Init>:
  }
}

void nRF24L01P_Init(void){
 8a8:	0f 93       	push	r16
 8aa:	1f 93       	push	r17
  nRF24L01P_Struct_Init();
 8ac:	0e 94 0c 01 	call	0x218	; 0x218 <nRF24L01P_Struct_Init>
  nRF24L01P_Enable();
 8b0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01P_Enable>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 8b4:	e0 91 60 01 	lds	r30, 0x0160
 8b8:	f0 91 61 01 	lds	r31, 0x0161
 8bc:	11 82       	std	Z+1, r1	; 0x01
 8be:	31 96       	adiw	r30, 0x01	; 1
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	af 01       	movw	r20, r30
 8c6:	21 e0       	ldi	r18, 0x01	; 1
 8c8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x01,0,nRF24L01P->TempBuf,1);
 8cc:	e0 91 60 01 	lds	r30, 0x0160
 8d0:	f0 91 61 01 	lds	r31, 0x0161
 8d4:	11 82       	std	Z+1, r1	; 0x01
 8d6:	31 96       	adiw	r30, 0x01	; 1
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	af 01       	movw	r20, r30
 8de:	21 e0       	ldi	r18, 0x01	; 1
 8e0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x03;  nRF24L01P_ReadWrite_Register(0x02,0,nRF24L01P->TempBuf,1);
 8e4:	e0 91 60 01 	lds	r30, 0x0160
 8e8:	f0 91 61 01 	lds	r31, 0x0161
 8ec:	83 e0       	ldi	r24, 0x03	; 3
 8ee:	81 83       	std	Z+1, r24	; 0x01
 8f0:	31 96       	adiw	r30, 0x01	; 1
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	af 01       	movw	r20, r30
 8f8:	21 e0       	ldi	r18, 0x01	; 1
 8fa:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x01;  nRF24L01P_ReadWrite_Register(0x03,0,nRF24L01P->TempBuf,1);
 8fe:	e0 91 60 01 	lds	r30, 0x0160
 902:	f0 91 61 01 	lds	r31, 0x0161
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	81 83       	std	Z+1, r24	; 0x01
 90a:	31 96       	adiw	r30, 0x01	; 1
 90c:	83 e0       	ldi	r24, 0x03	; 3
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	af 01       	movw	r20, r30
 912:	21 e0       	ldi	r18, 0x01	; 1
 914:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x04,0,nRF24L01P->TempBuf,1);
 918:	e0 91 60 01 	lds	r30, 0x0160
 91c:	f0 91 61 01 	lds	r31, 0x0161
 920:	11 82       	std	Z+1, r1	; 0x01
 922:	31 96       	adiw	r30, 0x01	; 1
 924:	84 e0       	ldi	r24, 0x04	; 4
 926:	60 e0       	ldi	r22, 0x00	; 0
 928:	af 01       	movw	r20, r30
 92a:	21 e0       	ldi	r18, 0x01	; 1
 92c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x02;  nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
 930:	e0 91 60 01 	lds	r30, 0x0160
 934:	f0 91 61 01 	lds	r31, 0x0161
 938:	82 e0       	ldi	r24, 0x02	; 2
 93a:	81 83       	std	Z+1, r24	; 0x01
 93c:	31 96       	adiw	r30, 0x01	; 1
 93e:	85 e0       	ldi	r24, 0x05	; 5
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	af 01       	movw	r20, r30
 944:	21 e0       	ldi	r18, 0x01	; 1
 946:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x26;  nRF24L01P_ReadWrite_Register(0x06,0,nRF24L01P->TempBuf,1); 
 94a:	e0 91 60 01 	lds	r30, 0x0160
 94e:	f0 91 61 01 	lds	r31, 0x0161
 952:	86 e2       	ldi	r24, 0x26	; 38
 954:	81 83       	std	Z+1, r24	; 0x01
 956:	31 96       	adiw	r30, 0x01	; 1
 958:	86 e0       	ldi	r24, 0x06	; 6
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	af 01       	movw	r20, r30
 95e:	21 e0       	ldi	r18, 0x01	; 1
 960:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x70;  nRF24L01P_ReadWrite_Register(0x07,0,nRF24L01P->TempBuf,1);
 964:	e0 91 60 01 	lds	r30, 0x0160
 968:	f0 91 61 01 	lds	r31, 0x0161
 96c:	80 e7       	ldi	r24, 0x70	; 112
 96e:	81 83       	std	Z+1, r24	; 0x01
 970:	31 96       	adiw	r30, 0x01	; 1
 972:	87 e0       	ldi	r24, 0x07	; 7
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	af 01       	movw	r20, r30
 978:	21 e0       	ldi	r18, 0x01	; 1
 97a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=nRF24L01P_PACKET_LEN;  
 97e:	e0 91 60 01 	lds	r30, 0x0160
 982:	f0 91 61 01 	lds	r31, 0x0161
 986:	10 e2       	ldi	r17, 0x20	; 32
 988:	11 83       	std	Z+1, r17	; 0x01
  nRF24L01P_ReadWrite_Register(0x11,0,nRF24L01P->TempBuf,1);
 98a:	31 96       	adiw	r30, 0x01	; 1
 98c:	81 e1       	ldi	r24, 0x11	; 17
 98e:	60 e0       	ldi	r22, 0x00	; 0
 990:	af 01       	movw	r20, r30
 992:	21 e0       	ldi	r18, 0x01	; 1
 994:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=nRF24L01P_PACKET_LEN;  
 998:	e0 91 60 01 	lds	r30, 0x0160
 99c:	f0 91 61 01 	lds	r31, 0x0161
 9a0:	11 83       	std	Z+1, r17	; 0x01
  nRF24L01P_ReadWrite_Register(0x12,0,nRF24L01P->TempBuf,1);
 9a2:	31 96       	adiw	r30, 0x01	; 1
 9a4:	82 e1       	ldi	r24, 0x12	; 18
 9a6:	60 e0       	ldi	r22, 0x00	; 0
 9a8:	af 01       	movw	r20, r30
 9aa:	21 e0       	ldi	r18, 0x01	; 1
 9ac:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x1C,0,nRF24L01P->TempBuf,1);
 9b0:	e0 91 60 01 	lds	r30, 0x0160
 9b4:	f0 91 61 01 	lds	r31, 0x0161
 9b8:	11 82       	std	Z+1, r1	; 0x01
 9ba:	31 96       	adiw	r30, 0x01	; 1
 9bc:	8c e1       	ldi	r24, 0x1C	; 28
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	af 01       	movw	r20, r30
 9c2:	21 e0       	ldi	r18, 0x01	; 1
 9c4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x1D,0,nRF24L01P->TempBuf,1);
 9c8:	e0 91 60 01 	lds	r30, 0x0160
 9cc:	f0 91 61 01 	lds	r31, 0x0161
 9d0:	11 82       	std	Z+1, r1	; 0x01
 9d2:	31 96       	adiw	r30, 0x01	; 1
 9d4:	8d e1       	ldi	r24, 0x1D	; 29
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	af 01       	movw	r20, r30
 9da:	21 e0       	ldi	r18, 0x01	; 1
 9dc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x10,0,(uint8_t*)"ACK00",5);
 9e0:	00 e2       	ldi	r16, 0x20	; 32
 9e2:	11 e0       	ldi	r17, 0x01	; 1
 9e4:	80 e1       	ldi	r24, 0x10	; 16
 9e6:	60 e0       	ldi	r22, 0x00	; 0
 9e8:	a8 01       	movw	r20, r16
 9ea:	25 e0       	ldi	r18, 0x05	; 5
 9ec:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0A,0,(uint8_t*)"ACK00",5);
 9f0:	8a e0       	ldi	r24, 0x0A	; 10
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	a8 01       	movw	r20, r16
 9f6:	25 e0       	ldi	r18, 0x05	; 5
 9f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0B,0,(uint8_t*)"PIPE1",5);
 9fc:	8b e0       	ldi	r24, 0x0B	; 11
 9fe:	60 e0       	ldi	r22, 0x00	; 0
 a00:	46 e2       	ldi	r20, 0x26	; 38
 a02:	51 e0       	ldi	r21, 0x01	; 1
 a04:	25 e0       	ldi	r18, 0x05	; 5
 a06:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0C,0,(uint8_t*)"PIPE2",5);
 a0a:	8c e0       	ldi	r24, 0x0C	; 12
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	4c e2       	ldi	r20, 0x2C	; 44
 a10:	51 e0       	ldi	r21, 0x01	; 1
 a12:	25 e0       	ldi	r18, 0x05	; 5
 a14:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0D,0,(uint8_t*)"PIPE3",5);
 a18:	8d e0       	ldi	r24, 0x0D	; 13
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	42 e3       	ldi	r20, 0x32	; 50
 a1e:	51 e0       	ldi	r21, 0x01	; 1
 a20:	25 e0       	ldi	r18, 0x05	; 5
 a22:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0E,0,(uint8_t*)"PIPE4",5);
 a26:	8e e0       	ldi	r24, 0x0E	; 14
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	48 e3       	ldi	r20, 0x38	; 56
 a2c:	51 e0       	ldi	r21, 0x01	; 1
 a2e:	25 e0       	ldi	r18, 0x05	; 5
 a30:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0F,0,(uint8_t*)"PIPE5",5);
 a34:	8f e0       	ldi	r24, 0x0F	; 15
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	4e e3       	ldi	r20, 0x3E	; 62
 a3a:	51 e0       	ldi	r21, 0x01	; 1
 a3c:	25 e0       	ldi	r18, 0x05	; 5
 a3e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nRF24L01P_ReadWrite_Register>
void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
}

void nRF24L01P_Set_Receive_Timeout(uint16_t val){
  nRF24L01P->Config.RxTimeout=val;
 a42:	e0 91 60 01 	lds	r30, 0x0160
 a46:	f0 91 61 01 	lds	r31, 0x0161
 a4a:	80 e2       	ldi	r24, 0x20	; 32
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	96 83       	std	Z+6, r25	; 0x06
 a50:	85 83       	std	Z+5, r24	; 0x05
  nRF24L01P_ReadWrite_Register(0x0C,0,(uint8_t*)"PIPE2",5);
  nRF24L01P_ReadWrite_Register(0x0D,0,(uint8_t*)"PIPE3",5);
  nRF24L01P_ReadWrite_Register(0x0E,0,(uint8_t*)"PIPE4",5);
  nRF24L01P_ReadWrite_Register(0x0F,0,(uint8_t*)"PIPE5",5);
  nRF24L01P_Set_Receive_Timeout(32);
  nRF24L01P_Set_Mode_Sleep();
 a52:	0e 94 c7 02 	call	0x58e	; 0x58e <nRF24L01P_Set_Mode_Sleep>
}
 a56:	1f 91       	pop	r17
 a58:	0f 91       	pop	r16
 a5a:	08 95       	ret

00000a5c <nRF24L01P_Transmit_Basic>:

void nRF24L01P_Transmit_Basic(uint8_t *buf, uint8_t len){
 a5c:	ff 92       	push	r15
 a5e:	0f 93       	push	r16
 a60:	1f 93       	push	r17
 a62:	8c 01       	movw	r16, r24
 a64:	f6 2e       	mov	r15, r22
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
}

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 a66:	e0 91 60 01 	lds	r30, 0x0160
 a6a:	f0 91 61 01 	lds	r31, 0x0161
 a6e:	11 8a       	std	Z+17, r1	; 0x11
 a70:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 a72:	12 8a       	std	Z+18, r1	; 0x12
  nRF24L01P_Set_Mode_Sleep();
}

void nRF24L01P_Transmit_Basic(uint8_t *buf, uint8_t len){
  nRF24L01P_Error_Clear();
  nRF24L01P_Set_Mode_Tx();
 a74:	0e 94 db 02 	call	0x5b6	; 0x5b6 <nRF24L01P_Set_Mode_Tx>
  buf[nRF24L01P_PACKET_LEN-5]=nRF24L01P->Address.Own;
 a78:	e0 91 60 01 	lds	r30, 0x0160
 a7c:	f0 91 61 01 	lds	r31, 0x0161
 a80:	83 81       	ldd	r24, Z+3	; 0x03
 a82:	f8 01       	movw	r30, r16
 a84:	83 8f       	std	Z+27, r24	; 0x1b
  buf[nRF24L01P_PACKET_LEN-4]=nRF24L01P->Address.Dest;
 a86:	e0 91 60 01 	lds	r30, 0x0160
 a8a:	f0 91 61 01 	lds	r31, 0x0161
 a8e:	84 81       	ldd	r24, Z+4	; 0x04
 a90:	f8 01       	movw	r30, r16
 a92:	84 8f       	std	Z+28, r24	; 0x1c
  buf[nRF24L01P_PACKET_LEN-3]=len;
 a94:	f5 8e       	std	Z+29, r15	; 0x1d
  uint16_t temp=nRF24L01P_Calcuate_CRC_Block(buf, 30);
 a96:	c8 01       	movw	r24, r16
 a98:	6e e1       	ldi	r22, 0x1E	; 30
 a9a:	0e 94 cb 01 	call	0x396	; 0x396 <nRF24L01P_Calcuate_CRC_Block>
  buf[nRF24L01P_PACKET_LEN-2]=(temp & 0xFF00)>>8;
 a9e:	f8 01       	movw	r30, r16
 aa0:	96 8f       	std	Z+30, r25	; 0x1e
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
 aa2:	87 8f       	std	Z+31, r24	; 0x1f
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
 aa4:	c8 01       	movw	r24, r16
 aa6:	0e 94 2d 02 	call	0x45a	; 0x45a <nRF24L01P_Write_Data_To_Transmit_Buffer>
void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 aaa:	5f 9a       	sbi	0x0b, 7	; 11
  uint16_t temp=nRF24L01P_Calcuate_CRC_Block(buf, 30);
  buf[nRF24L01P_PACKET_LEN-2]=(temp & 0xFF00)>>8;
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
  nRF24L01P_CE_High();
  nRF24L01P_Wait_Till_Transmission_Completes();
 aac:	0e 94 59 02 	call	0x4b2	; 0x4b2 <nRF24L01P_Wait_Till_Transmission_Completes>
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 ab0:	5f 98       	cbi	0x0b, 7	; 11
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
  nRF24L01P_CE_High();
  nRF24L01P_Wait_Till_Transmission_Completes();
  nRF24L01P_CE_Low();
}
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	ff 90       	pop	r15
 ab8:	08 95       	ret

00000aba <nRF24L01P_Recieve_Basic>:


uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
 aba:	cf 92       	push	r12
 abc:	df 92       	push	r13
 abe:	ef 92       	push	r14
 ac0:	ff 92       	push	r15
 ac2:	0f 93       	push	r16
 ac4:	1f 93       	push	r17
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	7c 01       	movw	r14, r24
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
}

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 acc:	e0 91 60 01 	lds	r30, 0x0160
 ad0:	f0 91 61 01 	lds	r31, 0x0161
 ad4:	11 8a       	std	Z+17, r1	; 0x11
 ad6:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 ad8:	12 8a       	std	Z+18, r1	; 0x12


uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P_Error_Clear();
  nRF24L01P->Config.RxTicks=0;
 ada:	10 86       	std	Z+8, r1	; 0x08
 adc:	17 82       	std	Z+7, r1	; 0x07
  nRF24L01P_Set_Mode_Rx();
 ade:	0e 94 f5 02 	call	0x5ea	; 0x5ea <nRF24L01P_Set_Mode_Rx>
 ae2:	7c e2       	ldi	r23, 0x2C	; 44
 ae4:	c7 2e       	mov	r12, r23
 ae6:	71 e0       	ldi	r23, 0x01	; 1
 ae8:	d7 2e       	mov	r13, r23
 aea:	23 c0       	rjmp	.+70     	; 0xb32 <nRF24L01P_Recieve_Basic+0x78>
  while(nRF24L01P->Config.RxTicks < nRF24L01P->Config.RxTimeout){
    if(nRF24L01P_Receive_Buffer_Not_Empty()){
 aec:	0e 94 8d 02 	call	0x51a	; 0x51a <nRF24L01P_Receive_Buffer_Not_Empty>
 af0:	88 23       	and	r24, r24
 af2:	99 f0       	breq	.+38     	; 0xb1a <nRF24L01P_Recieve_Basic+0x60>
      nRF24L01P_Read_Data_From_Receive_Buffer(buf);
 af4:	c7 01       	movw	r24, r14
 af6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <nRF24L01P_Read_Data_From_Receive_Buffer>
	  uint16_t rec_crc=buf[nRF24L01P_PACKET_LEN-2];
	  rec_crc<<=8;
 afa:	f7 01       	movw	r30, r14
 afc:	d6 8d       	ldd	r29, Z+30	; 0x1e
 afe:	c0 e0       	ldi	r28, 0x00	; 0
	  rec_crc|=buf[nRF24L01P_PACKET_LEN-1];
 b00:	07 8d       	ldd	r16, Z+31	; 0x1f
 b02:	10 e0       	ldi	r17, 0x00	; 0
 b04:	0c 2b       	or	r16, r28
 b06:	1d 2b       	or	r17, r29
      uint16_t calc_crc=nRF24L01P_Calcuate_CRC_Block(buf, nRF24L01P_PACKET_LEN-2);
 b08:	c7 01       	movw	r24, r14
 b0a:	6e e1       	ldi	r22, 0x1E	; 30
 b0c:	0e 94 cb 01 	call	0x396	; 0x396 <nRF24L01P_Calcuate_CRC_Block>
      if(rec_crc == calc_crc){
 b10:	08 17       	cp	r16, r24
 b12:	19 07       	cpc	r17, r25
 b14:	11 f4       	brne	.+4      	; 0xb1a <nRF24L01P_Recieve_Basic+0x60>
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	18 c0       	rjmp	.+48     	; 0xb4a <nRF24L01P_Recieve_Basic+0x90>
 b1a:	c6 01       	movw	r24, r12
 b1c:	01 97       	sbiw	r24, 0x01	; 1
 b1e:	f1 f7       	brne	.-4      	; 0xb1c <nRF24L01P_Recieve_Basic+0x62>
		sts=1;
		break;
	  }
    }
    _delay_us(100);
    nRF24L01P->Config.RxTicks++;
 b20:	e0 91 60 01 	lds	r30, 0x0160
 b24:	f0 91 61 01 	lds	r31, 0x0161
 b28:	87 81       	ldd	r24, Z+7	; 0x07
 b2a:	90 85       	ldd	r25, Z+8	; 0x08
 b2c:	01 96       	adiw	r24, 0x01	; 1
 b2e:	90 87       	std	Z+8, r25	; 0x08
 b30:	87 83       	std	Z+7, r24	; 0x07
uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P_Error_Clear();
  nRF24L01P->Config.RxTicks=0;
  nRF24L01P_Set_Mode_Rx();
  while(nRF24L01P->Config.RxTicks < nRF24L01P->Config.RxTimeout){
 b32:	e0 91 60 01 	lds	r30, 0x0160
 b36:	f0 91 61 01 	lds	r31, 0x0161
 b3a:	27 81       	ldd	r18, Z+7	; 0x07
 b3c:	30 85       	ldd	r19, Z+8	; 0x08
 b3e:	85 81       	ldd	r24, Z+5	; 0x05
 b40:	96 81       	ldd	r25, Z+6	; 0x06
 b42:	28 17       	cp	r18, r24
 b44:	39 07       	cpc	r19, r25
 b46:	90 f2       	brcs	.-92     	; 0xaec <nRF24L01P_Recieve_Basic+0x32>
 b48:	80 e0       	ldi	r24, 0x00	; 0
    }
    _delay_us(100);
    nRF24L01P->Config.RxTicks++;
  }
  return sts;
}
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	1f 91       	pop	r17
 b50:	0f 91       	pop	r16
 b52:	ff 90       	pop	r15
 b54:	ef 90       	pop	r14
 b56:	df 90       	pop	r13
 b58:	cf 90       	pop	r12
 b5a:	08 95       	ret

00000b5c <nRF24L01P_Transmit_With_ACK>:

uint8_t nRF24L01P_Transmit_With_ACK(uint8_t *buf, uint8_t len){
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	ec 01       	movw	r28, r24
  uint8_t sts=0;
  if(nRF24L01P->Packet.ACKReq){
 b62:	e0 91 60 01 	lds	r30, 0x0160
 b66:	f0 91 61 01 	lds	r31, 0x0161
 b6a:	87 85       	ldd	r24, Z+15	; 0x0f
 b6c:	88 23       	and	r24, r24
 b6e:	19 f0       	breq	.+6      	; 0xb76 <nRF24L01P_Transmit_With_ACK+0x1a>
    buf[nRF24L01P_PACKET_LEN-6]=1;
 b70:	81 e0       	ldi	r24, 0x01	; 1
 b72:	8a 8f       	std	Y+26, r24	; 0x1a
 b74:	01 c0       	rjmp	.+2      	; 0xb78 <nRF24L01P_Transmit_With_ACK+0x1c>
  }else{
    buf[nRF24L01P_PACKET_LEN-6]=0;
 b76:	1a 8e       	std	Y+26, r1	; 0x1a
  }
  nRF24L01P_Transmit_Basic(buf, len);
 b78:	ce 01       	movw	r24, r28
 b7a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <nRF24L01P_Transmit_Basic>
  if(nRF24L01P_Recieve_Basic(buf)){
 b7e:	ce 01       	movw	r24, r28
 b80:	0e 94 5d 05 	call	0xaba	; 0xaba <nRF24L01P_Recieve_Basic>
 b84:	81 11       	cpse	r24, r1
 b86:	81 e0       	ldi	r24, 0x01	; 1
    //if( (nRF24L01P->Address.Own == buf[28])){
      sts=1;
    //}
  }
  return sts;
}
 b88:	df 91       	pop	r29
 b8a:	cf 91       	pop	r28
 b8c:	08 95       	ret

00000b8e <nRF24L01P_Recieve_With_ACK>:


uint8_t nRF24L01P_Recieve_With_ACK(uint8_t *buf){
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	ec 01       	movw	r28, r24
  uint8_t sts=0;
  if(nRF24L01P_Recieve_Basic(buf)){
 b94:	0e 94 5d 05 	call	0xaba	; 0xaba <nRF24L01P_Recieve_Basic>
 b98:	88 23       	and	r24, r24
 b9a:	b9 f0       	breq	.+46     	; 0xbca <nRF24L01P_Recieve_With_ACK+0x3c>
    if((buf[nRF24L01P_PACKET_LEN-6]==1) && (nRF24L01P->Address.Own == buf[nRF24L01P_PACKET_LEN-4])){
 b9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
 b9e:	81 30       	cpi	r24, 0x01	; 1
 ba0:	a1 f4       	brne	.+40     	; 0xbca <nRF24L01P_Recieve_With_ACK+0x3c>
 ba2:	e0 91 60 01 	lds	r30, 0x0160
 ba6:	f0 91 61 01 	lds	r31, 0x0161
 baa:	93 81       	ldd	r25, Z+3	; 0x03
 bac:	8c 8d       	ldd	r24, Y+28	; 0x1c
 bae:	98 17       	cp	r25, r24
 bb0:	61 f4       	brne	.+24     	; 0xbca <nRF24L01P_Recieve_With_ACK+0x3c>
 bb2:	8c ed       	ldi	r24, 0xDC	; 220
 bb4:	95 e0       	ldi	r25, 0x05	; 5
 bb6:	01 97       	sbiw	r24, 0x01	; 1
 bb8:	f1 f7       	brne	.-4      	; 0xbb6 <nRF24L01P_Recieve_With_ACK+0x28>
void nRF24L01P_Set_Own_Address(uint8_t addr){
  nRF24L01P->Address.Own=addr;
}

void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
 bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
 bbc:	84 83       	std	Z+4, r24	; 0x04
  uint8_t sts=0;
  if(nRF24L01P_Recieve_Basic(buf)){
    if((buf[nRF24L01P_PACKET_LEN-6]==1) && (nRF24L01P->Address.Own == buf[nRF24L01P_PACKET_LEN-4])){
      _delay_us(500);
	  nRF24L01P_Set_Destination_Address(buf[nRF24L01P_PACKET_LEN-5]);
      nRF24L01P_Transmit_Basic(buf, 2);
 bbe:	ce 01       	movw	r24, r28
 bc0:	62 e0       	ldi	r22, 0x02	; 2
 bc2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <nRF24L01P_Transmit_Basic>
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	01 c0       	rjmp	.+2      	; 0xbcc <nRF24L01P_Recieve_With_ACK+0x3e>
 bca:	80 e0       	ldi	r24, 0x00	; 0
      sts=1;
    }
  }
  return sts;
}
 bcc:	df 91       	pop	r29
 bce:	cf 91       	pop	r28
 bd0:	08 95       	ret

00000bd2 <_exit>:
 bd2:	f8 94       	cli

00000bd4 <__stop_program>:
 bd4:	ff cf       	rjmp	.-2      	; 0xbd4 <__stop_program>
