
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000aae  00000b42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800144  00800144  00000b86  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000639  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e6d  00000000  00000000  0000121f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c0  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cf5  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000390  00000000  00000000  00003244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000072f  00000000  00000000  000035d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000516  00000000  00000000  00003d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00004219  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

uint32_t last_val=0;
uint8_t  state=0;


int main(void){
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	a0 97       	sbiw	r28, 0x20	; 32
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61

  DDRD  |= (1<<4);
  c4:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  c6:	5c 98       	cbi	0x0b, 4	; 11
  
  DDRD&=~((1<<3)|(1<<2));
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	83 7f       	andi	r24, 0xF3	; 243
  cc:	8a b9       	out	0x0a, r24	; 10
  PORTD|=(1<<3)|(1<<2);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	8b b9       	out	0x0b, r24	; 11
  
  nRF24L01P_Init();
  d4:	0e 94 ca 03 	call	0x794	; 0x794 <nRF24L01P_Init>
  Sleep_Init();
  d8:	0e 94 c9 00 	call	0x192	; 0x192 <Sleep_Init>
  dc:	00 e0       	ldi	r16, 0x00	; 0
  de:	10 e0       	ldi	r17, 0x00	; 0
  
  for(uint16_t i=0;i<5000;i++){
    uint8_t buf[32];
	nRF24L01P_WakeUp();
    nRF24L01P_Transmit_Basic(buf,10);
  e0:	7e 01       	movw	r14, r28
  e2:	08 94       	sec
  e4:	e1 1c       	adc	r14, r1
  e6:	f1 1c       	adc	r15, r1
  nRF24L01P_Init();
  Sleep_Init();
  
  for(uint16_t i=0;i<5000;i++){
    uint8_t buf[32];
	nRF24L01P_WakeUp();
  e8:	0e 94 be 03 	call	0x77c	; 0x77c <nRF24L01P_WakeUp>
    nRF24L01P_Transmit_Basic(buf,10);
  ec:	c7 01       	movw	r24, r14
  ee:	6a e0       	ldi	r22, 0x0A	; 10
  f0:	0e 94 a4 04 	call	0x948	; 0x948 <nRF24L01P_Transmit_Basic>
	nRF24L01P_Deep_Sleep();
  f4:	0e 94 b2 03 	call	0x764	; 0x764 <nRF24L01P_Deep_Sleep>
  PORTD|=(1<<3)|(1<<2);
  
  nRF24L01P_Init();
  Sleep_Init();
  
  for(uint16_t i=0;i<5000;i++){
  f8:	0f 5f       	subi	r16, 0xFF	; 255
  fa:	1f 4f       	sbci	r17, 0xFF	; 255
  fc:	83 e1       	ldi	r24, 0x13	; 19
  fe:	08 38       	cpi	r16, 0x88	; 136
 100:	18 07       	cpc	r17, r24
 102:	91 f7       	brne	.-28     	; 0xe8 <main+0x42>
    nRF24L01P_Transmit_Basic(buf,10);
	nRF24L01P_Deep_Sleep();
  }
  while(1){
      
	    uint8_t buf[32]="Bello world\r\n";
 104:	8e 01       	movw	r16, r28
 106:	0f 5f       	subi	r16, 0xFF	; 255
 108:	1f 4f       	sbci	r17, 0xFF	; 255
 10a:	92 e1       	ldi	r25, 0x12	; 18
 10c:	d9 2e       	mov	r13, r25
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	e8 2e       	mov	r14, r24
 112:	f1 2c       	mov	r15, r1
 114:	ec 0e       	add	r14, r28
 116:	fd 1e       	adc	r15, r29
 118:	d8 01       	movw	r26, r16
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	8e e0       	ldi	r24, 0x0E	; 14
 120:	01 90       	ld	r0, Z+
 122:	0d 92       	st	X+, r0
 124:	81 50       	subi	r24, 0x01	; 1
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x7a>
 128:	f7 01       	movw	r30, r14
 12a:	8d 2d       	mov	r24, r13
 12c:	11 92       	st	Z+, r1
 12e:	8a 95       	dec	r24
 130:	e9 f7       	brne	.-6      	; 0x12c <main+0x86>
	    PORTD |=(1<<4);
 132:	5c 9a       	sbi	0x0b, 4	; 11
	    nRF24L01P_WakeUp();
 134:	0e 94 be 03 	call	0x77c	; 0x77c <nRF24L01P_WakeUp>
	    nRF24L01P_Transmit_Basic(buf,13);
 138:	c8 01       	movw	r24, r16
 13a:	6d e0       	ldi	r22, 0x0D	; 13
 13c:	0e 94 a4 04 	call	0x948	; 0x948 <nRF24L01P_Transmit_Basic>
	    nRF24L01P_Deep_Sleep();
 140:	0e 94 b2 03 	call	0x764	; 0x764 <nRF24L01P_Deep_Sleep>
	    PORTD &=~(1<<4);
 144:	5c 98       	cbi	0x0b, 4	; 11
	    Deep_Sleep();
 146:	0e 94 a6 00 	call	0x14c	; 0x14c <Deep_Sleep>
 14a:	e6 cf       	rjmp	.-52     	; 0x118 <main+0x72>

0000014c <Deep_Sleep>:
#include <avr/sleep.h>

volatile uint32_t WDT_Ticks=0;

void Deep_Sleep(void){
  sleep_enable();
 14c:	83 b7       	in	r24, 0x33	; 51
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
 152:	85 b7       	in	r24, 0x35	; 53
 154:	80 66       	ori	r24, 0x60	; 96
 156:	85 bf       	out	0x35, r24	; 53
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	85 bf       	out	0x35, r24	; 53
  sei();
 15c:	78 94       	sei
  sleep_cpu();
 15e:	88 95       	sleep
  sleep_disable();
 160:	83 b7       	in	r24, 0x33	; 51
 162:	8e 7f       	andi	r24, 0xFE	; 254
 164:	83 bf       	out	0x33, r24	; 51
}
 166:	08 95       	ret

00000168 <ADC_Disable>:

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
 168:	ea e7       	ldi	r30, 0x7A	; 122
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 77       	andi	r24, 0x7F	; 127
 170:	80 83       	st	Z, r24
}
 172:	08 95       	ret

00000174 <Analog_Comparator_Disable>:

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
 174:	80 b7       	in	r24, 0x30	; 48
 176:	8f 77       	andi	r24, 0x7F	; 127
 178:	80 bf       	out	0x30, r24	; 48
}
 17a:	08 95       	ret

0000017c <WDT_Get_Ticks>:

uint32_t WDT_Get_Ticks(void){
  return WDT_Ticks;
 17c:	20 91 49 01 	lds	r18, 0x0149
 180:	30 91 4a 01 	lds	r19, 0x014A
 184:	40 91 4b 01 	lds	r20, 0x014B
 188:	50 91 4c 01 	lds	r21, 0x014C
}
 18c:	b9 01       	movw	r22, r18
 18e:	ca 01       	movw	r24, r20
 190:	08 95       	ret

00000192 <Sleep_Init>:


void Sleep_Init(void){
  cli();
 192:	f8 94       	cli
  WDTCSR=(1<<WDCE)|(1<<WDE);
 194:	e0 e6       	ldi	r30, 0x60	; 96
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	80 83       	st	Z, r24
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
 19c:	86 e4       	ldi	r24, 0x46	; 70
 19e:	80 83       	st	Z, r24
  sei();
 1a0:	78 94       	sei
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 1a2:	83 b7       	in	r24, 0x33	; 51
 1a4:	81 7f       	andi	r24, 0xF1	; 241
 1a6:	84 60       	ori	r24, 0x04	; 4
 1a8:	83 bf       	out	0x33, r24	; 51
  sleep_cpu();
  sleep_disable();
}

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8f 77       	andi	r24, 0x7F	; 127
 1b2:	80 83       	st	Z, r24
}

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
 1b4:	80 b7       	in	r24, 0x30	; 48
 1b6:	8f 77       	andi	r24, 0x7F	; 127
 1b8:	80 bf       	out	0x30, r24	; 48
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
  sei();
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ADC_Disable();
  Analog_Comparator_Disable();
}
 1ba:	08 95       	ret

000001bc <__vector_6>:

ISR(WDT_vect){
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
  WDTCSR|=(1<<WDIE);
 1d2:	e0 e6       	ldi	r30, 0x60	; 96
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	80 83       	st	Z, r24
  WDT_Ticks++;
 1dc:	80 91 49 01 	lds	r24, 0x0149
 1e0:	90 91 4a 01 	lds	r25, 0x014A
 1e4:	a0 91 4b 01 	lds	r26, 0x014B
 1e8:	b0 91 4c 01 	lds	r27, 0x014C
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	a1 1d       	adc	r26, r1
 1f0:	b1 1d       	adc	r27, r1
 1f2:	80 93 49 01 	sts	0x0149, r24
 1f6:	90 93 4a 01 	sts	0x014A, r25
 1fa:	a0 93 4b 01 	sts	0x014B, r26
 1fe:	b0 93 4c 01 	sts	0x014C, r27
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <nRF24L01P_Struct_Init>:

nrf24l01p_t nRF24L01P_type;
nrf24l01p_t *nRF24L01P;

void nRF24L01P_Struct_Init(void){
  nRF24L01P=&nRF24L01P_type;
 218:	8d e4       	ldi	r24, 0x4D	; 77
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	90 93 61 01 	sts	0x0161, r25
 220:	80 93 60 01 	sts	0x0160, r24
  nRF24L01P->Mode=0x00;
 224:	10 92 4d 01 	sts	0x014D, r1
  nRF24L01P->TempBuf[0]=0x00;
 228:	10 92 4e 01 	sts	0x014E, r1
  nRF24L01P->TempBuf[1]=0x00;
 22c:	10 92 4f 01 	sts	0x014F, r1
  nRF24L01P->Address.Own=0x00;
 230:	10 92 50 01 	sts	0x0150, r1
  nRF24L01P->Address.Dest=0x01;
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	20 93 51 01 	sts	0x0151, r18
  nRF24L01P->Config.RxTimeout=10;
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 53 01 	sts	0x0153, r25
 242:	80 93 52 01 	sts	0x0152, r24
  nRF24L01P->Config.RxTicks=0;
 246:	10 92 55 01 	sts	0x0155, r1
 24a:	10 92 54 01 	sts	0x0154, r1
  nRF24L01P->Config.MaxDataLength=0;
 24e:	10 92 56 01 	sts	0x0156, r1
  nRF24L01P->Config.MaxRetry=0;
 252:	10 92 58 01 	sts	0x0158, r1
 256:	10 92 57 01 	sts	0x0157, r1
  nRF24L01P->Config.RetryOccured=0;
 25a:	10 92 5a 01 	sts	0x015A, r1
 25e:	10 92 59 01 	sts	0x0159, r1
  nRF24L01P->Packet.PID=0;
 262:	10 92 5b 01 	sts	0x015B, r1
  nRF24L01P->Packet.ACKReq=1;
 266:	20 93 5c 01 	sts	0x015C, r18
  nRF24L01P->ErrorTicks=0;
 26a:	10 92 5e 01 	sts	0x015E, r1
 26e:	10 92 5d 01 	sts	0x015D, r1
  nRF24L01P->Error=0;
 272:	10 92 5f 01 	sts	0x015F, r1
}
 276:	08 95       	ret

00000278 <nRF24L01P_CSN_High>:

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 278:	28 9a       	sbi	0x05, 0	; 5
}
 27a:	08 95       	ret

0000027c <nRF24L01P_CSN_Low>:

void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
 27c:	28 98       	cbi	0x05, 0	; 5
}
 27e:	08 95       	ret

00000280 <nRF24L01P_CE_High>:

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 280:	5f 9a       	sbi	0x0b, 7	; 11
}
 282:	08 95       	ret

00000284 <nRF24L01P_CE_Low>:

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 284:	5f 98       	cbi	0x0b, 7	; 11
}
 286:	08 95       	ret

00000288 <nRF24L01P_Enable_GPIO>:

void nRF24L01P_Enable_GPIO(void){
  DDRB |= (1<<5)|(1<<3)|(1<<2);
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	8c 62       	ori	r24, 0x2C	; 44
 28c:	84 b9       	out	0x04, r24	; 4
  DDRB &=~(1<<4);
 28e:	24 98       	cbi	0x04, 4	; 4
  nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
 290:	20 9a       	sbi	0x04, 0	; 4
  nRF24L01P_CE_DDR  |= (1<<nRF24L01P_CE_bp) ;
 292:	57 9a       	sbi	0x0a, 7	; 10
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 294:	28 9a       	sbi	0x05, 0	; 5
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 296:	5f 98       	cbi	0x0b, 7	; 11
  DDRB &=~(1<<4);
  nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
  nRF24L01P_CE_DDR  |= (1<<nRF24L01P_CE_bp) ;
  nRF24L01P_CSN_High();
  nRF24L01P_CE_Low()  ;
}
 298:	08 95       	ret

0000029a <nRF24L01P_Disable_GPIO>:

void nRF24L01P_Disable_GPIO(void){
  DDRB |= (1<<4);                              
 29a:	24 9a       	sbi	0x04, 4	; 4
  PORTB&=~((1<<5)|(1<<4)|(1<<3)|(1<<2));
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	83 7c       	andi	r24, 0xC3	; 195
 2a0:	85 b9       	out	0x05, r24	; 5
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 2a2:	28 9a       	sbi	0x05, 0	; 5
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 2a4:	5f 98       	cbi	0x0b, 7	; 11
void nRF24L01P_Disable_GPIO(void){
  DDRB |= (1<<4);                              
  PORTB&=~((1<<5)|(1<<4)|(1<<3)|(1<<2));
  nRF24L01P_CSN_High(); 
  nRF24L01P_CE_Low() ;  
}
 2a6:	08 95       	ret

000002a8 <nRF24L01P_Enable_SPI>:

void nRF24L01P_Enable_SPI(void){
  SPCR=(1<<SPE)|(1<<MSTR);                     
 2a8:	80 e5       	ldi	r24, 0x50	; 80
 2aa:	8c bd       	out	0x2c, r24	; 44
  SPSR=(1<<SPI2X);                             
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	8d bd       	out	0x2d, r24	; 45
}
 2b0:	08 95       	ret

000002b2 <nRF24L01P_Disable_SPI>:

void nRF24L01P_Disable_SPI(void){                 
  SPCR=0x00;
 2b2:	1c bc       	out	0x2c, r1	; 44
  SPSR=0x00;
 2b4:	1d bc       	out	0x2d, r1	; 45
}
 2b6:	08 95       	ret

000002b8 <nRF24L01P_Enable>:

void nRF24L01P_Enable(void){
  nRF24L01P_Enable_GPIO();
 2b8:	0e 94 44 01 	call	0x288	; 0x288 <nRF24L01P_Enable_GPIO>
  nRF24L01P_CSN_High(); 
  nRF24L01P_CE_Low() ;  
}

void nRF24L01P_Enable_SPI(void){
  SPCR=(1<<SPE)|(1<<MSTR);                     
 2bc:	80 e5       	ldi	r24, 0x50	; 80
 2be:	8c bd       	out	0x2c, r24	; 44
  SPSR=(1<<SPI2X);                             
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	8d bd       	out	0x2d, r24	; 45
}

void nRF24L01P_Enable(void){
  nRF24L01P_Enable_GPIO();
  nRF24L01P_Enable_SPI();
}
 2c4:	08 95       	ret

000002c6 <nRF24L01P_Disable>:
  SPCR=(1<<SPE)|(1<<MSTR);                     
  SPSR=(1<<SPI2X);                             
}

void nRF24L01P_Disable_SPI(void){                 
  SPCR=0x00;
 2c6:	1c bc       	out	0x2c, r1	; 44
  SPSR=0x00;
 2c8:	1d bc       	out	0x2d, r1	; 45
  nRF24L01P_Enable_SPI();
}

void nRF24L01P_Disable(void){
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
 2ca:	0e 94 4d 01 	call	0x29a	; 0x29a <nRF24L01P_Disable_GPIO>
}
 2ce:	08 95       	ret

000002d0 <nRF24L01P_Error_Clear>:

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 2d0:	e0 91 60 01 	lds	r30, 0x0160
 2d4:	f0 91 61 01 	lds	r31, 0x0161
 2d8:	11 8a       	std	Z+17, r1	; 0x11
 2da:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 2dc:	12 8a       	std	Z+18, r1	; 0x12
}
 2de:	08 95       	ret

000002e0 <nRF24L01P_Get_Error>:

uint8_t nRF24L01P_Get_Error(void){
 2e0:	e0 91 60 01 	lds	r30, 0x0160
 2e4:	f0 91 61 01 	lds	r31, 0x0161
  return nRF24L01P->Error;
}
 2e8:	82 89       	ldd	r24, Z+18	; 0x12
 2ea:	08 95       	ret

000002ec <nRF24L01P_Error_Timeout>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	8a 95       	dec	r24
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <nRF24L01P_Error_Timeout+0x2>

uint8_t nRF24L01P_Error_Timeout(void){
  _delay_us(1);
  nRF24L01P->ErrorTicks++;
 2f2:	e0 91 60 01 	lds	r30, 0x0160
 2f6:	f0 91 61 01 	lds	r31, 0x0161
 2fa:	80 89       	ldd	r24, Z+16	; 0x10
 2fc:	91 89       	ldd	r25, Z+17	; 0x11
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	91 8b       	std	Z+17, r25	; 0x11
 302:	80 8b       	std	Z+16, r24	; 0x10
  if(nRF24L01P->ErrorTicks>1000){
 304:	89 5e       	subi	r24, 0xE9	; 233
 306:	93 40       	sbci	r25, 0x03	; 3
 308:	20 f0       	brcs	.+8      	; 0x312 <nRF24L01P_Error_Timeout+0x26>
    nRF24L01P->ErrorTicks=0;
 30a:	11 8a       	std	Z+17, r1	; 0x11
 30c:	10 8a       	std	Z+16, r1	; 0x10
    nRF24L01P->Error=0x10;
 30e:	80 e1       	ldi	r24, 0x10	; 16
 310:	82 8b       	std	Z+18, r24	; 0x12
  }
  return nRF24L01P->Error;
}
 312:	82 89       	ldd	r24, Z+18	; 0x12
 314:	08 95       	ret

00000316 <nRF24L01P_SPI_Transfer>:

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
 316:	98 2f       	mov	r25, r24
  uint8_t sts=0;
  if(nRF24L01P->Error==0){
 318:	e0 91 60 01 	lds	r30, 0x0160
 31c:	f0 91 61 01 	lds	r31, 0x0161
 320:	82 89       	ldd	r24, Z+18	; 0x12
 322:	88 23       	and	r24, r24
 324:	a9 f4       	brne	.+42     	; 0x350 <nRF24L01P_SPI_Transfer+0x3a>
    SPDR = data;
 326:	9e bd       	out	0x2e, r25	; 46
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
}

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 328:	11 8a       	std	Z+17, r1	; 0x11
 32a:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 32c:	12 8a       	std	Z+18, r1	; 0x12
 32e:	04 c0       	rjmp	.+8      	; 0x338 <nRF24L01P_SPI_Transfer+0x22>
  uint8_t sts=0;
  if(nRF24L01P->Error==0){
    SPDR = data;
    nRF24L01P_Error_Clear();
    while(!(SPSR & (1 << SPIF))){
      if(nRF24L01P_Error_Timeout()){
 330:	0e 94 76 01 	call	0x2ec	; 0x2ec <nRF24L01P_Error_Timeout>
 334:	88 23       	and	r24, r24
 336:	19 f4       	brne	.+6      	; 0x33e <nRF24L01P_SPI_Transfer+0x28>
uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  uint8_t sts=0;
  if(nRF24L01P->Error==0){
    SPDR = data;
    nRF24L01P_Error_Clear();
    while(!(SPSR & (1 << SPIF))){
 338:	0d b4       	in	r0, 0x2d	; 45
 33a:	07 fe       	sbrs	r0, 7
 33c:	f9 cf       	rjmp	.-14     	; 0x330 <nRF24L01P_SPI_Transfer+0x1a>
      if(nRF24L01P_Error_Timeout()){
	    sts=0;
	    break;
	  }
    }
    if(nRF24L01P->Error==0){
 33e:	e0 91 60 01 	lds	r30, 0x0160
 342:	f0 91 61 01 	lds	r31, 0x0161
 346:	82 89       	ldd	r24, Z+18	; 0x12
 348:	88 23       	and	r24, r24
 34a:	11 f4       	brne	.+4      	; 0x350 <nRF24L01P_SPI_Transfer+0x3a>
      sts=SPDR;
 34c:	8e b5       	in	r24, 0x2e	; 46
 34e:	08 95       	ret
 350:	80 e0       	ldi	r24, 0x00	; 0
    }
  }else{
    sts=0;
  }
  return sts;
}
 352:	08 95       	ret

00000354 <nRF24L01P_Calcuate_CRC>:

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
 354:	36 2f       	mov	r19, r22
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	28 27       	eor	r18, r24
 35a:	39 27       	eor	r19, r25
 35c:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
	  crc=(crc<<1)^0x1021;
 35e:	61 e2       	ldi	r22, 0x21	; 33
 360:	70 e1       	ldi	r23, 0x10	; 16
 362:	c9 01       	movw	r24, r18
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
}

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
 368:	37 ff       	sbrs	r19, 7
 36a:	04 c0       	rjmp	.+8      	; 0x374 <nRF24L01P_Calcuate_CRC+0x20>
	  crc=(crc<<1)^0x1021;
 36c:	9c 01       	movw	r18, r24
 36e:	26 27       	eor	r18, r22
 370:	37 27       	eor	r19, r23
 372:	01 c0       	rjmp	.+2      	; 0x376 <nRF24L01P_Calcuate_CRC+0x22>
	}
    else{
	  crc<<=1;
 374:	9c 01       	movw	r18, r24
  return sts;
}

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
 376:	4f 5f       	subi	r20, 0xFF	; 255
 378:	48 30       	cpi	r20, 0x08	; 8
 37a:	99 f7       	brne	.-26     	; 0x362 <nRF24L01P_Calcuate_CRC+0xe>
    else{
	  crc<<=1;
	}
  }
  return crc;
}
 37c:	c9 01       	movw	r24, r18
 37e:	08 95       	ret

00000380 <nRF24L01P_Calcuate_CRC_Block>:

uint16_t nRF24L01P_Calcuate_CRC_Block(uint8_t *buf, uint8_t len){
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	06 2f       	mov	r16, r22
 38a:	ec 01       	movw	r28, r24
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	10 e0       	ldi	r17, 0x00	; 0
 392:	06 c0       	rjmp	.+12     	; 0x3a0 <nRF24L01P_Calcuate_CRC_Block+0x20>
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
    crc=nRF24L01P_Calcuate_CRC(crc,buf[i]);
 394:	c9 01       	movw	r24, r18
 396:	69 91       	ld	r22, Y+
 398:	0e 94 aa 01 	call	0x354	; 0x354 <nRF24L01P_Calcuate_CRC>
 39c:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t nRF24L01P_Calcuate_CRC_Block(uint8_t *buf, uint8_t len){
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
 39e:	1f 5f       	subi	r17, 0xFF	; 255
 3a0:	10 17       	cp	r17, r16
 3a2:	c0 f3       	brcs	.-16     	; 0x394 <nRF24L01P_Calcuate_CRC_Block+0x14>
    crc=nRF24L01P_Calcuate_CRC(crc,buf[i]);
  }
  return crc;
}
 3a4:	c9 01       	movw	r24, r18
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <nRF24L01P_ReadWrite_Register>:


void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	14 2f       	mov	r17, r20
 3bc:	05 2f       	mov	r16, r21
 3be:	f2 2e       	mov	r15, r18
void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
 3c0:	28 98       	cbi	0x05, 0	; 5
}


void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
  nRF24L01P_CSN_Low();
  if(rw==0){
 3c2:	66 23       	and	r22, r22
 3c4:	81 f4       	brne	.+32     	; 0x3e6 <nRF24L01P_ReadWrite_Register+0x36>
    reg|=0x20;
	nRF24L01P_SPI_Transfer(reg);
 3c6:	80 62       	ori	r24, 0x20	; 32
 3c8:	0e 94 8b 01 	call	0x316	; 0x316 <nRF24L01P_SPI_Transfer>
 3cc:	81 2f       	mov	r24, r17
 3ce:	90 2f       	mov	r25, r16
 3d0:	9c 01       	movw	r18, r24
 3d2:	e9 01       	movw	r28, r18
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <nRF24L01P_ReadWrite_Register+0x30>
	for(uint8_t i=0;i<len;i++){
	  nRF24L01P_SPI_Transfer(data[i]);
 3d8:	89 91       	ld	r24, Y+
 3da:	0e 94 8b 01 	call	0x316	; 0x316 <nRF24L01P_SPI_Transfer>
void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
  nRF24L01P_CSN_Low();
  if(rw==0){
    reg|=0x20;
	nRF24L01P_SPI_Transfer(reg);
	for(uint8_t i=0;i<len;i++){
 3de:	1f 5f       	subi	r17, 0xFF	; 255
 3e0:	1f 15       	cp	r17, r15
 3e2:	d0 f3       	brcs	.-12     	; 0x3d8 <nRF24L01P_ReadWrite_Register+0x28>
 3e4:	0f c0       	rjmp	.+30     	; 0x404 <nRF24L01P_ReadWrite_Register+0x54>
	  nRF24L01P_SPI_Transfer(data[i]);
	}
  }else{
    nRF24L01P_SPI_Transfer(reg);
 3e6:	0e 94 8b 01 	call	0x316	; 0x316 <nRF24L01P_SPI_Transfer>
 3ea:	81 2f       	mov	r24, r17
 3ec:	90 2f       	mov	r25, r16
 3ee:	9c 01       	movw	r18, r24
 3f0:	e9 01       	movw	r28, r18
 3f2:	10 e0       	ldi	r17, 0x00	; 0
 3f4:	05 c0       	rjmp	.+10     	; 0x400 <nRF24L01P_ReadWrite_Register+0x50>
    for(uint8_t i=0;i<len;i++){
      data[i]=nRF24L01P_SPI_Transfer(0xFF);
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	0e 94 8b 01 	call	0x316	; 0x316 <nRF24L01P_SPI_Transfer>
 3fc:	89 93       	st	Y+, r24
	for(uint8_t i=0;i<len;i++){
	  nRF24L01P_SPI_Transfer(data[i]);
	}
  }else{
    nRF24L01P_SPI_Transfer(reg);
    for(uint8_t i=0;i<len;i++){
 3fe:	1f 5f       	subi	r17, 0xFF	; 255
 400:	1f 15       	cp	r17, r15
 402:	c8 f3       	brcs	.-14     	; 0x3f6 <nRF24L01P_ReadWrite_Register+0x46>
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 404:	28 9a       	sbi	0x05, 0	; 5
    for(uint8_t i=0;i<len;i++){
      data[i]=nRF24L01P_SPI_Transfer(0xFF);
    }
  }
  nRF24L01P_CSN_High();
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	ff 90       	pop	r15
 410:	08 95       	ret

00000412 <nRF24L01P_Flush_Transmit_Buffer>:

void nRF24L01P_Flush_Transmit_Buffer(void){
  nRF24L01P_ReadWrite_Register(0xE1,0,nRF24L01P->TempBuf,0);
 412:	40 91 60 01 	lds	r20, 0x0160
 416:	50 91 61 01 	lds	r21, 0x0161
 41a:	4f 5f       	subi	r20, 0xFF	; 255
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	81 ee       	ldi	r24, 0xE1	; 225
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
}
 428:	08 95       	ret

0000042a <nRF24L01P_Write_Data_To_Transmit_Buffer>:

void nRF24L01P_Write_Data_To_Transmit_Buffer(uint8_t *data){
 42a:	ac 01       	movw	r20, r24
  nRF24L01P_ReadWrite_Register(0xA0,0,data,32);
 42c:	80 ea       	ldi	r24, 0xA0	; 160
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	20 e2       	ldi	r18, 0x20	; 32
 432:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
}
 436:	08 95       	ret

00000438 <nRF24L01P_Transmit_Buffer_Empty>:

uint8_t nRF24L01P_Transmit_Buffer_Empty(void){
  nRF24L01P->TempBuf[0]=0;
 438:	e0 91 60 01 	lds	r30, 0x0160
 43c:	f0 91 61 01 	lds	r31, 0x0161
 440:	11 82       	std	Z+1, r1	; 0x01
  nRF24L01P_ReadWrite_Register(0x17,1,nRF24L01P->TempBuf,1);
 442:	31 96       	adiw	r30, 0x01	; 1
 444:	87 e1       	ldi	r24, 0x17	; 23
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	af 01       	movw	r20, r30
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
 450:	e0 91 60 01 	lds	r30, 0x0160
 454:	f0 91 61 01 	lds	r31, 0x0161
 458:	81 81       	ldd	r24, Z+1	; 0x01
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	64 e0       	ldi	r22, 0x04	; 4
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	6a 95       	dec	r22
 464:	e1 f7       	brne	.-8      	; 0x45e <nRF24L01P_Transmit_Buffer_Empty+0x26>
  if(nRF24L01P->TempBuf[0] & (1<<4)){
    return 1;
  }else{
    return 0;
  }
}
 466:	81 70       	andi	r24, 0x01	; 1
 468:	08 95       	ret

0000046a <nRF24L01P_Wait_Till_Transmission_Completes>:

void nRF24L01P_Wait_Till_Transmission_Completes(void){
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 46e:	cc e2       	ldi	r28, 0x2C	; 44
 470:	d1 e0       	ldi	r29, 0x01	; 1
 472:	03 c0       	rjmp	.+6      	; 0x47a <nRF24L01P_Wait_Till_Transmission_Completes+0x10>
 474:	ce 01       	movw	r24, r28
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <nRF24L01P_Wait_Till_Transmission_Completes+0xc>
  while(!nRF24L01P_Transmit_Buffer_Empty()){
 47a:	0e 94 1c 02 	call	0x438	; 0x438 <nRF24L01P_Transmit_Buffer_Empty>
 47e:	88 23       	and	r24, r24
 480:	c9 f3       	breq	.-14     	; 0x474 <nRF24L01P_Wait_Till_Transmission_Completes+0xa>
    _delay_us(100);
  }
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <nRF24L01P_Flush_Receive_Buffer>:

void nRF24L01P_Flush_Receive_Buffer(void){
  nRF24L01P_ReadWrite_Register(0xE2,0,nRF24L01P->TempBuf,0);
 488:	40 91 60 01 	lds	r20, 0x0160
 48c:	50 91 61 01 	lds	r21, 0x0161
 490:	4f 5f       	subi	r20, 0xFF	; 255
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	82 ee       	ldi	r24, 0xE2	; 226
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
}
 49e:	08 95       	ret

000004a0 <nRF24L01P_Read_Data_From_Receive_Buffer>:

void nRF24L01P_Read_Data_From_Receive_Buffer(uint8_t *data){
 4a0:	ac 01       	movw	r20, r24
  nRF24L01P_ReadWrite_Register(0x61,1,data,32);
 4a2:	81 e6       	ldi	r24, 0x61	; 97
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	20 e2       	ldi	r18, 0x20	; 32
 4a8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
}
 4ac:	08 95       	ret

000004ae <nRF24L01P_Receive_Buffer_Not_Empty>:

uint8_t nRF24L01P_Receive_Buffer_Not_Empty(void){
  nRF24L01P->TempBuf[0]=0;
 4ae:	e0 91 60 01 	lds	r30, 0x0160
 4b2:	f0 91 61 01 	lds	r31, 0x0161
 4b6:	11 82       	std	Z+1, r1	; 0x01
  nRF24L01P_ReadWrite_Register(0x17,1,nRF24L01P->TempBuf,1);
 4b8:	31 96       	adiw	r30, 0x01	; 1
 4ba:	87 e1       	ldi	r24, 0x17	; 23
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	af 01       	movw	r20, r30
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
 4c6:	e0 91 60 01 	lds	r30, 0x0160
 4ca:	f0 91 61 01 	lds	r31, 0x0161
 4ce:	81 81       	ldd	r24, Z+1	; 0x01
 4d0:	80 95       	com	r24
  if((nRF24L01P->TempBuf[0] & (1<<0))==0){
    return 1;
  }else{
    return 0;
  }
}
 4d2:	81 70       	andi	r24, 0x01	; 1
 4d4:	08 95       	ret

000004d6 <nRF24L01P_Get_Mode>:

uint8_t nRF24L01P_Get_Mode(void){
  nRF24L01P_ReadWrite_Register(0x00,1,nRF24L01P->TempBuf,1);
 4d6:	40 91 60 01 	lds	r20, 0x0160
 4da:	50 91 61 01 	lds	r21, 0x0161
 4de:	4f 5f       	subi	r20, 0xFF	; 255
 4e0:	5f 4f       	sbci	r21, 0xFF	; 255
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  if(nRF24L01P->TempBuf[0] & (1<<1)){
 4ec:	e0 91 60 01 	lds	r30, 0x0160
 4f0:	f0 91 61 01 	lds	r31, 0x0161
 4f4:	81 81       	ldd	r24, Z+1	; 0x01
 4f6:	81 ff       	sbrs	r24, 1
 4f8:	07 c0       	rjmp	.+14     	; 0x508 <nRF24L01P_Get_Mode+0x32>
    if(nRF24L01P->TempBuf[0] & (1<<0)){
 4fa:	80 ff       	sbrs	r24, 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <nRF24L01P_Get_Mode+0x2c>
	  nRF24L01P->Mode=0x01;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	01 c0       	rjmp	.+2      	; 0x504 <nRF24L01P_Get_Mode+0x2e>
	  return 1; //rx mode
	}else{
	  nRF24L01P->Mode=0x02;
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	80 83       	st	Z, r24
 506:	08 95       	ret
	  return 2; //tx mode
	}
  }else{
    nRF24L01P->Mode=0x00;
 508:	10 82       	st	Z, r1
 50a:	80 e0       	ldi	r24, 0x00	; 0
    return 0;   //pwr down
  }
}
 50c:	08 95       	ret

0000050e <nRF24L01P_Set_Mode_Sleep>:
  
void nRF24L01P_Set_Mode_Sleep(void){
    nRF24L01P->TempBuf[0]=0x00;
 50e:	e0 91 60 01 	lds	r30, 0x0160
 512:	f0 91 61 01 	lds	r31, 0x0161
 516:	11 82       	std	Z+1, r1	; 0x01
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 518:	31 96       	adiw	r30, 0x01	; 1
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	af 01       	movw	r20, r30
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
    nRF24L01P->Mode=0x00;
 526:	e0 91 60 01 	lds	r30, 0x0160
 52a:	f0 91 61 01 	lds	r31, 0x0161
 52e:	10 82       	st	Z, r1
}
 530:	08 95       	ret

00000532 <nRF24L01P_Set_Mode_Tx>:

void nRF24L01P_Set_Mode_Tx(void){
    nRF24L01P->TempBuf[0]=0x72;
 532:	e0 91 60 01 	lds	r30, 0x0160
 536:	f0 91 61 01 	lds	r31, 0x0161
 53a:	82 e7       	ldi	r24, 0x72	; 114
 53c:	81 83       	std	Z+1, r24	; 0x01
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 53e:	5f 98       	cbi	0x0b, 7	; 11
}

void nRF24L01P_Set_Mode_Tx(void){
    nRF24L01P->TempBuf[0]=0x72;
    nRF24L01P_CE_Low();
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 540:	31 96       	adiw	r30, 0x01	; 1
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	af 01       	movw	r20, r30
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
	nRF24L01P_Flush_Transmit_Buffer();
 54e:	0e 94 09 02 	call	0x412	; 0x412 <nRF24L01P_Flush_Transmit_Buffer>
	nRF24L01P->Mode=0x02;
 552:	e0 91 60 01 	lds	r30, 0x0160
 556:	f0 91 61 01 	lds	r31, 0x0161
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	80 83       	st	Z, r24
  
}
 55e:	08 95       	ret

00000560 <nRF24L01P_Set_Mode_Rx>:

void nRF24L01P_Set_Mode_Rx(void){
    nRF24L01P->TempBuf[0]=0x73;
 560:	e0 91 60 01 	lds	r30, 0x0160
 564:	f0 91 61 01 	lds	r31, 0x0161
 568:	83 e7       	ldi	r24, 0x73	; 115
 56a:	81 83       	std	Z+1, r24	; 0x01
void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 56c:	5f 9a       	sbi	0x0b, 7	; 11
}

void nRF24L01P_Set_Mode_Rx(void){
    nRF24L01P->TempBuf[0]=0x73;
    nRF24L01P_CE_High();
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 56e:	31 96       	adiw	r30, 0x01	; 1
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	af 01       	movw	r20, r30
 576:	21 e0       	ldi	r18, 0x01	; 1
 578:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
	nRF24L01P->Mode=0x01;
 57c:	e0 91 60 01 	lds	r30, 0x0160
 580:	f0 91 61 01 	lds	r31, 0x0161
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 83       	st	Z, r24
}
 588:	08 95       	ret

0000058a <nRF24L01P_ReadModifyWrite>:

void nRF24L01P_ReadModifyWrite(uint8_t reg, uint8_t bit_pos, uint8_t bit_val){
 58a:	ff 92       	push	r15
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	f8 2e       	mov	r15, r24
 592:	06 2f       	mov	r16, r22
 594:	14 2f       	mov	r17, r20
  nRF24L01P_ReadWrite_Register(reg,1,nRF24L01P->TempBuf,1);
 596:	40 91 60 01 	lds	r20, 0x0160
 59a:	50 91 61 01 	lds	r21, 0x0161
 59e:	4f 5f       	subi	r20, 0xFF	; 255
 5a0:	5f 4f       	sbci	r21, 0xFF	; 255
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	21 e0       	ldi	r18, 0x01	; 1
 5a6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
 5aa:	e0 91 60 01 	lds	r30, 0x0160
 5ae:	f0 91 61 01 	lds	r31, 0x0161
  if(bit_val){
 5b2:	11 23       	and	r17, r17
 5b4:	51 f0       	breq	.+20     	; 0x5ca <nRF24L01P_ReadModifyWrite+0x40>
    nRF24L01P->TempBuf[0]|=(1<<bit_pos);
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <nRF24L01P_ReadModifyWrite+0x36>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	0a 95       	dec	r16
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <nRF24L01P_ReadModifyWrite+0x32>
 5c4:	21 81       	ldd	r18, Z+1	; 0x01
 5c6:	28 2b       	or	r18, r24
 5c8:	0a c0       	rjmp	.+20     	; 0x5de <nRF24L01P_ReadModifyWrite+0x54>
  }else{
    nRF24L01P->TempBuf[0]&=~(1<<bit_pos);
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <nRF24L01P_ReadModifyWrite+0x4a>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 95       	dec	r16
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <nRF24L01P_ReadModifyWrite+0x46>
 5d8:	80 95       	com	r24
 5da:	21 81       	ldd	r18, Z+1	; 0x01
 5dc:	28 23       	and	r18, r24
 5de:	21 83       	std	Z+1, r18	; 0x01
  }
  nRF24L01P_ReadWrite_Register(reg,0,nRF24L01P->TempBuf,1);
 5e0:	40 91 60 01 	lds	r20, 0x0160
 5e4:	50 91 61 01 	lds	r21, 0x0161
 5e8:	4f 5f       	subi	r20, 0xFF	; 255
 5ea:	5f 4f       	sbci	r21, 0xFF	; 255
 5ec:	8f 2d       	mov	r24, r15
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
}
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	ff 90       	pop	r15
 5fc:	08 95       	ret

000005fe <nRF24L01P_Get_Channel>:

uint8_t nRF24L01P_Get_Channel(void){
  nRF24L01P_ReadWrite_Register(0x05,1,nRF24L01P->TempBuf,1);
 5fe:	40 91 60 01 	lds	r20, 0x0160
 602:	50 91 61 01 	lds	r21, 0x0161
 606:	4f 5f       	subi	r20, 0xFF	; 255
 608:	5f 4f       	sbci	r21, 0xFF	; 255
 60a:	85 e0       	ldi	r24, 0x05	; 5
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	21 e0       	ldi	r18, 0x01	; 1
 610:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
 614:	e0 91 60 01 	lds	r30, 0x0160
 618:	f0 91 61 01 	lds	r31, 0x0161
  return nRF24L01P->TempBuf[0];
}
 61c:	81 81       	ldd	r24, Z+1	; 0x01
 61e:	08 95       	ret

00000620 <nRF24L01P_Set_Channel>:

void nRF24L01P_Set_Channel(uint8_t channel){
  if(channel>125){
    channel=125;
  }
  nRF24L01P->TempBuf[0]=channel;
 620:	e0 91 60 01 	lds	r30, 0x0160
 624:	f0 91 61 01 	lds	r31, 0x0161
 628:	8e 37       	cpi	r24, 0x7E	; 126
 62a:	08 f0       	brcs	.+2      	; 0x62e <nRF24L01P_Set_Channel+0xe>
 62c:	8d e7       	ldi	r24, 0x7D	; 125
 62e:	81 83       	std	Z+1, r24	; 0x01
  nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
 630:	31 96       	adiw	r30, 0x01	; 1
 632:	85 e0       	ldi	r24, 0x05	; 5
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	af 01       	movw	r20, r30
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
}
 63e:	08 95       	ret

00000640 <nRF24L01P_Get_Speed>:

uint8_t nRF24L01P_Get_Speed(void){
  nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
 640:	40 91 60 01 	lds	r20, 0x0160
 644:	50 91 61 01 	lds	r21, 0x0161
 648:	4f 5f       	subi	r20, 0xFF	; 255
 64a:	5f 4f       	sbci	r21, 0xFF	; 255
 64c:	86 e0       	ldi	r24, 0x06	; 6
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[1]=(nRF24L01P->TempBuf[0] >> 3) & 0x01;
 656:	e0 91 60 01 	lds	r30, 0x0160
 65a:	f0 91 61 01 	lds	r31, 0x0161
 65e:	91 81       	ldd	r25, Z+1	; 0x01
 660:	96 95       	lsr	r25
 662:	96 95       	lsr	r25
 664:	96 95       	lsr	r25
  nRF24L01P->TempBuf[0]>>=4;
  nRF24L01P->TempBuf[0]&=0x02;
 666:	89 2f       	mov	r24, r25
 668:	86 95       	lsr	r24
 66a:	82 70       	andi	r24, 0x02	; 2
 66c:	81 83       	std	Z+1, r24	; 0x01
  nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
}

uint8_t nRF24L01P_Get_Speed(void){
  nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
  nRF24L01P->TempBuf[1]=(nRF24L01P->TempBuf[0] >> 3) & 0x01;
 66e:	91 70       	andi	r25, 0x01	; 1
  nRF24L01P->TempBuf[0]>>=4;
  nRF24L01P->TempBuf[0]&=0x02;
  nRF24L01P->TempBuf[1]|=nRF24L01P->TempBuf[0];
 670:	89 2b       	or	r24, r25
 672:	82 83       	std	Z+2, r24	; 0x02
  if      (nRF24L01P->TempBuf[1]==0x02){
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	11 f4       	brne	.+4      	; 0x67c <nRF24L01P_Get_Speed+0x3c>
    nRF24L01P->TempBuf[0]=0;
 678:	11 82       	std	Z+1, r1	; 0x01
 67a:	06 c0       	rjmp	.+12     	; 0x688 <nRF24L01P_Get_Speed+0x48>
  }else if(nRF24L01P->TempBuf[1]==0x01){
 67c:	81 30       	cpi	r24, 0x01	; 1
 67e:	19 f0       	breq	.+6      	; 0x686 <nRF24L01P_Get_Speed+0x46>
    nRF24L01P->TempBuf[0]=1;
  }else if(nRF24L01P->TempBuf[1]==0x00){
 680:	88 23       	and	r24, r24
 682:	11 f4       	brne	.+4      	; 0x688 <nRF24L01P_Get_Speed+0x48>
    nRF24L01P->TempBuf[0]=2;
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	81 83       	std	Z+1, r24	; 0x01
  }
  return nRF24L01P->TempBuf[0];
}  
 688:	81 81       	ldd	r24, Z+1	; 0x01
 68a:	08 95       	ret

0000068c <nRF24L01P_Set_Speed>:

void nRF24L01P_Set_Speed(uint8_t index){
  if(index==0){       //250kbps
 68c:	88 23       	and	r24, r24
 68e:	21 f4       	brne	.+8      	; 0x698 <nRF24L01P_Set_Speed+0xc>
    nRF24L01P_ReadModifyWrite(0x06,5,1);
 690:	86 e0       	ldi	r24, 0x06	; 6
 692:	65 e0       	ldi	r22, 0x05	; 5
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <nRF24L01P_Set_Speed+0x16>
    nRF24L01P_ReadModifyWrite(0x06,3,0);
  }
  else if(index==1){  //1Mbps
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	49 f4       	brne	.+18     	; 0x6ae <nRF24L01P_Set_Speed+0x22>
    nRF24L01P_ReadModifyWrite(0x06,5,0);
 69c:	86 e0       	ldi	r24, 0x06	; 6
 69e:	65 e0       	ldi	r22, 0x05	; 5
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	0e 94 c5 02 	call	0x58a	; 0x58a <nRF24L01P_ReadModifyWrite>
    nRF24L01P_ReadModifyWrite(0x06,3,0);
 6a6:	86 e0       	ldi	r24, 0x06	; 6
 6a8:	63 e0       	ldi	r22, 0x03	; 3
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	08 c0       	rjmp	.+16     	; 0x6be <nRF24L01P_Set_Speed+0x32>
  }
  else if(index==2){  //2Mbps
    nRF24L01P_ReadModifyWrite(0x06,5,0);
    nRF24L01P_ReadModifyWrite(0x06,3,1);
  }else{              //2Mbps
    nRF24L01P_ReadModifyWrite(0x06,5,0);
 6ae:	86 e0       	ldi	r24, 0x06	; 6
 6b0:	65 e0       	ldi	r22, 0x05	; 5
 6b2:	40 e0       	ldi	r20, 0x00	; 0
 6b4:	0e 94 c5 02 	call	0x58a	; 0x58a <nRF24L01P_ReadModifyWrite>
    nRF24L01P_ReadModifyWrite(0x06,3,1);
 6b8:	86 e0       	ldi	r24, 0x06	; 6
 6ba:	63 e0       	ldi	r22, 0x03	; 3
 6bc:	41 e0       	ldi	r20, 0x01	; 1
 6be:	0e 94 c5 02 	call	0x58a	; 0x58a <nRF24L01P_ReadModifyWrite>
 6c2:	08 95       	ret

000006c4 <nRF24L01P_Get_Tx_Power>:
  }
}

uint8_t nRF24L01P_Get_Tx_Power(void){
  nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
 6c4:	40 91 60 01 	lds	r20, 0x0160
 6c8:	50 91 61 01 	lds	r21, 0x0161
 6cc:	4f 5f       	subi	r20, 0xFF	; 255
 6ce:	5f 4f       	sbci	r21, 0xFF	; 255
 6d0:	86 e0       	ldi	r24, 0x06	; 6
 6d2:	61 e0       	ldi	r22, 0x01	; 1
 6d4:	21 e0       	ldi	r18, 0x01	; 1
 6d6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]>>=1;
 6da:	e0 91 60 01 	lds	r30, 0x0160
 6de:	f0 91 61 01 	lds	r31, 0x0161
  nRF24L01P->TempBuf[0]&=0x03;
 6e2:	81 81       	ldd	r24, Z+1	; 0x01
 6e4:	86 95       	lsr	r24
 6e6:	83 70       	andi	r24, 0x03	; 3
 6e8:	81 83       	std	Z+1, r24	; 0x01
  return nRF24L01P->TempBuf[0];
}  
 6ea:	08 95       	ret

000006ec <nRF24L01P_Set_Tx_Power>:

void nRF24L01P_Set_Tx_Power(uint8_t index){
if(index==0){
 6ec:	88 23       	and	r24, r24
 6ee:	21 f4       	brne	.+8      	; 0x6f8 <nRF24L01P_Set_Tx_Power+0xc>
  nRF24L01P_ReadModifyWrite(0x06,2,0);
 6f0:	86 e0       	ldi	r24, 0x06	; 6
 6f2:	62 e0       	ldi	r22, 0x02	; 2
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	0b c0       	rjmp	.+22     	; 0x70e <nRF24L01P_Set_Tx_Power+0x22>
  nRF24L01P_ReadModifyWrite(0x06,1,0);
 }
else if(index==1){
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	21 f4       	brne	.+8      	; 0x704 <nRF24L01P_Set_Tx_Power+0x18>
  nRF24L01P_ReadModifyWrite(0x06,2,0);
 6fc:	86 e0       	ldi	r24, 0x06	; 6
 6fe:	62 e0       	ldi	r22, 0x02	; 2
 700:	40 e0       	ldi	r20, 0x00	; 0
 702:	0e c0       	rjmp	.+28     	; 0x720 <nRF24L01P_Set_Tx_Power+0x34>
  nRF24L01P_ReadModifyWrite(0x06,1,1);
 }
else if(index==2){
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	49 f4       	brne	.+18     	; 0x71a <nRF24L01P_Set_Tx_Power+0x2e>
  nRF24L01P_ReadModifyWrite(0x06,2,1);
 708:	86 e0       	ldi	r24, 0x06	; 6
 70a:	62 e0       	ldi	r22, 0x02	; 2
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	0e 94 c5 02 	call	0x58a	; 0x58a <nRF24L01P_ReadModifyWrite>
  nRF24L01P_ReadModifyWrite(0x06,1,0);
 712:	86 e0       	ldi	r24, 0x06	; 6
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	40 e0       	ldi	r20, 0x00	; 0
 718:	08 c0       	rjmp	.+16     	; 0x72a <nRF24L01P_Set_Tx_Power+0x3e>
 }
 else if(index==3){
  nRF24L01P_ReadModifyWrite(0x06,2,1);
  nRF24L01P_ReadModifyWrite(0x06,1,1);
 }else{
  nRF24L01P_ReadModifyWrite(0x06,2,1);
 71a:	86 e0       	ldi	r24, 0x06	; 6
 71c:	62 e0       	ldi	r22, 0x02	; 2
 71e:	41 e0       	ldi	r20, 0x01	; 1
 720:	0e 94 c5 02 	call	0x58a	; 0x58a <nRF24L01P_ReadModifyWrite>
  nRF24L01P_ReadModifyWrite(0x06,1,1);
 724:	86 e0       	ldi	r24, 0x06	; 6
 726:	61 e0       	ldi	r22, 0x01	; 1
 728:	41 e0       	ldi	r20, 0x01	; 1
 72a:	0e 94 c5 02 	call	0x58a	; 0x58a <nRF24L01P_ReadModifyWrite>
 72e:	08 95       	ret

00000730 <nRF24L01P_Set_Own_Address>:
 }
}

void nRF24L01P_Set_Own_Address(uint8_t addr){
  nRF24L01P->Address.Own=addr;
 730:	e0 91 60 01 	lds	r30, 0x0160
 734:	f0 91 61 01 	lds	r31, 0x0161
 738:	83 83       	std	Z+3, r24	; 0x03
}
 73a:	08 95       	ret

0000073c <nRF24L01P_Set_Destination_Address>:

void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
 73c:	e0 91 60 01 	lds	r30, 0x0160
 740:	f0 91 61 01 	lds	r31, 0x0161
 744:	84 83       	std	Z+4, r24	; 0x04
}
 746:	08 95       	ret

00000748 <nRF24L01P_Set_Receive_Timeout>:

void nRF24L01P_Set_Receive_Timeout(uint16_t val){
  nRF24L01P->Config.RxTimeout=val;
 748:	e0 91 60 01 	lds	r30, 0x0160
 74c:	f0 91 61 01 	lds	r31, 0x0161
 750:	96 83       	std	Z+6, r25	; 0x06
 752:	85 83       	std	Z+5, r24	; 0x05
}
 754:	08 95       	ret

00000756 <nRF24L01P_Set_MaxRetransmission>:

void nRF24L01P_Set_MaxRetransmission(uint16_t val){
  nRF24L01P->Config.MaxRetry=val;
 756:	e0 91 60 01 	lds	r30, 0x0160
 75a:	f0 91 61 01 	lds	r31, 0x0161
 75e:	93 87       	std	Z+11, r25	; 0x0b
 760:	82 87       	std	Z+10, r24	; 0x0a
}
 762:	08 95       	ret

00000764 <nRF24L01P_Deep_Sleep>:

void nRF24L01P_Deep_Sleep(void){
  if(nRF24L01P->Mode!=0x00){
 764:	e0 91 60 01 	lds	r30, 0x0160
 768:	f0 91 61 01 	lds	r31, 0x0161
 76c:	80 81       	ld	r24, Z
 76e:	88 23       	and	r24, r24
 770:	21 f0       	breq	.+8      	; 0x77a <nRF24L01P_Deep_Sleep+0x16>
    nRF24L01P_Set_Mode_Sleep();
 772:	0e 94 87 02 	call	0x50e	; 0x50e <nRF24L01P_Set_Mode_Sleep>
    nRF24L01P_Disable();
 776:	0e 94 63 01 	call	0x2c6	; 0x2c6 <nRF24L01P_Disable>
 77a:	08 95       	ret

0000077c <nRF24L01P_WakeUp>:
  }
}


void nRF24L01P_WakeUp(void){
  if(nRF24L01P->Mode==0x00){
 77c:	e0 91 60 01 	lds	r30, 0x0160
 780:	f0 91 61 01 	lds	r31, 0x0161
 784:	80 81       	ld	r24, Z
 786:	88 23       	and	r24, r24
 788:	21 f4       	brne	.+8      	; 0x792 <nRF24L01P_WakeUp+0x16>
    nRF24L01P_Enable();
 78a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01P_Enable>
    nRF24L01P_Set_Mode_Rx();
 78e:	0e 94 b0 02 	call	0x560	; 0x560 <nRF24L01P_Set_Mode_Rx>
 792:	08 95       	ret

00000794 <nRF24L01P_Init>:
  }
}

void nRF24L01P_Init(void){
 794:	0f 93       	push	r16
 796:	1f 93       	push	r17
  nRF24L01P_Struct_Init();
 798:	0e 94 0c 01 	call	0x218	; 0x218 <nRF24L01P_Struct_Init>
  nRF24L01P_Enable();
 79c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01P_Enable>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 7a0:	e0 91 60 01 	lds	r30, 0x0160
 7a4:	f0 91 61 01 	lds	r31, 0x0161
 7a8:	11 82       	std	Z+1, r1	; 0x01
 7aa:	31 96       	adiw	r30, 0x01	; 1
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	af 01       	movw	r20, r30
 7b2:	21 e0       	ldi	r18, 0x01	; 1
 7b4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x01,0,nRF24L01P->TempBuf,1);
 7b8:	e0 91 60 01 	lds	r30, 0x0160
 7bc:	f0 91 61 01 	lds	r31, 0x0161
 7c0:	11 82       	std	Z+1, r1	; 0x01
 7c2:	31 96       	adiw	r30, 0x01	; 1
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	af 01       	movw	r20, r30
 7ca:	21 e0       	ldi	r18, 0x01	; 1
 7cc:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x03;  nRF24L01P_ReadWrite_Register(0x02,0,nRF24L01P->TempBuf,1);
 7d0:	e0 91 60 01 	lds	r30, 0x0160
 7d4:	f0 91 61 01 	lds	r31, 0x0161
 7d8:	83 e0       	ldi	r24, 0x03	; 3
 7da:	81 83       	std	Z+1, r24	; 0x01
 7dc:	31 96       	adiw	r30, 0x01	; 1
 7de:	82 e0       	ldi	r24, 0x02	; 2
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	af 01       	movw	r20, r30
 7e4:	21 e0       	ldi	r18, 0x01	; 1
 7e6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x01;  nRF24L01P_ReadWrite_Register(0x03,0,nRF24L01P->TempBuf,1);
 7ea:	e0 91 60 01 	lds	r30, 0x0160
 7ee:	f0 91 61 01 	lds	r31, 0x0161
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	81 83       	std	Z+1, r24	; 0x01
 7f6:	31 96       	adiw	r30, 0x01	; 1
 7f8:	83 e0       	ldi	r24, 0x03	; 3
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	af 01       	movw	r20, r30
 7fe:	21 e0       	ldi	r18, 0x01	; 1
 800:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x04,0,nRF24L01P->TempBuf,1);
 804:	e0 91 60 01 	lds	r30, 0x0160
 808:	f0 91 61 01 	lds	r31, 0x0161
 80c:	11 82       	std	Z+1, r1	; 0x01
 80e:	31 96       	adiw	r30, 0x01	; 1
 810:	84 e0       	ldi	r24, 0x04	; 4
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	af 01       	movw	r20, r30
 816:	21 e0       	ldi	r18, 0x01	; 1
 818:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x02;  nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
 81c:	e0 91 60 01 	lds	r30, 0x0160
 820:	f0 91 61 01 	lds	r31, 0x0161
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	81 83       	std	Z+1, r24	; 0x01
 828:	31 96       	adiw	r30, 0x01	; 1
 82a:	85 e0       	ldi	r24, 0x05	; 5
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	af 01       	movw	r20, r30
 830:	21 e0       	ldi	r18, 0x01	; 1
 832:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x26;  nRF24L01P_ReadWrite_Register(0x06,0,nRF24L01P->TempBuf,1); 
 836:	e0 91 60 01 	lds	r30, 0x0160
 83a:	f0 91 61 01 	lds	r31, 0x0161
 83e:	86 e2       	ldi	r24, 0x26	; 38
 840:	81 83       	std	Z+1, r24	; 0x01
 842:	31 96       	adiw	r30, 0x01	; 1
 844:	86 e0       	ldi	r24, 0x06	; 6
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	af 01       	movw	r20, r30
 84a:	21 e0       	ldi	r18, 0x01	; 1
 84c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x70;  nRF24L01P_ReadWrite_Register(0x07,0,nRF24L01P->TempBuf,1);
 850:	e0 91 60 01 	lds	r30, 0x0160
 854:	f0 91 61 01 	lds	r31, 0x0161
 858:	80 e7       	ldi	r24, 0x70	; 112
 85a:	81 83       	std	Z+1, r24	; 0x01
 85c:	31 96       	adiw	r30, 0x01	; 1
 85e:	87 e0       	ldi	r24, 0x07	; 7
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	af 01       	movw	r20, r30
 864:	21 e0       	ldi	r18, 0x01	; 1
 866:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=nRF24L01P_PACKET_LEN;  
 86a:	e0 91 60 01 	lds	r30, 0x0160
 86e:	f0 91 61 01 	lds	r31, 0x0161
 872:	10 e2       	ldi	r17, 0x20	; 32
 874:	11 83       	std	Z+1, r17	; 0x01
  nRF24L01P_ReadWrite_Register(0x11,0,nRF24L01P->TempBuf,1);
 876:	31 96       	adiw	r30, 0x01	; 1
 878:	81 e1       	ldi	r24, 0x11	; 17
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	af 01       	movw	r20, r30
 87e:	21 e0       	ldi	r18, 0x01	; 1
 880:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=nRF24L01P_PACKET_LEN;  
 884:	e0 91 60 01 	lds	r30, 0x0160
 888:	f0 91 61 01 	lds	r31, 0x0161
 88c:	11 83       	std	Z+1, r17	; 0x01
  nRF24L01P_ReadWrite_Register(0x12,0,nRF24L01P->TempBuf,1);
 88e:	31 96       	adiw	r30, 0x01	; 1
 890:	82 e1       	ldi	r24, 0x12	; 18
 892:	60 e0       	ldi	r22, 0x00	; 0
 894:	af 01       	movw	r20, r30
 896:	21 e0       	ldi	r18, 0x01	; 1
 898:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x1C,0,nRF24L01P->TempBuf,1);
 89c:	e0 91 60 01 	lds	r30, 0x0160
 8a0:	f0 91 61 01 	lds	r31, 0x0161
 8a4:	11 82       	std	Z+1, r1	; 0x01
 8a6:	31 96       	adiw	r30, 0x01	; 1
 8a8:	8c e1       	ldi	r24, 0x1C	; 28
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	af 01       	movw	r20, r30
 8ae:	21 e0       	ldi	r18, 0x01	; 1
 8b0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x1D,0,nRF24L01P->TempBuf,1);
 8b4:	e0 91 60 01 	lds	r30, 0x0160
 8b8:	f0 91 61 01 	lds	r31, 0x0161
 8bc:	11 82       	std	Z+1, r1	; 0x01
 8be:	31 96       	adiw	r30, 0x01	; 1
 8c0:	8d e1       	ldi	r24, 0x1D	; 29
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	af 01       	movw	r20, r30
 8c6:	21 e0       	ldi	r18, 0x01	; 1
 8c8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x10,0,(uint8_t*)"ACK00",5);
 8cc:	00 e2       	ldi	r16, 0x20	; 32
 8ce:	11 e0       	ldi	r17, 0x01	; 1
 8d0:	80 e1       	ldi	r24, 0x10	; 16
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	a8 01       	movw	r20, r16
 8d6:	25 e0       	ldi	r18, 0x05	; 5
 8d8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0A,0,(uint8_t*)"ACK00",5);
 8dc:	8a e0       	ldi	r24, 0x0A	; 10
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	a8 01       	movw	r20, r16
 8e2:	25 e0       	ldi	r18, 0x05	; 5
 8e4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0B,0,(uint8_t*)"PIPE1",5);
 8e8:	8b e0       	ldi	r24, 0x0B	; 11
 8ea:	60 e0       	ldi	r22, 0x00	; 0
 8ec:	46 e2       	ldi	r20, 0x26	; 38
 8ee:	51 e0       	ldi	r21, 0x01	; 1
 8f0:	25 e0       	ldi	r18, 0x05	; 5
 8f2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0C,0,(uint8_t*)"PIPE2",5);
 8f6:	8c e0       	ldi	r24, 0x0C	; 12
 8f8:	60 e0       	ldi	r22, 0x00	; 0
 8fa:	4c e2       	ldi	r20, 0x2C	; 44
 8fc:	51 e0       	ldi	r21, 0x01	; 1
 8fe:	25 e0       	ldi	r18, 0x05	; 5
 900:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0D,0,(uint8_t*)"PIPE3",5);
 904:	8d e0       	ldi	r24, 0x0D	; 13
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	42 e3       	ldi	r20, 0x32	; 50
 90a:	51 e0       	ldi	r21, 0x01	; 1
 90c:	25 e0       	ldi	r18, 0x05	; 5
 90e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0E,0,(uint8_t*)"PIPE4",5);
 912:	8e e0       	ldi	r24, 0x0E	; 14
 914:	60 e0       	ldi	r22, 0x00	; 0
 916:	48 e3       	ldi	r20, 0x38	; 56
 918:	51 e0       	ldi	r21, 0x01	; 1
 91a:	25 e0       	ldi	r18, 0x05	; 5
 91c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0F,0,(uint8_t*)"PIPE5",5);
 920:	8f e0       	ldi	r24, 0x0F	; 15
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	4e e3       	ldi	r20, 0x3E	; 62
 926:	51 e0       	ldi	r21, 0x01	; 1
 928:	25 e0       	ldi	r18, 0x05	; 5
 92a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <nRF24L01P_ReadWrite_Register>
void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
}

void nRF24L01P_Set_Receive_Timeout(uint16_t val){
  nRF24L01P->Config.RxTimeout=val;
 92e:	e0 91 60 01 	lds	r30, 0x0160
 932:	f0 91 61 01 	lds	r31, 0x0161
 936:	80 e2       	ldi	r24, 0x20	; 32
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	96 83       	std	Z+6, r25	; 0x06
 93c:	85 83       	std	Z+5, r24	; 0x05
  nRF24L01P_ReadWrite_Register(0x0C,0,(uint8_t*)"PIPE2",5);
  nRF24L01P_ReadWrite_Register(0x0D,0,(uint8_t*)"PIPE3",5);
  nRF24L01P_ReadWrite_Register(0x0E,0,(uint8_t*)"PIPE4",5);
  nRF24L01P_ReadWrite_Register(0x0F,0,(uint8_t*)"PIPE5",5);
  nRF24L01P_Set_Receive_Timeout(32);
  nRF24L01P_Set_Mode_Sleep();
 93e:	0e 94 87 02 	call	0x50e	; 0x50e <nRF24L01P_Set_Mode_Sleep>
}
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	08 95       	ret

00000948 <nRF24L01P_Transmit_Basic>:

void nRF24L01P_Transmit_Basic(uint8_t *buf, uint8_t len){
 948:	ff 92       	push	r15
 94a:	0f 93       	push	r16
 94c:	1f 93       	push	r17
 94e:	8c 01       	movw	r16, r24
 950:	f6 2e       	mov	r15, r22
  nRF24L01P_Set_Mode_Tx();
 952:	0e 94 99 02 	call	0x532	; 0x532 <nRF24L01P_Set_Mode_Tx>
  buf[nRF24L01P_PACKET_LEN-5]=nRF24L01P->Address.Own;
 956:	e0 91 60 01 	lds	r30, 0x0160
 95a:	f0 91 61 01 	lds	r31, 0x0161
 95e:	83 81       	ldd	r24, Z+3	; 0x03
 960:	f8 01       	movw	r30, r16
 962:	83 8f       	std	Z+27, r24	; 0x1b
  buf[nRF24L01P_PACKET_LEN-4]=nRF24L01P->Address.Dest;
 964:	e0 91 60 01 	lds	r30, 0x0160
 968:	f0 91 61 01 	lds	r31, 0x0161
 96c:	84 81       	ldd	r24, Z+4	; 0x04
 96e:	f8 01       	movw	r30, r16
 970:	84 8f       	std	Z+28, r24	; 0x1c
  buf[nRF24L01P_PACKET_LEN-3]=len;
 972:	f5 8e       	std	Z+29, r15	; 0x1d
  uint16_t temp=nRF24L01P_Calcuate_CRC_Block(buf, 30);
 974:	c8 01       	movw	r24, r16
 976:	6e e1       	ldi	r22, 0x1E	; 30
 978:	0e 94 c0 01 	call	0x380	; 0x380 <nRF24L01P_Calcuate_CRC_Block>
  buf[nRF24L01P_PACKET_LEN-2]=(temp & 0xFF00)>>8;
 97c:	f8 01       	movw	r30, r16
 97e:	96 8f       	std	Z+30, r25	; 0x1e
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
 980:	87 8f       	std	Z+31, r24	; 0x1f
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
 982:	c8 01       	movw	r24, r16
 984:	0e 94 15 02 	call	0x42a	; 0x42a <nRF24L01P_Write_Data_To_Transmit_Buffer>
void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 988:	5f 9a       	sbi	0x0b, 7	; 11
  uint16_t temp=nRF24L01P_Calcuate_CRC_Block(buf, 30);
  buf[nRF24L01P_PACKET_LEN-2]=(temp & 0xFF00)>>8;
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
  nRF24L01P_CE_High();
  nRF24L01P_Wait_Till_Transmission_Completes();
 98a:	0e 94 35 02 	call	0x46a	; 0x46a <nRF24L01P_Wait_Till_Transmission_Completes>
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 98e:	5f 98       	cbi	0x0b, 7	; 11
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
  nRF24L01P_CE_High();
  nRF24L01P_Wait_Till_Transmission_Completes();
  nRF24L01P_CE_Low();
}
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	ff 90       	pop	r15
 996:	08 95       	ret

00000998 <nRF24L01P_Recieve_Basic>:


uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
 998:	cf 92       	push	r12
 99a:	df 92       	push	r13
 99c:	ef 92       	push	r14
 99e:	ff 92       	push	r15
 9a0:	0f 93       	push	r16
 9a2:	1f 93       	push	r17
 9a4:	cf 93       	push	r28
 9a6:	df 93       	push	r29
 9a8:	7c 01       	movw	r14, r24
  uint8_t sts=0;
  nRF24L01P->Config.RxTicks=0;
 9aa:	e0 91 60 01 	lds	r30, 0x0160
 9ae:	f0 91 61 01 	lds	r31, 0x0161
 9b2:	10 86       	std	Z+8, r1	; 0x08
 9b4:	17 82       	std	Z+7, r1	; 0x07
  nRF24L01P_Set_Mode_Rx();
 9b6:	0e 94 b0 02 	call	0x560	; 0x560 <nRF24L01P_Set_Mode_Rx>
 9ba:	7c e2       	ldi	r23, 0x2C	; 44
 9bc:	c7 2e       	mov	r12, r23
 9be:	71 e0       	ldi	r23, 0x01	; 1
 9c0:	d7 2e       	mov	r13, r23
 9c2:	23 c0       	rjmp	.+70     	; 0xa0a <nRF24L01P_Recieve_Basic+0x72>
  while(nRF24L01P->Config.RxTicks < nRF24L01P->Config.RxTimeout){
    if(nRF24L01P_Receive_Buffer_Not_Empty()){
 9c4:	0e 94 57 02 	call	0x4ae	; 0x4ae <nRF24L01P_Receive_Buffer_Not_Empty>
 9c8:	88 23       	and	r24, r24
 9ca:	99 f0       	breq	.+38     	; 0x9f2 <nRF24L01P_Recieve_Basic+0x5a>
      nRF24L01P_Read_Data_From_Receive_Buffer(buf);
 9cc:	c7 01       	movw	r24, r14
 9ce:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nRF24L01P_Read_Data_From_Receive_Buffer>
	  uint16_t rec_crc=buf[nRF24L01P_PACKET_LEN-2];
	  rec_crc<<=8;
 9d2:	f7 01       	movw	r30, r14
 9d4:	d6 8d       	ldd	r29, Z+30	; 0x1e
 9d6:	c0 e0       	ldi	r28, 0x00	; 0
	  rec_crc|=buf[nRF24L01P_PACKET_LEN-1];
 9d8:	07 8d       	ldd	r16, Z+31	; 0x1f
 9da:	10 e0       	ldi	r17, 0x00	; 0
 9dc:	0c 2b       	or	r16, r28
 9de:	1d 2b       	or	r17, r29
      uint16_t calc_crc=nRF24L01P_Calcuate_CRC_Block(buf, nRF24L01P_PACKET_LEN-2);
 9e0:	c7 01       	movw	r24, r14
 9e2:	6e e1       	ldi	r22, 0x1E	; 30
 9e4:	0e 94 c0 01 	call	0x380	; 0x380 <nRF24L01P_Calcuate_CRC_Block>
      if(rec_crc == calc_crc){
 9e8:	08 17       	cp	r16, r24
 9ea:	19 07       	cpc	r17, r25
 9ec:	11 f4       	brne	.+4      	; 0x9f2 <nRF24L01P_Recieve_Basic+0x5a>
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	18 c0       	rjmp	.+48     	; 0xa22 <nRF24L01P_Recieve_Basic+0x8a>
 9f2:	c6 01       	movw	r24, r12
 9f4:	01 97       	sbiw	r24, 0x01	; 1
 9f6:	f1 f7       	brne	.-4      	; 0x9f4 <nRF24L01P_Recieve_Basic+0x5c>
		sts=1;
		break;
	  }
    }
    _delay_us(100);
    nRF24L01P->Config.RxTicks++;
 9f8:	e0 91 60 01 	lds	r30, 0x0160
 9fc:	f0 91 61 01 	lds	r31, 0x0161
 a00:	87 81       	ldd	r24, Z+7	; 0x07
 a02:	90 85       	ldd	r25, Z+8	; 0x08
 a04:	01 96       	adiw	r24, 0x01	; 1
 a06:	90 87       	std	Z+8, r25	; 0x08
 a08:	87 83       	std	Z+7, r24	; 0x07

uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P->Config.RxTicks=0;
  nRF24L01P_Set_Mode_Rx();
  while(nRF24L01P->Config.RxTicks < nRF24L01P->Config.RxTimeout){
 a0a:	e0 91 60 01 	lds	r30, 0x0160
 a0e:	f0 91 61 01 	lds	r31, 0x0161
 a12:	27 81       	ldd	r18, Z+7	; 0x07
 a14:	30 85       	ldd	r19, Z+8	; 0x08
 a16:	85 81       	ldd	r24, Z+5	; 0x05
 a18:	96 81       	ldd	r25, Z+6	; 0x06
 a1a:	28 17       	cp	r18, r24
 a1c:	39 07       	cpc	r19, r25
 a1e:	90 f2       	brcs	.-92     	; 0x9c4 <nRF24L01P_Recieve_Basic+0x2c>
 a20:	80 e0       	ldi	r24, 0x00	; 0
    }
    _delay_us(100);
    nRF24L01P->Config.RxTicks++;
  }
  return sts;
}
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	ff 90       	pop	r15
 a2c:	ef 90       	pop	r14
 a2e:	df 90       	pop	r13
 a30:	cf 90       	pop	r12
 a32:	08 95       	ret

00000a34 <nRF24L01P_Transmit_With_ACK>:

uint8_t nRF24L01P_Transmit_With_ACK(uint8_t *buf, uint8_t len){
 a34:	cf 93       	push	r28
 a36:	df 93       	push	r29
 a38:	ec 01       	movw	r28, r24
  uint8_t sts=0;
  if(nRF24L01P->Packet.ACKReq){
 a3a:	e0 91 60 01 	lds	r30, 0x0160
 a3e:	f0 91 61 01 	lds	r31, 0x0161
 a42:	87 85       	ldd	r24, Z+15	; 0x0f
 a44:	88 23       	and	r24, r24
 a46:	19 f0       	breq	.+6      	; 0xa4e <nRF24L01P_Transmit_With_ACK+0x1a>
    buf[nRF24L01P_PACKET_LEN-6]=1;
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	8a 8f       	std	Y+26, r24	; 0x1a
 a4c:	01 c0       	rjmp	.+2      	; 0xa50 <nRF24L01P_Transmit_With_ACK+0x1c>
  }else{
    buf[nRF24L01P_PACKET_LEN-6]=0;
 a4e:	1a 8e       	std	Y+26, r1	; 0x1a
  }
  nRF24L01P_Transmit_Basic(buf, len);
 a50:	ce 01       	movw	r24, r28
 a52:	0e 94 a4 04 	call	0x948	; 0x948 <nRF24L01P_Transmit_Basic>
  if(nRF24L01P_Recieve_Basic(buf)){
 a56:	ce 01       	movw	r24, r28
 a58:	0e 94 cc 04 	call	0x998	; 0x998 <nRF24L01P_Recieve_Basic>
 a5c:	81 11       	cpse	r24, r1
 a5e:	81 e0       	ldi	r24, 0x01	; 1
    //if( (nRF24L01P->Address.Own == buf[28])){
      sts=1;
    //}
  }
  return sts;
}
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	08 95       	ret

00000a66 <nRF24L01P_Recieve_With_ACK>:


uint8_t nRF24L01P_Recieve_With_ACK(uint8_t *buf){
 a66:	cf 93       	push	r28
 a68:	df 93       	push	r29
 a6a:	ec 01       	movw	r28, r24
  uint8_t sts=0;
  if(nRF24L01P_Recieve_Basic(buf)){
 a6c:	0e 94 cc 04 	call	0x998	; 0x998 <nRF24L01P_Recieve_Basic>
 a70:	88 23       	and	r24, r24
 a72:	b9 f0       	breq	.+46     	; 0xaa2 <nRF24L01P_Recieve_With_ACK+0x3c>
    if((buf[nRF24L01P_PACKET_LEN-6]==1) && (nRF24L01P->Address.Own == buf[nRF24L01P_PACKET_LEN-4])){
 a74:	8a 8d       	ldd	r24, Y+26	; 0x1a
 a76:	81 30       	cpi	r24, 0x01	; 1
 a78:	a1 f4       	brne	.+40     	; 0xaa2 <nRF24L01P_Recieve_With_ACK+0x3c>
 a7a:	e0 91 60 01 	lds	r30, 0x0160
 a7e:	f0 91 61 01 	lds	r31, 0x0161
 a82:	93 81       	ldd	r25, Z+3	; 0x03
 a84:	8c 8d       	ldd	r24, Y+28	; 0x1c
 a86:	98 17       	cp	r25, r24
 a88:	61 f4       	brne	.+24     	; 0xaa2 <nRF24L01P_Recieve_With_ACK+0x3c>
 a8a:	8c ed       	ldi	r24, 0xDC	; 220
 a8c:	95 e0       	ldi	r25, 0x05	; 5
 a8e:	01 97       	sbiw	r24, 0x01	; 1
 a90:	f1 f7       	brne	.-4      	; 0xa8e <nRF24L01P_Recieve_With_ACK+0x28>
void nRF24L01P_Set_Own_Address(uint8_t addr){
  nRF24L01P->Address.Own=addr;
}

void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
 a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
 a94:	84 83       	std	Z+4, r24	; 0x04
  uint8_t sts=0;
  if(nRF24L01P_Recieve_Basic(buf)){
    if((buf[nRF24L01P_PACKET_LEN-6]==1) && (nRF24L01P->Address.Own == buf[nRF24L01P_PACKET_LEN-4])){
      _delay_us(500);
	  nRF24L01P_Set_Destination_Address(buf[nRF24L01P_PACKET_LEN-5]);
      nRF24L01P_Transmit_Basic(buf, 2);
 a96:	ce 01       	movw	r24, r28
 a98:	62 e0       	ldi	r22, 0x02	; 2
 a9a:	0e 94 a4 04 	call	0x948	; 0x948 <nRF24L01P_Transmit_Basic>
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <nRF24L01P_Recieve_With_ACK+0x3e>
 aa2:	80 e0       	ldi	r24, 0x00	; 0
      sts=1;
    }
  }
  return sts;
}
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	08 95       	ret

00000aaa <_exit>:
 aaa:	f8 94       	cli

00000aac <__stop_program>:
 aac:	ff cf       	rjmp	.-2      	; 0xaac <__stop_program>
