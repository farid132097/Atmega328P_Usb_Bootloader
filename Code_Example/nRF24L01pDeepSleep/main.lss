
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000a18  00000aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800124  00800124  00000ad0  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005eb  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dea  00000000  00000000  0000111b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004cf  00000000  00000000  00001f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c60  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00003034  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e2  00000000  00000000  00003394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004fa  00000000  00000000  00003a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 33       	cpi	r26, 0x3F	; 63
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

uint32_t last_val=0;
uint8_t  state=0;


int main(void){
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	a0 97       	sbiw	r28, 0x20	; 32
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61

  DDRD  |= (1<<4);
  c2:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  c4:	5c 98       	cbi	0x0b, 4	; 11
  
  DDRD&=~((1<<3)|(1<<2));
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	83 7f       	andi	r24, 0xF3	; 243
  ca:	8a b9       	out	0x0a, r24	; 10
  PORTD|=(1<<3)|(1<<2);
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8c 60       	ori	r24, 0x0C	; 12
  d0:	8b b9       	out	0x0b, r24	; 11
  
  nRF24L01P_Init();
  d2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <nRF24L01P_Init>
  Sleep_Init();
  d6:	0e 94 b4 00 	call	0x168	; 0x168 <Sleep_Init>
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	10 e0       	ldi	r17, 0x00	; 0
  
  for(uint16_t i=0;i<5000;i++){
    uint8_t buf[32];
	nRF24L01P_WakeUp();
    nRF24L01P_Transmit_Basic(buf,10);
  de:	7e 01       	movw	r14, r28
  e0:	08 94       	sec
  e2:	e1 1c       	adc	r14, r1
  e4:	f1 1c       	adc	r15, r1
  nRF24L01P_Init();
  Sleep_Init();
  
  for(uint16_t i=0;i<5000;i++){
    uint8_t buf[32];
	nRF24L01P_WakeUp();
  e6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01P_WakeUp>
    nRF24L01P_Transmit_Basic(buf,10);
  ea:	c7 01       	movw	r24, r14
  ec:	6a e0       	ldi	r22, 0x0A	; 10
  ee:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nRF24L01P_Transmit_Basic>
	nRF24L01P_Deep_Sleep();
  f2:	0e 94 67 03 	call	0x6ce	; 0x6ce <nRF24L01P_Deep_Sleep>
  PORTD|=(1<<3)|(1<<2);
  
  nRF24L01P_Init();
  Sleep_Init();
  
  for(uint16_t i=0;i<5000;i++){
  f6:	0f 5f       	subi	r16, 0xFF	; 255
  f8:	1f 4f       	sbci	r17, 0xFF	; 255
  fa:	83 e1       	ldi	r24, 0x13	; 19
  fc:	08 38       	cpi	r16, 0x88	; 136
  fe:	18 07       	cpc	r17, r24
 100:	91 f7       	brne	.-28     	; 0xe6 <main+0x40>
  while(1){
      
	    uint8_t buf[32];
	    PORTD |=(1<<4);
	    nRF24L01P_WakeUp();
	    nRF24L01P_Transmit_Basic(buf,10);
 102:	8e 01       	movw	r16, r28
 104:	0f 5f       	subi	r16, 0xFF	; 255
 106:	1f 4f       	sbci	r17, 0xFF	; 255
	nRF24L01P_Deep_Sleep();
  }
  while(1){
      
	    uint8_t buf[32];
	    PORTD |=(1<<4);
 108:	5c 9a       	sbi	0x0b, 4	; 11
	    nRF24L01P_WakeUp();
 10a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01P_WakeUp>
	    nRF24L01P_Transmit_Basic(buf,10);
 10e:	c8 01       	movw	r24, r16
 110:	6a e0       	ldi	r22, 0x0A	; 10
 112:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nRF24L01P_Transmit_Basic>
	    nRF24L01P_Deep_Sleep();
 116:	0e 94 67 03 	call	0x6ce	; 0x6ce <nRF24L01P_Deep_Sleep>
	    PORTD &=~(1<<4);
 11a:	5c 98       	cbi	0x0b, 4	; 11
	    Deep_Sleep();
 11c:	0e 94 91 00 	call	0x122	; 0x122 <Deep_Sleep>
 120:	f3 cf       	rjmp	.-26     	; 0x108 <main+0x62>

00000122 <Deep_Sleep>:
#include <avr/sleep.h>

volatile uint32_t WDT_Ticks=0;

void Deep_Sleep(void){
  sleep_enable();
 122:	83 b7       	in	r24, 0x33	; 51
 124:	81 60       	ori	r24, 0x01	; 1
 126:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
 128:	85 b7       	in	r24, 0x35	; 53
 12a:	80 66       	ori	r24, 0x60	; 96
 12c:	85 bf       	out	0x35, r24	; 53
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	85 bf       	out	0x35, r24	; 53
  sei();
 132:	78 94       	sei
  sleep_cpu();
 134:	88 95       	sleep
  sleep_disable();
 136:	83 b7       	in	r24, 0x33	; 51
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	83 bf       	out	0x33, r24	; 51
}
 13c:	08 95       	ret

0000013e <ADC_Disable>:

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	80 83       	st	Z, r24
}
 148:	08 95       	ret

0000014a <Analog_Comparator_Disable>:

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
 14a:	80 b7       	in	r24, 0x30	; 48
 14c:	8f 77       	andi	r24, 0x7F	; 127
 14e:	80 bf       	out	0x30, r24	; 48
}
 150:	08 95       	ret

00000152 <WDT_Get_Ticks>:

uint32_t WDT_Get_Ticks(void){
  return WDT_Ticks;
 152:	20 91 29 01 	lds	r18, 0x0129
 156:	30 91 2a 01 	lds	r19, 0x012A
 15a:	40 91 2b 01 	lds	r20, 0x012B
 15e:	50 91 2c 01 	lds	r21, 0x012C
}
 162:	b9 01       	movw	r22, r18
 164:	ca 01       	movw	r24, r20
 166:	08 95       	ret

00000168 <Sleep_Init>:


void Sleep_Init(void){
  cli();
 168:	f8 94       	cli
  WDTCSR=(1<<WDCE)|(1<<WDE);
 16a:	e0 e6       	ldi	r30, 0x60	; 96
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	88 e1       	ldi	r24, 0x18	; 24
 170:	80 83       	st	Z, r24
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
 172:	86 e4       	ldi	r24, 0x46	; 70
 174:	80 83       	st	Z, r24
  sei();
 176:	78 94       	sei
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 178:	83 b7       	in	r24, 0x33	; 51
 17a:	81 7f       	andi	r24, 0xF1	; 241
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	83 bf       	out	0x33, r24	; 51
  sleep_cpu();
  sleep_disable();
}

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
 180:	ea e7       	ldi	r30, 0x7A	; 122
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8f 77       	andi	r24, 0x7F	; 127
 188:	80 83       	st	Z, r24
}

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
 18a:	80 b7       	in	r24, 0x30	; 48
 18c:	8f 77       	andi	r24, 0x7F	; 127
 18e:	80 bf       	out	0x30, r24	; 48
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
  sei();
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ADC_Disable();
  Analog_Comparator_Disable();
}
 190:	08 95       	ret

00000192 <__vector_6>:

ISR(WDT_vect){
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
  WDTCSR|=(1<<WDIE);
 1a8:	e0 e6       	ldi	r30, 0x60	; 96
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	80 83       	st	Z, r24
  WDT_Ticks++;
 1b2:	80 91 29 01 	lds	r24, 0x0129
 1b6:	90 91 2a 01 	lds	r25, 0x012A
 1ba:	a0 91 2b 01 	lds	r26, 0x012B
 1be:	b0 91 2c 01 	lds	r27, 0x012C
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	a1 1d       	adc	r26, r1
 1c6:	b1 1d       	adc	r27, r1
 1c8:	80 93 29 01 	sts	0x0129, r24
 1cc:	90 93 2a 01 	sts	0x012A, r25
 1d0:	a0 93 2b 01 	sts	0x012B, r26
 1d4:	b0 93 2c 01 	sts	0x012C, r27
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <nRF24L01P_Struct_Init>:

nrf24l01p_t nRF24L01P_type;
nrf24l01p_t *nRF24L01P;

void nRF24L01P_Struct_Init(void){
  nRF24L01P=&nRF24L01P_type;
 1ee:	8d e2       	ldi	r24, 0x2D	; 45
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	90 93 3e 01 	sts	0x013E, r25
 1f6:	80 93 3d 01 	sts	0x013D, r24
  nRF24L01P->Mode=0x00;
 1fa:	10 92 2d 01 	sts	0x012D, r1
  nRF24L01P->TempBuf[0]=0x00;
 1fe:	10 92 2e 01 	sts	0x012E, r1
  nRF24L01P->TempBuf[1]=0x00;
 202:	10 92 2f 01 	sts	0x012F, r1
  nRF24L01P->Address.Own=0x00;
 206:	10 92 30 01 	sts	0x0130, r1
  nRF24L01P->Address.Dest=0x01;
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	20 93 31 01 	sts	0x0131, r18
  nRF24L01P->Config.RxTimeout=10;
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 33 01 	sts	0x0133, r25
 218:	80 93 32 01 	sts	0x0132, r24
  nRF24L01P->Config.RxTicks=0;
 21c:	10 92 35 01 	sts	0x0135, r1
 220:	10 92 34 01 	sts	0x0134, r1
  nRF24L01P->Config.MaxDataLength=0;
 224:	10 92 36 01 	sts	0x0136, r1
  nRF24L01P->Config.MaxRetry=0;
 228:	10 92 38 01 	sts	0x0138, r1
 22c:	10 92 37 01 	sts	0x0137, r1
  nRF24L01P->Config.RetryOccured=0;
 230:	10 92 3a 01 	sts	0x013A, r1
 234:	10 92 39 01 	sts	0x0139, r1
  nRF24L01P->Packet.PID=0;
 238:	10 92 3b 01 	sts	0x013B, r1
  nRF24L01P->Packet.ACKReq=1;
 23c:	20 93 3c 01 	sts	0x013C, r18
}
 240:	08 95       	ret

00000242 <nRF24L01P_CSN_High>:

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 242:	28 9a       	sbi	0x05, 0	; 5
}
 244:	08 95       	ret

00000246 <nRF24L01P_CSN_Low>:

void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
 246:	28 98       	cbi	0x05, 0	; 5
}
 248:	08 95       	ret

0000024a <nRF24L01P_CE_High>:

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 24a:	5f 9a       	sbi	0x0b, 7	; 11
}
 24c:	08 95       	ret

0000024e <nRF24L01P_CE_Low>:

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 24e:	5f 98       	cbi	0x0b, 7	; 11
}
 250:	08 95       	ret

00000252 <nRF24L01P_Enable_GPIO>:

void nRF24L01P_Enable_GPIO(void){
  DDRB |= (1<<5)|(1<<3)|(1<<2);
 252:	84 b1       	in	r24, 0x04	; 4
 254:	8c 62       	ori	r24, 0x2C	; 44
 256:	84 b9       	out	0x04, r24	; 4
  DDRB &=~(1<<4);
 258:	24 98       	cbi	0x04, 4	; 4
  nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
 25a:	20 9a       	sbi	0x04, 0	; 4
  nRF24L01P_CE_DDR  |= (1<<nRF24L01P_CE_bp) ;
 25c:	57 9a       	sbi	0x0a, 7	; 10
  nRF24L01P->Packet.PID=0;
  nRF24L01P->Packet.ACKReq=1;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 25e:	28 9a       	sbi	0x05, 0	; 5
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 260:	5f 98       	cbi	0x0b, 7	; 11
  DDRB &=~(1<<4);
  nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
  nRF24L01P_CE_DDR  |= (1<<nRF24L01P_CE_bp) ;
  nRF24L01P_CSN_High();
  nRF24L01P_CE_Low()  ;
}
 262:	08 95       	ret

00000264 <nRF24L01P_Disable_GPIO>:

void nRF24L01P_Disable_GPIO(void){
  DDRB |= (1<<4);                              
 264:	24 9a       	sbi	0x04, 4	; 4
  PORTB&=~((1<<5)|(1<<4)|(1<<3)|(1<<2));
 266:	85 b1       	in	r24, 0x05	; 5
 268:	83 7c       	andi	r24, 0xC3	; 195
 26a:	85 b9       	out	0x05, r24	; 5
  nRF24L01P->Packet.PID=0;
  nRF24L01P->Packet.ACKReq=1;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 26c:	28 9a       	sbi	0x05, 0	; 5
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 26e:	5f 98       	cbi	0x0b, 7	; 11
void nRF24L01P_Disable_GPIO(void){
  DDRB |= (1<<4);                              
  PORTB&=~((1<<5)|(1<<4)|(1<<3)|(1<<2));
  nRF24L01P_CSN_High();   ////////////////////////test//////
  nRF24L01P_CE_Low() ;  
}
 270:	08 95       	ret

00000272 <nRF24L01P_Enable_SPI>:

void nRF24L01P_Enable_SPI(void){
  SPCR=(1<<SPE)|(1<<MSTR);                     
 272:	80 e5       	ldi	r24, 0x50	; 80
 274:	8c bd       	out	0x2c, r24	; 44
  SPSR=(1<<SPI2X);                             
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	8d bd       	out	0x2d, r24	; 45
}
 27a:	08 95       	ret

0000027c <nRF24L01P_Disable_SPI>:

void nRF24L01P_Disable_SPI(void){                 
  SPCR=0x00;
 27c:	1c bc       	out	0x2c, r1	; 44
  SPSR=0x00;
 27e:	1d bc       	out	0x2d, r1	; 45
}
 280:	08 95       	ret

00000282 <nRF24L01P_Enable>:

void nRF24L01P_Enable(void){
  nRF24L01P_Enable_GPIO();
 282:	0e 94 29 01 	call	0x252	; 0x252 <nRF24L01P_Enable_GPIO>
  nRF24L01P_CSN_High();   ////////////////////////test//////
  nRF24L01P_CE_Low() ;  
}

void nRF24L01P_Enable_SPI(void){
  SPCR=(1<<SPE)|(1<<MSTR);                     
 286:	80 e5       	ldi	r24, 0x50	; 80
 288:	8c bd       	out	0x2c, r24	; 44
  SPSR=(1<<SPI2X);                             
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	8d bd       	out	0x2d, r24	; 45
}

void nRF24L01P_Enable(void){
  nRF24L01P_Enable_GPIO();
  nRF24L01P_Enable_SPI();
}
 28e:	08 95       	ret

00000290 <nRF24L01P_Disable>:
  SPCR=(1<<SPE)|(1<<MSTR);                     
  SPSR=(1<<SPI2X);                             
}

void nRF24L01P_Disable_SPI(void){                 
  SPCR=0x00;
 290:	1c bc       	out	0x2c, r1	; 44
  SPSR=0x00;
 292:	1d bc       	out	0x2d, r1	; 45
  nRF24L01P_Enable_SPI();
}

void nRF24L01P_Disable(void){
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
 294:	0e 94 32 01 	call	0x264	; 0x264 <nRF24L01P_Disable_GPIO>
}
 298:	08 95       	ret

0000029a <nRF24L01P_SPI_Transfer>:

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  SPDR = data;
 29a:	8e bd       	out	0x2e, r24	; 46
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a0:	34 e0       	ldi	r19, 0x04	; 4
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <nRF24L01P_SPI_Transfer+0x1a>
 2a4:	23 2f       	mov	r18, r19
 2a6:	2a 95       	dec	r18
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <nRF24L01P_SPI_Transfer+0xc>
  uint16_t ticks=0;
  while(!(SPSR & (1 << SPIF))){
    _delay_us(1);
    ticks++;
 2aa:	01 96       	adiw	r24, 0x01	; 1
    if(ticks>5000){
 2ac:	23 e1       	ldi	r18, 0x13	; 19
 2ae:	89 38       	cpi	r24, 0x89	; 137
 2b0:	92 07       	cpc	r25, r18
 2b2:	19 f0       	breq	.+6      	; 0x2ba <nRF24L01P_SPI_Transfer+0x20>
}

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  SPDR = data;
  uint16_t ticks=0;
  while(!(SPSR & (1 << SPIF))){
 2b4:	0d b4       	in	r0, 0x2d	; 45
 2b6:	07 fe       	sbrs	r0, 7
 2b8:	f5 cf       	rjmp	.-22     	; 0x2a4 <nRF24L01P_SPI_Transfer+0xa>
    if(ticks>5000){
      //add error management
	  break;
    }
  }
  return SPDR;
 2ba:	8e b5       	in	r24, 0x2e	; 46
}
 2bc:	08 95       	ret

000002be <nRF24L01P_Calcuate_CRC>:

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
 2be:	36 2f       	mov	r19, r22
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	28 27       	eor	r18, r24
 2c4:	39 27       	eor	r19, r25
 2c6:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
	  crc=(crc<<1)^0x1021;
 2c8:	61 e2       	ldi	r22, 0x21	; 33
 2ca:	70 e1       	ldi	r23, 0x10	; 16
 2cc:	c9 01       	movw	r24, r18
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
}

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
 2d2:	37 ff       	sbrs	r19, 7
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <nRF24L01P_Calcuate_CRC+0x20>
	  crc=(crc<<1)^0x1021;
 2d6:	9c 01       	movw	r18, r24
 2d8:	26 27       	eor	r18, r22
 2da:	37 27       	eor	r19, r23
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <nRF24L01P_Calcuate_CRC+0x22>
	}
    else{
	  crc<<=1;
 2de:	9c 01       	movw	r18, r24
  return SPDR;
}

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
 2e0:	4f 5f       	subi	r20, 0xFF	; 255
 2e2:	48 30       	cpi	r20, 0x08	; 8
 2e4:	99 f7       	brne	.-26     	; 0x2cc <nRF24L01P_Calcuate_CRC+0xe>
    else{
	  crc<<=1;
	}
  }
  return crc;
}
 2e6:	c9 01       	movw	r24, r18
 2e8:	08 95       	ret

000002ea <nRF24L01P_Calcuate_CRC_Block>:

uint16_t nRF24L01P_Calcuate_CRC_Block(uint8_t *buf, uint8_t len){
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	06 2f       	mov	r16, r22
 2f4:	ec 01       	movw	r28, r24
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	10 e0       	ldi	r17, 0x00	; 0
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <nRF24L01P_Calcuate_CRC_Block+0x20>
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
    crc=nRF24L01P_Calcuate_CRC(crc,buf[i]);
 2fe:	c9 01       	movw	r24, r18
 300:	69 91       	ld	r22, Y+
 302:	0e 94 5f 01 	call	0x2be	; 0x2be <nRF24L01P_Calcuate_CRC>
 306:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t nRF24L01P_Calcuate_CRC_Block(uint8_t *buf, uint8_t len){
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
 308:	1f 5f       	subi	r17, 0xFF	; 255
 30a:	10 17       	cp	r17, r16
 30c:	c0 f3       	brcs	.-16     	; 0x2fe <nRF24L01P_Calcuate_CRC_Block+0x14>
    crc=nRF24L01P_Calcuate_CRC(crc,buf[i]);
  }
  return crc;
}
 30e:	c9 01       	movw	r24, r18
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <nRF24L01P_ReadWrite_Register>:


void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	14 2f       	mov	r17, r20
 326:	05 2f       	mov	r16, r21
 328:	f2 2e       	mov	r15, r18
void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
 32a:	28 98       	cbi	0x05, 0	; 5
}


void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
  nRF24L01P_CSN_Low();
  if(rw==0){
 32c:	66 23       	and	r22, r22
 32e:	81 f4       	brne	.+32     	; 0x350 <nRF24L01P_ReadWrite_Register+0x36>
    reg|=0x20;
	nRF24L01P_SPI_Transfer(reg);
 330:	80 62       	ori	r24, 0x20	; 32
 332:	0e 94 4d 01 	call	0x29a	; 0x29a <nRF24L01P_SPI_Transfer>
 336:	81 2f       	mov	r24, r17
 338:	90 2f       	mov	r25, r16
 33a:	9c 01       	movw	r18, r24
 33c:	e9 01       	movw	r28, r18
 33e:	10 e0       	ldi	r17, 0x00	; 0
 340:	04 c0       	rjmp	.+8      	; 0x34a <nRF24L01P_ReadWrite_Register+0x30>
	for(uint8_t i=0;i<len;i++){
	  nRF24L01P_SPI_Transfer(data[i]);
 342:	89 91       	ld	r24, Y+
 344:	0e 94 4d 01 	call	0x29a	; 0x29a <nRF24L01P_SPI_Transfer>
void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
  nRF24L01P_CSN_Low();
  if(rw==0){
    reg|=0x20;
	nRF24L01P_SPI_Transfer(reg);
	for(uint8_t i=0;i<len;i++){
 348:	1f 5f       	subi	r17, 0xFF	; 255
 34a:	1f 15       	cp	r17, r15
 34c:	d0 f3       	brcs	.-12     	; 0x342 <nRF24L01P_ReadWrite_Register+0x28>
 34e:	0f c0       	rjmp	.+30     	; 0x36e <nRF24L01P_ReadWrite_Register+0x54>
	  nRF24L01P_SPI_Transfer(data[i]);
	}
  }else{
    nRF24L01P_SPI_Transfer(reg);
 350:	0e 94 4d 01 	call	0x29a	; 0x29a <nRF24L01P_SPI_Transfer>
 354:	81 2f       	mov	r24, r17
 356:	90 2f       	mov	r25, r16
 358:	9c 01       	movw	r18, r24
 35a:	e9 01       	movw	r28, r18
 35c:	10 e0       	ldi	r17, 0x00	; 0
 35e:	05 c0       	rjmp	.+10     	; 0x36a <nRF24L01P_ReadWrite_Register+0x50>
    for(uint8_t i=0;i<len;i++){
      data[i]=nRF24L01P_SPI_Transfer(0xFF);
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	0e 94 4d 01 	call	0x29a	; 0x29a <nRF24L01P_SPI_Transfer>
 366:	89 93       	st	Y+, r24
	for(uint8_t i=0;i<len;i++){
	  nRF24L01P_SPI_Transfer(data[i]);
	}
  }else{
    nRF24L01P_SPI_Transfer(reg);
    for(uint8_t i=0;i<len;i++){
 368:	1f 5f       	subi	r17, 0xFF	; 255
 36a:	1f 15       	cp	r17, r15
 36c:	c8 f3       	brcs	.-14     	; 0x360 <nRF24L01P_ReadWrite_Register+0x46>
  nRF24L01P->Packet.PID=0;
  nRF24L01P->Packet.ACKReq=1;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 36e:	28 9a       	sbi	0x05, 0	; 5
    for(uint8_t i=0;i<len;i++){
      data[i]=nRF24L01P_SPI_Transfer(0xFF);
    }
  }
  nRF24L01P_CSN_High();
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	08 95       	ret

0000037c <nRF24L01P_Flush_Transmit_Buffer>:

void nRF24L01P_Flush_Transmit_Buffer(void){
  nRF24L01P_ReadWrite_Register(0xE1,0,nRF24L01P->TempBuf,0);
 37c:	40 91 3d 01 	lds	r20, 0x013D
 380:	50 91 3e 01 	lds	r21, 0x013E
 384:	4f 5f       	subi	r20, 0xFF	; 255
 386:	5f 4f       	sbci	r21, 0xFF	; 255
 388:	81 ee       	ldi	r24, 0xE1	; 225
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
}
 392:	08 95       	ret

00000394 <nRF24L01P_Write_Data_To_Transmit_Buffer>:

void nRF24L01P_Write_Data_To_Transmit_Buffer(uint8_t *data){
 394:	ac 01       	movw	r20, r24
  nRF24L01P_ReadWrite_Register(0xA0,0,data,32);
 396:	80 ea       	ldi	r24, 0xA0	; 160
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	20 e2       	ldi	r18, 0x20	; 32
 39c:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
}
 3a0:	08 95       	ret

000003a2 <nRF24L01P_Transmit_Buffer_Empty>:

uint8_t nRF24L01P_Transmit_Buffer_Empty(void){
  nRF24L01P->TempBuf[0]=0;
 3a2:	e0 91 3d 01 	lds	r30, 0x013D
 3a6:	f0 91 3e 01 	lds	r31, 0x013E
 3aa:	11 82       	std	Z+1, r1	; 0x01
  nRF24L01P_ReadWrite_Register(0x17,1,nRF24L01P->TempBuf,1);
 3ac:	31 96       	adiw	r30, 0x01	; 1
 3ae:	87 e1       	ldi	r24, 0x17	; 23
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	af 01       	movw	r20, r30
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
 3ba:	e0 91 3d 01 	lds	r30, 0x013D
 3be:	f0 91 3e 01 	lds	r31, 0x013E
 3c2:	81 81       	ldd	r24, Z+1	; 0x01
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	64 e0       	ldi	r22, 0x04	; 4
 3c8:	96 95       	lsr	r25
 3ca:	87 95       	ror	r24
 3cc:	6a 95       	dec	r22
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <nRF24L01P_Transmit_Buffer_Empty+0x26>
  if(nRF24L01P->TempBuf[0] & (1<<4)){
    return 1;
  }else{
    return 0;
  }
}
 3d0:	81 70       	andi	r24, 0x01	; 1
 3d2:	08 95       	ret

000003d4 <nRF24L01P_Wait_Till_Transmission_Completes>:

void nRF24L01P_Wait_Till_Transmission_Completes(void){
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3d8:	cc e2       	ldi	r28, 0x2C	; 44
 3da:	d1 e0       	ldi	r29, 0x01	; 1
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <nRF24L01P_Wait_Till_Transmission_Completes+0x10>
 3de:	ce 01       	movw	r24, r28
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <nRF24L01P_Wait_Till_Transmission_Completes+0xc>
  while(!nRF24L01P_Transmit_Buffer_Empty()){
 3e4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <nRF24L01P_Transmit_Buffer_Empty>
 3e8:	88 23       	and	r24, r24
 3ea:	c9 f3       	breq	.-14     	; 0x3de <nRF24L01P_Wait_Till_Transmission_Completes+0xa>
    _delay_us(100);
  }
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <nRF24L01P_Flush_Receive_Buffer>:

void nRF24L01P_Flush_Receive_Buffer(void){
  nRF24L01P_ReadWrite_Register(0xE2,0,nRF24L01P->TempBuf,0);
 3f2:	40 91 3d 01 	lds	r20, 0x013D
 3f6:	50 91 3e 01 	lds	r21, 0x013E
 3fa:	4f 5f       	subi	r20, 0xFF	; 255
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255
 3fe:	82 ee       	ldi	r24, 0xE2	; 226
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
}
 408:	08 95       	ret

0000040a <nRF24L01P_Read_Data_From_Receive_Buffer>:

void nRF24L01P_Read_Data_From_Receive_Buffer(uint8_t *data){
 40a:	ac 01       	movw	r20, r24
  nRF24L01P_ReadWrite_Register(0x61,1,data,32);
 40c:	81 e6       	ldi	r24, 0x61	; 97
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	20 e2       	ldi	r18, 0x20	; 32
 412:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
}
 416:	08 95       	ret

00000418 <nRF24L01P_Receive_Buffer_Not_Empty>:

uint8_t nRF24L01P_Receive_Buffer_Not_Empty(void){
  nRF24L01P->TempBuf[0]=0;
 418:	e0 91 3d 01 	lds	r30, 0x013D
 41c:	f0 91 3e 01 	lds	r31, 0x013E
 420:	11 82       	std	Z+1, r1	; 0x01
  nRF24L01P_ReadWrite_Register(0x17,1,nRF24L01P->TempBuf,1);
 422:	31 96       	adiw	r30, 0x01	; 1
 424:	87 e1       	ldi	r24, 0x17	; 23
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	af 01       	movw	r20, r30
 42a:	21 e0       	ldi	r18, 0x01	; 1
 42c:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
 430:	e0 91 3d 01 	lds	r30, 0x013D
 434:	f0 91 3e 01 	lds	r31, 0x013E
 438:	81 81       	ldd	r24, Z+1	; 0x01
 43a:	80 95       	com	r24
  if((nRF24L01P->TempBuf[0] & (1<<0))==0){
    return 1;
  }else{
    return 0;
  }
}
 43c:	81 70       	andi	r24, 0x01	; 1
 43e:	08 95       	ret

00000440 <nRF24L01P_Get_Mode>:

uint8_t nRF24L01P_Get_Mode(void){
  nRF24L01P_ReadWrite_Register(0x00,1,nRF24L01P->TempBuf,1);
 440:	40 91 3d 01 	lds	r20, 0x013D
 444:	50 91 3e 01 	lds	r21, 0x013E
 448:	4f 5f       	subi	r20, 0xFF	; 255
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  if(nRF24L01P->TempBuf[0] & (1<<1)){
 456:	e0 91 3d 01 	lds	r30, 0x013D
 45a:	f0 91 3e 01 	lds	r31, 0x013E
 45e:	81 81       	ldd	r24, Z+1	; 0x01
 460:	81 ff       	sbrs	r24, 1
 462:	07 c0       	rjmp	.+14     	; 0x472 <nRF24L01P_Get_Mode+0x32>
    if(nRF24L01P->TempBuf[0] & (1<<0)){
 464:	80 ff       	sbrs	r24, 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <nRF24L01P_Get_Mode+0x2c>
	  nRF24L01P->Mode=0x01;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	01 c0       	rjmp	.+2      	; 0x46e <nRF24L01P_Get_Mode+0x2e>
	  return 1; //rx mode
	}else{
	  nRF24L01P->Mode=0x02;
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	80 83       	st	Z, r24
 470:	08 95       	ret
	  return 2; //tx mode
	}
  }else{
    nRF24L01P->Mode=0x00;
 472:	10 82       	st	Z, r1
 474:	80 e0       	ldi	r24, 0x00	; 0
    return 0;   //pwr down
  }
}
 476:	08 95       	ret

00000478 <nRF24L01P_Set_Mode_Sleep>:
  
void nRF24L01P_Set_Mode_Sleep(void){
    nRF24L01P->TempBuf[0]=0x00;
 478:	e0 91 3d 01 	lds	r30, 0x013D
 47c:	f0 91 3e 01 	lds	r31, 0x013E
 480:	11 82       	std	Z+1, r1	; 0x01
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 482:	31 96       	adiw	r30, 0x01	; 1
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	af 01       	movw	r20, r30
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
    nRF24L01P->Mode=0x00;
 490:	e0 91 3d 01 	lds	r30, 0x013D
 494:	f0 91 3e 01 	lds	r31, 0x013E
 498:	10 82       	st	Z, r1
}
 49a:	08 95       	ret

0000049c <nRF24L01P_Set_Mode_Tx>:

void nRF24L01P_Set_Mode_Tx(void){
    nRF24L01P->TempBuf[0]=0x72;
 49c:	e0 91 3d 01 	lds	r30, 0x013D
 4a0:	f0 91 3e 01 	lds	r31, 0x013E
 4a4:	82 e7       	ldi	r24, 0x72	; 114
 4a6:	81 83       	std	Z+1, r24	; 0x01
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 4a8:	5f 98       	cbi	0x0b, 7	; 11
}

void nRF24L01P_Set_Mode_Tx(void){
    nRF24L01P->TempBuf[0]=0x72;
    nRF24L01P_CE_Low();
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 4aa:	31 96       	adiw	r30, 0x01	; 1
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	af 01       	movw	r20, r30
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
	nRF24L01P_Flush_Transmit_Buffer();
 4b8:	0e 94 be 01 	call	0x37c	; 0x37c <nRF24L01P_Flush_Transmit_Buffer>
	nRF24L01P->Mode=0x02;
 4bc:	e0 91 3d 01 	lds	r30, 0x013D
 4c0:	f0 91 3e 01 	lds	r31, 0x013E
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	80 83       	st	Z, r24
  
}
 4c8:	08 95       	ret

000004ca <nRF24L01P_Set_Mode_Rx>:

void nRF24L01P_Set_Mode_Rx(void){
    nRF24L01P->TempBuf[0]=0x73;
 4ca:	e0 91 3d 01 	lds	r30, 0x013D
 4ce:	f0 91 3e 01 	lds	r31, 0x013E
 4d2:	83 e7       	ldi	r24, 0x73	; 115
 4d4:	81 83       	std	Z+1, r24	; 0x01
void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 4d6:	5f 9a       	sbi	0x0b, 7	; 11
}

void nRF24L01P_Set_Mode_Rx(void){
    nRF24L01P->TempBuf[0]=0x73;
    nRF24L01P_CE_High();
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 4d8:	31 96       	adiw	r30, 0x01	; 1
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	af 01       	movw	r20, r30
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
	nRF24L01P->Mode=0x01;
 4e6:	e0 91 3d 01 	lds	r30, 0x013D
 4ea:	f0 91 3e 01 	lds	r31, 0x013E
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	80 83       	st	Z, r24
}
 4f2:	08 95       	ret

000004f4 <nRF24L01P_ReadModifyWrite>:

void nRF24L01P_ReadModifyWrite(uint8_t reg, uint8_t bit_pos, uint8_t bit_val){
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	f8 2e       	mov	r15, r24
 4fc:	06 2f       	mov	r16, r22
 4fe:	14 2f       	mov	r17, r20
  nRF24L01P_ReadWrite_Register(reg,1,nRF24L01P->TempBuf,1);
 500:	40 91 3d 01 	lds	r20, 0x013D
 504:	50 91 3e 01 	lds	r21, 0x013E
 508:	4f 5f       	subi	r20, 0xFF	; 255
 50a:	5f 4f       	sbci	r21, 0xFF	; 255
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
 514:	e0 91 3d 01 	lds	r30, 0x013D
 518:	f0 91 3e 01 	lds	r31, 0x013E
  if(bit_val){
 51c:	11 23       	and	r17, r17
 51e:	51 f0       	breq	.+20     	; 0x534 <nRF24L01P_ReadModifyWrite+0x40>
    nRF24L01P->TempBuf[0]|=(1<<bit_pos);
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <nRF24L01P_ReadModifyWrite+0x36>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	0a 95       	dec	r16
 52c:	e2 f7       	brpl	.-8      	; 0x526 <nRF24L01P_ReadModifyWrite+0x32>
 52e:	21 81       	ldd	r18, Z+1	; 0x01
 530:	28 2b       	or	r18, r24
 532:	0a c0       	rjmp	.+20     	; 0x548 <nRF24L01P_ReadModifyWrite+0x54>
  }else{
    nRF24L01P->TempBuf[0]&=~(1<<bit_pos);
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <nRF24L01P_ReadModifyWrite+0x4a>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	0a 95       	dec	r16
 540:	e2 f7       	brpl	.-8      	; 0x53a <nRF24L01P_ReadModifyWrite+0x46>
 542:	80 95       	com	r24
 544:	21 81       	ldd	r18, Z+1	; 0x01
 546:	28 23       	and	r18, r24
 548:	21 83       	std	Z+1, r18	; 0x01
  }
  nRF24L01P_ReadWrite_Register(reg,0,nRF24L01P->TempBuf,1);
 54a:	40 91 3d 01 	lds	r20, 0x013D
 54e:	50 91 3e 01 	lds	r21, 0x013E
 552:	4f 5f       	subi	r20, 0xFF	; 255
 554:	5f 4f       	sbci	r21, 0xFF	; 255
 556:	8f 2d       	mov	r24, r15
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
}
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	08 95       	ret

00000568 <nRF24L01P_Get_Channel>:

uint8_t nRF24L01P_Get_Channel(void){
  nRF24L01P_ReadWrite_Register(0x05,1,nRF24L01P->TempBuf,1);
 568:	40 91 3d 01 	lds	r20, 0x013D
 56c:	50 91 3e 01 	lds	r21, 0x013E
 570:	4f 5f       	subi	r20, 0xFF	; 255
 572:	5f 4f       	sbci	r21, 0xFF	; 255
 574:	85 e0       	ldi	r24, 0x05	; 5
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
 57e:	e0 91 3d 01 	lds	r30, 0x013D
 582:	f0 91 3e 01 	lds	r31, 0x013E
  return nRF24L01P->TempBuf[0];
}
 586:	81 81       	ldd	r24, Z+1	; 0x01
 588:	08 95       	ret

0000058a <nRF24L01P_Set_Channel>:

void nRF24L01P_Set_Channel(uint8_t channel){
  if(channel>125){
    channel=125;
  }
  nRF24L01P->TempBuf[0]=channel;
 58a:	e0 91 3d 01 	lds	r30, 0x013D
 58e:	f0 91 3e 01 	lds	r31, 0x013E
 592:	8e 37       	cpi	r24, 0x7E	; 126
 594:	08 f0       	brcs	.+2      	; 0x598 <nRF24L01P_Set_Channel+0xe>
 596:	8d e7       	ldi	r24, 0x7D	; 125
 598:	81 83       	std	Z+1, r24	; 0x01
  nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
 59a:	31 96       	adiw	r30, 0x01	; 1
 59c:	85 e0       	ldi	r24, 0x05	; 5
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	af 01       	movw	r20, r30
 5a2:	21 e0       	ldi	r18, 0x01	; 1
 5a4:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
}
 5a8:	08 95       	ret

000005aa <nRF24L01P_Get_Speed>:

uint8_t nRF24L01P_Get_Speed(void){
  nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
 5aa:	40 91 3d 01 	lds	r20, 0x013D
 5ae:	50 91 3e 01 	lds	r21, 0x013E
 5b2:	4f 5f       	subi	r20, 0xFF	; 255
 5b4:	5f 4f       	sbci	r21, 0xFF	; 255
 5b6:	86 e0       	ldi	r24, 0x06	; 6
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	21 e0       	ldi	r18, 0x01	; 1
 5bc:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[1]=(nRF24L01P->TempBuf[0] >> 3) & 0x01;
 5c0:	e0 91 3d 01 	lds	r30, 0x013D
 5c4:	f0 91 3e 01 	lds	r31, 0x013E
 5c8:	91 81       	ldd	r25, Z+1	; 0x01
 5ca:	96 95       	lsr	r25
 5cc:	96 95       	lsr	r25
 5ce:	96 95       	lsr	r25
  nRF24L01P->TempBuf[0]>>=4;
  nRF24L01P->TempBuf[0]&=0x02;
 5d0:	89 2f       	mov	r24, r25
 5d2:	86 95       	lsr	r24
 5d4:	82 70       	andi	r24, 0x02	; 2
 5d6:	81 83       	std	Z+1, r24	; 0x01
  nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
}

uint8_t nRF24L01P_Get_Speed(void){
  nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
  nRF24L01P->TempBuf[1]=(nRF24L01P->TempBuf[0] >> 3) & 0x01;
 5d8:	91 70       	andi	r25, 0x01	; 1
  nRF24L01P->TempBuf[0]>>=4;
  nRF24L01P->TempBuf[0]&=0x02;
  nRF24L01P->TempBuf[1]|=nRF24L01P->TempBuf[0];
 5da:	89 2b       	or	r24, r25
 5dc:	82 83       	std	Z+2, r24	; 0x02
  if      (nRF24L01P->TempBuf[1]==0x02){
 5de:	82 30       	cpi	r24, 0x02	; 2
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <nRF24L01P_Get_Speed+0x3c>
    nRF24L01P->TempBuf[0]=0;
 5e2:	11 82       	std	Z+1, r1	; 0x01
 5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <nRF24L01P_Get_Speed+0x48>
  }else if(nRF24L01P->TempBuf[1]==0x01){
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	19 f0       	breq	.+6      	; 0x5f0 <nRF24L01P_Get_Speed+0x46>
    nRF24L01P->TempBuf[0]=1;
  }else if(nRF24L01P->TempBuf[1]==0x00){
 5ea:	88 23       	and	r24, r24
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <nRF24L01P_Get_Speed+0x48>
    nRF24L01P->TempBuf[0]=2;
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	81 83       	std	Z+1, r24	; 0x01
  }
  return nRF24L01P->TempBuf[0];
}  
 5f2:	81 81       	ldd	r24, Z+1	; 0x01
 5f4:	08 95       	ret

000005f6 <nRF24L01P_Set_Speed>:

void nRF24L01P_Set_Speed(uint8_t index){
  if(index==0){       //250kbps
 5f6:	88 23       	and	r24, r24
 5f8:	21 f4       	brne	.+8      	; 0x602 <nRF24L01P_Set_Speed+0xc>
    nRF24L01P_ReadModifyWrite(0x06,5,1);
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	65 e0       	ldi	r22, 0x05	; 5
 5fe:	41 e0       	ldi	r20, 0x01	; 1
 600:	05 c0       	rjmp	.+10     	; 0x60c <nRF24L01P_Set_Speed+0x16>
    nRF24L01P_ReadModifyWrite(0x06,3,0);
  }
  else if(index==1){  //1Mbps
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	49 f4       	brne	.+18     	; 0x618 <nRF24L01P_Set_Speed+0x22>
    nRF24L01P_ReadModifyWrite(0x06,5,0);
 606:	86 e0       	ldi	r24, 0x06	; 6
 608:	65 e0       	ldi	r22, 0x05	; 5
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <nRF24L01P_ReadModifyWrite>
    nRF24L01P_ReadModifyWrite(0x06,3,0);
 610:	86 e0       	ldi	r24, 0x06	; 6
 612:	63 e0       	ldi	r22, 0x03	; 3
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	08 c0       	rjmp	.+16     	; 0x628 <nRF24L01P_Set_Speed+0x32>
  }
  else if(index==2){  //2Mbps
    nRF24L01P_ReadModifyWrite(0x06,5,0);
    nRF24L01P_ReadModifyWrite(0x06,3,1);
  }else{              //2Mbps
    nRF24L01P_ReadModifyWrite(0x06,5,0);
 618:	86 e0       	ldi	r24, 0x06	; 6
 61a:	65 e0       	ldi	r22, 0x05	; 5
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <nRF24L01P_ReadModifyWrite>
    nRF24L01P_ReadModifyWrite(0x06,3,1);
 622:	86 e0       	ldi	r24, 0x06	; 6
 624:	63 e0       	ldi	r22, 0x03	; 3
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <nRF24L01P_ReadModifyWrite>
 62c:	08 95       	ret

0000062e <nRF24L01P_Get_Tx_Power>:
  }
}

uint8_t nRF24L01P_Get_Tx_Power(void){
  nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
 62e:	40 91 3d 01 	lds	r20, 0x013D
 632:	50 91 3e 01 	lds	r21, 0x013E
 636:	4f 5f       	subi	r20, 0xFF	; 255
 638:	5f 4f       	sbci	r21, 0xFF	; 255
 63a:	86 e0       	ldi	r24, 0x06	; 6
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	21 e0       	ldi	r18, 0x01	; 1
 640:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]>>=1;
 644:	e0 91 3d 01 	lds	r30, 0x013D
 648:	f0 91 3e 01 	lds	r31, 0x013E
  nRF24L01P->TempBuf[0]&=0x03;
 64c:	81 81       	ldd	r24, Z+1	; 0x01
 64e:	86 95       	lsr	r24
 650:	83 70       	andi	r24, 0x03	; 3
 652:	81 83       	std	Z+1, r24	; 0x01
  return nRF24L01P->TempBuf[0];
}  
 654:	08 95       	ret

00000656 <nRF24L01P_Set_Tx_Power>:

void nRF24L01P_Set_Tx_Power(uint8_t index){
if(index==0){
 656:	88 23       	and	r24, r24
 658:	21 f4       	brne	.+8      	; 0x662 <nRF24L01P_Set_Tx_Power+0xc>
  nRF24L01P_ReadModifyWrite(0x06,2,0);
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	62 e0       	ldi	r22, 0x02	; 2
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	0b c0       	rjmp	.+22     	; 0x678 <nRF24L01P_Set_Tx_Power+0x22>
  nRF24L01P_ReadModifyWrite(0x06,1,0);
 }
else if(index==1){
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	21 f4       	brne	.+8      	; 0x66e <nRF24L01P_Set_Tx_Power+0x18>
  nRF24L01P_ReadModifyWrite(0x06,2,0);
 666:	86 e0       	ldi	r24, 0x06	; 6
 668:	62 e0       	ldi	r22, 0x02	; 2
 66a:	40 e0       	ldi	r20, 0x00	; 0
 66c:	0e c0       	rjmp	.+28     	; 0x68a <nRF24L01P_Set_Tx_Power+0x34>
  nRF24L01P_ReadModifyWrite(0x06,1,1);
 }
else if(index==2){
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	49 f4       	brne	.+18     	; 0x684 <nRF24L01P_Set_Tx_Power+0x2e>
  nRF24L01P_ReadModifyWrite(0x06,2,1);
 672:	86 e0       	ldi	r24, 0x06	; 6
 674:	62 e0       	ldi	r22, 0x02	; 2
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <nRF24L01P_ReadModifyWrite>
  nRF24L01P_ReadModifyWrite(0x06,1,0);
 67c:	86 e0       	ldi	r24, 0x06	; 6
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	08 c0       	rjmp	.+16     	; 0x694 <nRF24L01P_Set_Tx_Power+0x3e>
 }
 else if(index==3){
  nRF24L01P_ReadModifyWrite(0x06,2,1);
  nRF24L01P_ReadModifyWrite(0x06,1,1);
 }else{
  nRF24L01P_ReadModifyWrite(0x06,2,1);
 684:	86 e0       	ldi	r24, 0x06	; 6
 686:	62 e0       	ldi	r22, 0x02	; 2
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <nRF24L01P_ReadModifyWrite>
  nRF24L01P_ReadModifyWrite(0x06,1,1);
 68e:	86 e0       	ldi	r24, 0x06	; 6
 690:	61 e0       	ldi	r22, 0x01	; 1
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <nRF24L01P_ReadModifyWrite>
 698:	08 95       	ret

0000069a <nRF24L01P_Set_Own_Address>:
 }
}

void nRF24L01P_Set_Own_Address(uint8_t addr){
  nRF24L01P->Address.Own=addr;
 69a:	e0 91 3d 01 	lds	r30, 0x013D
 69e:	f0 91 3e 01 	lds	r31, 0x013E
 6a2:	83 83       	std	Z+3, r24	; 0x03
}
 6a4:	08 95       	ret

000006a6 <nRF24L01P_Set_Destination_Address>:

void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
 6a6:	e0 91 3d 01 	lds	r30, 0x013D
 6aa:	f0 91 3e 01 	lds	r31, 0x013E
 6ae:	84 83       	std	Z+4, r24	; 0x04
}
 6b0:	08 95       	ret

000006b2 <nRF24L01P_Set_Receive_Timeout>:

void nRF24L01P_Set_Receive_Timeout(uint16_t val){
  nRF24L01P->Config.RxTimeout=val;
 6b2:	e0 91 3d 01 	lds	r30, 0x013D
 6b6:	f0 91 3e 01 	lds	r31, 0x013E
 6ba:	96 83       	std	Z+6, r25	; 0x06
 6bc:	85 83       	std	Z+5, r24	; 0x05
}
 6be:	08 95       	ret

000006c0 <nRF24L01P_Set_MaxRetransmission>:

void nRF24L01P_Set_MaxRetransmission(uint16_t val){
  nRF24L01P->Config.MaxRetry=val;
 6c0:	e0 91 3d 01 	lds	r30, 0x013D
 6c4:	f0 91 3e 01 	lds	r31, 0x013E
 6c8:	93 87       	std	Z+11, r25	; 0x0b
 6ca:	82 87       	std	Z+10, r24	; 0x0a
}
 6cc:	08 95       	ret

000006ce <nRF24L01P_Deep_Sleep>:

void nRF24L01P_Deep_Sleep(void){
  if(nRF24L01P->Mode!=0x00){
 6ce:	e0 91 3d 01 	lds	r30, 0x013D
 6d2:	f0 91 3e 01 	lds	r31, 0x013E
 6d6:	80 81       	ld	r24, Z
 6d8:	88 23       	and	r24, r24
 6da:	21 f0       	breq	.+8      	; 0x6e4 <nRF24L01P_Deep_Sleep+0x16>
    nRF24L01P_Set_Mode_Sleep();
 6dc:	0e 94 3c 02 	call	0x478	; 0x478 <nRF24L01P_Set_Mode_Sleep>
    nRF24L01P_Disable();
 6e0:	0e 94 48 01 	call	0x290	; 0x290 <nRF24L01P_Disable>
 6e4:	08 95       	ret

000006e6 <nRF24L01P_WakeUp>:
  }
}


void nRF24L01P_WakeUp(void){
  if(nRF24L01P->Mode==0x00){
 6e6:	e0 91 3d 01 	lds	r30, 0x013D
 6ea:	f0 91 3e 01 	lds	r31, 0x013E
 6ee:	80 81       	ld	r24, Z
 6f0:	88 23       	and	r24, r24
 6f2:	21 f4       	brne	.+8      	; 0x6fc <nRF24L01P_WakeUp+0x16>
    nRF24L01P_Enable();
 6f4:	0e 94 41 01 	call	0x282	; 0x282 <nRF24L01P_Enable>
    nRF24L01P_Set_Mode_Rx();
 6f8:	0e 94 65 02 	call	0x4ca	; 0x4ca <nRF24L01P_Set_Mode_Rx>
 6fc:	08 95       	ret

000006fe <nRF24L01P_Init>:
  }
}

void nRF24L01P_Init(void){
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
  nRF24L01P_Struct_Init();
 702:	0e 94 f7 00 	call	0x1ee	; 0x1ee <nRF24L01P_Struct_Init>
  nRF24L01P_Enable();
 706:	0e 94 41 01 	call	0x282	; 0x282 <nRF24L01P_Enable>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 70a:	e0 91 3d 01 	lds	r30, 0x013D
 70e:	f0 91 3e 01 	lds	r31, 0x013E
 712:	11 82       	std	Z+1, r1	; 0x01
 714:	31 96       	adiw	r30, 0x01	; 1
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	af 01       	movw	r20, r30
 71c:	21 e0       	ldi	r18, 0x01	; 1
 71e:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x01,0,nRF24L01P->TempBuf,1);
 722:	e0 91 3d 01 	lds	r30, 0x013D
 726:	f0 91 3e 01 	lds	r31, 0x013E
 72a:	11 82       	std	Z+1, r1	; 0x01
 72c:	31 96       	adiw	r30, 0x01	; 1
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	af 01       	movw	r20, r30
 734:	21 e0       	ldi	r18, 0x01	; 1
 736:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x03;  nRF24L01P_ReadWrite_Register(0x02,0,nRF24L01P->TempBuf,1);
 73a:	e0 91 3d 01 	lds	r30, 0x013D
 73e:	f0 91 3e 01 	lds	r31, 0x013E
 742:	83 e0       	ldi	r24, 0x03	; 3
 744:	81 83       	std	Z+1, r24	; 0x01
 746:	31 96       	adiw	r30, 0x01	; 1
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	af 01       	movw	r20, r30
 74e:	21 e0       	ldi	r18, 0x01	; 1
 750:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x01;  nRF24L01P_ReadWrite_Register(0x03,0,nRF24L01P->TempBuf,1);
 754:	e0 91 3d 01 	lds	r30, 0x013D
 758:	f0 91 3e 01 	lds	r31, 0x013E
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	81 83       	std	Z+1, r24	; 0x01
 760:	31 96       	adiw	r30, 0x01	; 1
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	af 01       	movw	r20, r30
 768:	21 e0       	ldi	r18, 0x01	; 1
 76a:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x04,0,nRF24L01P->TempBuf,1);
 76e:	e0 91 3d 01 	lds	r30, 0x013D
 772:	f0 91 3e 01 	lds	r31, 0x013E
 776:	11 82       	std	Z+1, r1	; 0x01
 778:	31 96       	adiw	r30, 0x01	; 1
 77a:	84 e0       	ldi	r24, 0x04	; 4
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	af 01       	movw	r20, r30
 780:	21 e0       	ldi	r18, 0x01	; 1
 782:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x02;  nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
 786:	e0 91 3d 01 	lds	r30, 0x013D
 78a:	f0 91 3e 01 	lds	r31, 0x013E
 78e:	82 e0       	ldi	r24, 0x02	; 2
 790:	81 83       	std	Z+1, r24	; 0x01
 792:	31 96       	adiw	r30, 0x01	; 1
 794:	85 e0       	ldi	r24, 0x05	; 5
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	af 01       	movw	r20, r30
 79a:	21 e0       	ldi	r18, 0x01	; 1
 79c:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x26;  nRF24L01P_ReadWrite_Register(0x06,0,nRF24L01P->TempBuf,1); 
 7a0:	e0 91 3d 01 	lds	r30, 0x013D
 7a4:	f0 91 3e 01 	lds	r31, 0x013E
 7a8:	86 e2       	ldi	r24, 0x26	; 38
 7aa:	81 83       	std	Z+1, r24	; 0x01
 7ac:	31 96       	adiw	r30, 0x01	; 1
 7ae:	86 e0       	ldi	r24, 0x06	; 6
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	af 01       	movw	r20, r30
 7b4:	21 e0       	ldi	r18, 0x01	; 1
 7b6:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x70;  nRF24L01P_ReadWrite_Register(0x07,0,nRF24L01P->TempBuf,1);
 7ba:	e0 91 3d 01 	lds	r30, 0x013D
 7be:	f0 91 3e 01 	lds	r31, 0x013E
 7c2:	80 e7       	ldi	r24, 0x70	; 112
 7c4:	81 83       	std	Z+1, r24	; 0x01
 7c6:	31 96       	adiw	r30, 0x01	; 1
 7c8:	87 e0       	ldi	r24, 0x07	; 7
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	af 01       	movw	r20, r30
 7ce:	21 e0       	ldi	r18, 0x01	; 1
 7d0:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=nRF24L01P_PACKET_LEN;  
 7d4:	e0 91 3d 01 	lds	r30, 0x013D
 7d8:	f0 91 3e 01 	lds	r31, 0x013E
 7dc:	10 e1       	ldi	r17, 0x10	; 16
 7de:	11 83       	std	Z+1, r17	; 0x01
  nRF24L01P_ReadWrite_Register(0x11,0,nRF24L01P->TempBuf,1);
 7e0:	31 96       	adiw	r30, 0x01	; 1
 7e2:	81 e1       	ldi	r24, 0x11	; 17
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	af 01       	movw	r20, r30
 7e8:	21 e0       	ldi	r18, 0x01	; 1
 7ea:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=nRF24L01P_PACKET_LEN;  
 7ee:	e0 91 3d 01 	lds	r30, 0x013D
 7f2:	f0 91 3e 01 	lds	r31, 0x013E
 7f6:	11 83       	std	Z+1, r17	; 0x01
  nRF24L01P_ReadWrite_Register(0x12,0,nRF24L01P->TempBuf,1);
 7f8:	31 96       	adiw	r30, 0x01	; 1
 7fa:	82 e1       	ldi	r24, 0x12	; 18
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	af 01       	movw	r20, r30
 800:	21 e0       	ldi	r18, 0x01	; 1
 802:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x1C,0,nRF24L01P->TempBuf,1);
 806:	e0 91 3d 01 	lds	r30, 0x013D
 80a:	f0 91 3e 01 	lds	r31, 0x013E
 80e:	11 82       	std	Z+1, r1	; 0x01
 810:	31 96       	adiw	r30, 0x01	; 1
 812:	8c e1       	ldi	r24, 0x1C	; 28
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	af 01       	movw	r20, r30
 818:	21 e0       	ldi	r18, 0x01	; 1
 81a:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x1D,0,nRF24L01P->TempBuf,1);
 81e:	e0 91 3d 01 	lds	r30, 0x013D
 822:	f0 91 3e 01 	lds	r31, 0x013E
 826:	11 82       	std	Z+1, r1	; 0x01
 828:	31 96       	adiw	r30, 0x01	; 1
 82a:	8d e1       	ldi	r24, 0x1D	; 29
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	af 01       	movw	r20, r30
 830:	21 e0       	ldi	r18, 0x01	; 1
 832:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x10,0,(uint8_t*)"ACK00",5);
 836:	00 e0       	ldi	r16, 0x00	; 0
 838:	11 e0       	ldi	r17, 0x01	; 1
 83a:	80 e1       	ldi	r24, 0x10	; 16
 83c:	60 e0       	ldi	r22, 0x00	; 0
 83e:	a8 01       	movw	r20, r16
 840:	25 e0       	ldi	r18, 0x05	; 5
 842:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0A,0,(uint8_t*)"ACK00",5);
 846:	8a e0       	ldi	r24, 0x0A	; 10
 848:	60 e0       	ldi	r22, 0x00	; 0
 84a:	a8 01       	movw	r20, r16
 84c:	25 e0       	ldi	r18, 0x05	; 5
 84e:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0B,0,(uint8_t*)"PIPE1",5);
 852:	8b e0       	ldi	r24, 0x0B	; 11
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	46 e0       	ldi	r20, 0x06	; 6
 858:	51 e0       	ldi	r21, 0x01	; 1
 85a:	25 e0       	ldi	r18, 0x05	; 5
 85c:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0C,0,(uint8_t*)"PIPE2",5);
 860:	8c e0       	ldi	r24, 0x0C	; 12
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	4c e0       	ldi	r20, 0x0C	; 12
 866:	51 e0       	ldi	r21, 0x01	; 1
 868:	25 e0       	ldi	r18, 0x05	; 5
 86a:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0D,0,(uint8_t*)"PIPE3",5);
 86e:	8d e0       	ldi	r24, 0x0D	; 13
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	42 e1       	ldi	r20, 0x12	; 18
 874:	51 e0       	ldi	r21, 0x01	; 1
 876:	25 e0       	ldi	r18, 0x05	; 5
 878:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0E,0,(uint8_t*)"PIPE4",5);
 87c:	8e e0       	ldi	r24, 0x0E	; 14
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	48 e1       	ldi	r20, 0x18	; 24
 882:	51 e0       	ldi	r21, 0x01	; 1
 884:	25 e0       	ldi	r18, 0x05	; 5
 886:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0F,0,(uint8_t*)"PIPE5",5);
 88a:	8f e0       	ldi	r24, 0x0F	; 15
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	4e e1       	ldi	r20, 0x1E	; 30
 890:	51 e0       	ldi	r21, 0x01	; 1
 892:	25 e0       	ldi	r18, 0x05	; 5
 894:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF24L01P_ReadWrite_Register>
void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
}

void nRF24L01P_Set_Receive_Timeout(uint16_t val){
  nRF24L01P->Config.RxTimeout=val;
 898:	e0 91 3d 01 	lds	r30, 0x013D
 89c:	f0 91 3e 01 	lds	r31, 0x013E
 8a0:	80 e2       	ldi	r24, 0x20	; 32
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	96 83       	std	Z+6, r25	; 0x06
 8a6:	85 83       	std	Z+5, r24	; 0x05
  nRF24L01P_ReadWrite_Register(0x0C,0,(uint8_t*)"PIPE2",5);
  nRF24L01P_ReadWrite_Register(0x0D,0,(uint8_t*)"PIPE3",5);
  nRF24L01P_ReadWrite_Register(0x0E,0,(uint8_t*)"PIPE4",5);
  nRF24L01P_ReadWrite_Register(0x0F,0,(uint8_t*)"PIPE5",5);
  nRF24L01P_Set_Receive_Timeout(32);
  nRF24L01P_Set_Mode_Sleep();
 8a8:	0e 94 3c 02 	call	0x478	; 0x478 <nRF24L01P_Set_Mode_Sleep>
}
 8ac:	1f 91       	pop	r17
 8ae:	0f 91       	pop	r16
 8b0:	08 95       	ret

000008b2 <nRF24L01P_Transmit_Basic>:

void nRF24L01P_Transmit_Basic(uint8_t *buf, uint8_t len){
 8b2:	ff 92       	push	r15
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	8c 01       	movw	r16, r24
 8ba:	f6 2e       	mov	r15, r22
  nRF24L01P_Set_Mode_Tx();
 8bc:	0e 94 4e 02 	call	0x49c	; 0x49c <nRF24L01P_Set_Mode_Tx>
  buf[nRF24L01P_PACKET_LEN-5]=nRF24L01P->Address.Own;
 8c0:	e0 91 3d 01 	lds	r30, 0x013D
 8c4:	f0 91 3e 01 	lds	r31, 0x013E
 8c8:	83 81       	ldd	r24, Z+3	; 0x03
 8ca:	f8 01       	movw	r30, r16
 8cc:	83 87       	std	Z+11, r24	; 0x0b
  buf[nRF24L01P_PACKET_LEN-4]=nRF24L01P->Address.Dest;
 8ce:	e0 91 3d 01 	lds	r30, 0x013D
 8d2:	f0 91 3e 01 	lds	r31, 0x013E
 8d6:	84 81       	ldd	r24, Z+4	; 0x04
 8d8:	f8 01       	movw	r30, r16
 8da:	84 87       	std	Z+12, r24	; 0x0c
  buf[nRF24L01P_PACKET_LEN-3]=len;
 8dc:	f5 86       	std	Z+13, r15	; 0x0d
  uint16_t temp=nRF24L01P_Calcuate_CRC_Block(buf, 30);
 8de:	c8 01       	movw	r24, r16
 8e0:	6e e1       	ldi	r22, 0x1E	; 30
 8e2:	0e 94 75 01 	call	0x2ea	; 0x2ea <nRF24L01P_Calcuate_CRC_Block>
  buf[nRF24L01P_PACKET_LEN-2]=(temp & 0xFF00)>>8;
 8e6:	f8 01       	movw	r30, r16
 8e8:	96 87       	std	Z+14, r25	; 0x0e
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
 8ea:	87 87       	std	Z+15, r24	; 0x0f
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
 8ec:	c8 01       	movw	r24, r16
 8ee:	0e 94 ca 01 	call	0x394	; 0x394 <nRF24L01P_Write_Data_To_Transmit_Buffer>
void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 8f2:	5f 9a       	sbi	0x0b, 7	; 11
  uint16_t temp=nRF24L01P_Calcuate_CRC_Block(buf, 30);
  buf[nRF24L01P_PACKET_LEN-2]=(temp & 0xFF00)>>8;
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
  nRF24L01P_CE_High();
  nRF24L01P_Wait_Till_Transmission_Completes();
 8f4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <nRF24L01P_Wait_Till_Transmission_Completes>
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 8f8:	5f 98       	cbi	0x0b, 7	; 11
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
  nRF24L01P_CE_High();
  nRF24L01P_Wait_Till_Transmission_Completes();
  nRF24L01P_CE_Low();
}
 8fa:	1f 91       	pop	r17
 8fc:	0f 91       	pop	r16
 8fe:	ff 90       	pop	r15
 900:	08 95       	ret

00000902 <nRF24L01P_Recieve_Basic>:


uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
 902:	cf 92       	push	r12
 904:	df 92       	push	r13
 906:	ef 92       	push	r14
 908:	ff 92       	push	r15
 90a:	0f 93       	push	r16
 90c:	1f 93       	push	r17
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	7c 01       	movw	r14, r24
  uint8_t sts=0;
  nRF24L01P->Config.RxTicks=0;
 914:	e0 91 3d 01 	lds	r30, 0x013D
 918:	f0 91 3e 01 	lds	r31, 0x013E
 91c:	10 86       	std	Z+8, r1	; 0x08
 91e:	17 82       	std	Z+7, r1	; 0x07
  nRF24L01P_Set_Mode_Rx();
 920:	0e 94 65 02 	call	0x4ca	; 0x4ca <nRF24L01P_Set_Mode_Rx>
 924:	7c e2       	ldi	r23, 0x2C	; 44
 926:	c7 2e       	mov	r12, r23
 928:	71 e0       	ldi	r23, 0x01	; 1
 92a:	d7 2e       	mov	r13, r23
 92c:	23 c0       	rjmp	.+70     	; 0x974 <nRF24L01P_Recieve_Basic+0x72>
  while(nRF24L01P->Config.RxTicks < nRF24L01P->Config.RxTimeout){
    if(nRF24L01P_Receive_Buffer_Not_Empty()){
 92e:	0e 94 0c 02 	call	0x418	; 0x418 <nRF24L01P_Receive_Buffer_Not_Empty>
 932:	88 23       	and	r24, r24
 934:	99 f0       	breq	.+38     	; 0x95c <nRF24L01P_Recieve_Basic+0x5a>
      nRF24L01P_Read_Data_From_Receive_Buffer(buf);
 936:	c7 01       	movw	r24, r14
 938:	0e 94 05 02 	call	0x40a	; 0x40a <nRF24L01P_Read_Data_From_Receive_Buffer>
	  uint16_t rec_crc=buf[nRF24L01P_PACKET_LEN-2];
	  rec_crc<<=8;
 93c:	f7 01       	movw	r30, r14
 93e:	d6 85       	ldd	r29, Z+14	; 0x0e
 940:	c0 e0       	ldi	r28, 0x00	; 0
	  rec_crc|=buf[nRF24L01P_PACKET_LEN-1];
 942:	07 85       	ldd	r16, Z+15	; 0x0f
 944:	10 e0       	ldi	r17, 0x00	; 0
 946:	0c 2b       	or	r16, r28
 948:	1d 2b       	or	r17, r29
      uint16_t calc_crc=nRF24L01P_Calcuate_CRC_Block(buf, nRF24L01P_PACKET_LEN-2);
 94a:	c7 01       	movw	r24, r14
 94c:	6e e0       	ldi	r22, 0x0E	; 14
 94e:	0e 94 75 01 	call	0x2ea	; 0x2ea <nRF24L01P_Calcuate_CRC_Block>
      if(rec_crc == calc_crc){
 952:	08 17       	cp	r16, r24
 954:	19 07       	cpc	r17, r25
 956:	11 f4       	brne	.+4      	; 0x95c <nRF24L01P_Recieve_Basic+0x5a>
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	18 c0       	rjmp	.+48     	; 0x98c <nRF24L01P_Recieve_Basic+0x8a>
 95c:	c6 01       	movw	r24, r12
 95e:	01 97       	sbiw	r24, 0x01	; 1
 960:	f1 f7       	brne	.-4      	; 0x95e <nRF24L01P_Recieve_Basic+0x5c>
		sts=1;
		break;
	  }
    }
    _delay_us(100);
    nRF24L01P->Config.RxTicks++;
 962:	e0 91 3d 01 	lds	r30, 0x013D
 966:	f0 91 3e 01 	lds	r31, 0x013E
 96a:	87 81       	ldd	r24, Z+7	; 0x07
 96c:	90 85       	ldd	r25, Z+8	; 0x08
 96e:	01 96       	adiw	r24, 0x01	; 1
 970:	90 87       	std	Z+8, r25	; 0x08
 972:	87 83       	std	Z+7, r24	; 0x07

uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P->Config.RxTicks=0;
  nRF24L01P_Set_Mode_Rx();
  while(nRF24L01P->Config.RxTicks < nRF24L01P->Config.RxTimeout){
 974:	e0 91 3d 01 	lds	r30, 0x013D
 978:	f0 91 3e 01 	lds	r31, 0x013E
 97c:	27 81       	ldd	r18, Z+7	; 0x07
 97e:	30 85       	ldd	r19, Z+8	; 0x08
 980:	85 81       	ldd	r24, Z+5	; 0x05
 982:	96 81       	ldd	r25, Z+6	; 0x06
 984:	28 17       	cp	r18, r24
 986:	39 07       	cpc	r19, r25
 988:	90 f2       	brcs	.-92     	; 0x92e <nRF24L01P_Recieve_Basic+0x2c>
 98a:	80 e0       	ldi	r24, 0x00	; 0
    }
    _delay_us(100);
    nRF24L01P->Config.RxTicks++;
  }
  return sts;
}
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	ff 90       	pop	r15
 996:	ef 90       	pop	r14
 998:	df 90       	pop	r13
 99a:	cf 90       	pop	r12
 99c:	08 95       	ret

0000099e <nRF24L01P_Transmit_With_ACK>:

uint8_t nRF24L01P_Transmit_With_ACK(uint8_t *buf, uint8_t len){
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	ec 01       	movw	r28, r24
  uint8_t sts=0;
  if(nRF24L01P->Packet.ACKReq){
 9a4:	e0 91 3d 01 	lds	r30, 0x013D
 9a8:	f0 91 3e 01 	lds	r31, 0x013E
 9ac:	87 85       	ldd	r24, Z+15	; 0x0f
 9ae:	88 23       	and	r24, r24
 9b0:	19 f0       	breq	.+6      	; 0x9b8 <nRF24L01P_Transmit_With_ACK+0x1a>
    buf[nRF24L01P_PACKET_LEN-6]=1;
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	8a 87       	std	Y+10, r24	; 0x0a
 9b6:	01 c0       	rjmp	.+2      	; 0x9ba <nRF24L01P_Transmit_With_ACK+0x1c>
  }else{
    buf[nRF24L01P_PACKET_LEN-6]=0;
 9b8:	1a 86       	std	Y+10, r1	; 0x0a
  }
  nRF24L01P_Transmit_Basic(buf, len);
 9ba:	ce 01       	movw	r24, r28
 9bc:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nRF24L01P_Transmit_Basic>
  if(nRF24L01P_Recieve_Basic(buf)){
 9c0:	ce 01       	movw	r24, r28
 9c2:	0e 94 81 04 	call	0x902	; 0x902 <nRF24L01P_Recieve_Basic>
 9c6:	81 11       	cpse	r24, r1
 9c8:	81 e0       	ldi	r24, 0x01	; 1
    //if( (nRF24L01P->Address.Own == buf[28])){
      sts=1;
    //}
  }
  return sts;
}
 9ca:	df 91       	pop	r29
 9cc:	cf 91       	pop	r28
 9ce:	08 95       	ret

000009d0 <nRF24L01P_Recieve_With_ACK>:


uint8_t nRF24L01P_Recieve_With_ACK(uint8_t *buf){
 9d0:	cf 93       	push	r28
 9d2:	df 93       	push	r29
 9d4:	ec 01       	movw	r28, r24
  uint8_t sts=0;
  if(nRF24L01P_Recieve_Basic(buf)){
 9d6:	0e 94 81 04 	call	0x902	; 0x902 <nRF24L01P_Recieve_Basic>
 9da:	88 23       	and	r24, r24
 9dc:	b9 f0       	breq	.+46     	; 0xa0c <nRF24L01P_Recieve_With_ACK+0x3c>
    if((buf[nRF24L01P_PACKET_LEN-6]==1) && (nRF24L01P->Address.Own == buf[nRF24L01P_PACKET_LEN-4])){
 9de:	8a 85       	ldd	r24, Y+10	; 0x0a
 9e0:	81 30       	cpi	r24, 0x01	; 1
 9e2:	a1 f4       	brne	.+40     	; 0xa0c <nRF24L01P_Recieve_With_ACK+0x3c>
 9e4:	e0 91 3d 01 	lds	r30, 0x013D
 9e8:	f0 91 3e 01 	lds	r31, 0x013E
 9ec:	93 81       	ldd	r25, Z+3	; 0x03
 9ee:	8c 85       	ldd	r24, Y+12	; 0x0c
 9f0:	98 17       	cp	r25, r24
 9f2:	61 f4       	brne	.+24     	; 0xa0c <nRF24L01P_Recieve_With_ACK+0x3c>
 9f4:	8c ed       	ldi	r24, 0xDC	; 220
 9f6:	95 e0       	ldi	r25, 0x05	; 5
 9f8:	01 97       	sbiw	r24, 0x01	; 1
 9fa:	f1 f7       	brne	.-4      	; 0x9f8 <nRF24L01P_Recieve_With_ACK+0x28>
void nRF24L01P_Set_Own_Address(uint8_t addr){
  nRF24L01P->Address.Own=addr;
}

void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
 9fc:	8b 85       	ldd	r24, Y+11	; 0x0b
 9fe:	84 83       	std	Z+4, r24	; 0x04
  uint8_t sts=0;
  if(nRF24L01P_Recieve_Basic(buf)){
    if((buf[nRF24L01P_PACKET_LEN-6]==1) && (nRF24L01P->Address.Own == buf[nRF24L01P_PACKET_LEN-4])){
      _delay_us(500);
	  nRF24L01P_Set_Destination_Address(buf[nRF24L01P_PACKET_LEN-5]);
      nRF24L01P_Transmit_Basic(buf, 2);
 a00:	ce 01       	movw	r24, r28
 a02:	62 e0       	ldi	r22, 0x02	; 2
 a04:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nRF24L01P_Transmit_Basic>
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	01 c0       	rjmp	.+2      	; 0xa0e <nRF24L01P_Recieve_With_ACK+0x3e>
 a0c:	80 e0       	ldi	r24, 0x00	; 0
      sts=1;
    }
  }
  return sts;
}
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	08 95       	ret

00000a14 <_exit>:
 a14:	f8 94       	cli

00000a16 <__stop_program>:
 a16:	ff cf       	rjmp	.-2      	; 0xa16 <__stop_program>
