
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000141a  000014ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000141a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800106  00800106  000014b4  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000acf  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002188  00000000  00000000  00002063  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007eb  00000000  00000000  000041eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001956  00000000  00000000  000049d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000700  00000000  00000000  0000632c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bb8  00000000  00000000  00006a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c1c  00000000  00000000  000075e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00008200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e1       	ldi	r30, 0x1A	; 26
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 30       	cpi	r26, 0x06	; 6
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a6 e0       	ldi	r26, 0x06	; 6
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 33       	cpi	r26, 0x38	; 56
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "eeprom.h"
#include "vsns.h"
#include "led.h"


int main(void){
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	df 93       	push	r29
      b4:	cf 93       	push	r28
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	a0 97       	sbiw	r28, 0x20	; 32
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61

  DDRD  |= (1<<4);
      c6:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      c8:	5c 98       	cbi	0x0b, 4	; 11
  
  DDRD&=~((1<<3)|(1<<2));
      ca:	8a b1       	in	r24, 0x0a	; 10
      cc:	83 7f       	andi	r24, 0xF3	; 243
      ce:	8a b9       	out	0x0a, r24	; 10
  PORTD|=(1<<3)|(1<<2);
      d0:	8b b1       	in	r24, 0x0b	; 11
      d2:	8c 60       	ori	r24, 0x0C	; 12
      d4:	8b b9       	out	0x0b, r24	; 11
  
  nrf24l01p_init();
      d6:	0e 94 31 06 	call	0xc62	; 0xc62 <nrf24l01p_init>
  Sleep_Init();
      da:	0e 94 c9 00 	call	0x192	; 0x192 <Sleep_Init>
  Vsns_Init();
      de:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Vsns_Init>
  led_init();
      e2:	0e 94 a8 09 	call	0x1350	; 0x1350 <led_init>
  while(1){
	    
	    led_on();
		uint8_t buf[32];
		uint16_t val=Vsns_V_Read();
		dataconv_dword_to_num(val, buf, 0);
      e6:	8e 01       	movw	r16, r28
      e8:	0f 5f       	subi	r16, 0xFF	; 255
      ea:	1f 4f       	sbci	r17, 0xFF	; 255
		buf[dataconv_dword_to_num_len()]='\r';
      ec:	2d e0       	ldi	r18, 0x0D	; 13
      ee:	c2 2e       	mov	r12, r18
		buf[dataconv_dword_to_num_len()+1]='\n';
      f0:	92 e0       	ldi	r25, 0x02	; 2
      f2:	e9 2e       	mov	r14, r25
      f4:	f1 2c       	mov	r15, r1
      f6:	ec 0e       	add	r14, r28
      f8:	fd 1e       	adc	r15, r29
      fa:	8a e0       	ldi	r24, 0x0A	; 10
      fc:	d8 2e       	mov	r13, r24
  Vsns_Init();
  led_init();
  
  while(1){
	    
	    led_on();
      fe:	0e 94 ab 09 	call	0x1356	; 0x1356 <led_on>
		uint8_t buf[32];
		uint16_t val=Vsns_V_Read();
     102:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Vsns_V_Read>
		dataconv_dword_to_num(val, buf, 0);
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	bc 01       	movw	r22, r24
     10c:	cd 01       	movw	r24, r26
     10e:	a8 01       	movw	r20, r16
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	0e 94 5e 08 	call	0x10bc	; 0x10bc <dataconv_dword_to_num>
		buf[dataconv_dword_to_num_len()]='\r';
     116:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <dataconv_dword_to_num_len>
     11a:	f8 01       	movw	r30, r16
     11c:	e8 0f       	add	r30, r24
     11e:	f1 1d       	adc	r31, r1
     120:	c0 82       	st	Z, r12
		buf[dataconv_dword_to_num_len()+1]='\n';
     122:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <dataconv_dword_to_num_len>
     126:	f7 01       	movw	r30, r14
     128:	e8 0f       	add	r30, r24
     12a:	f1 1d       	adc	r31, r1
     12c:	d0 82       	st	Z, r13
	    nrf24l01p_tx_basic(buf,dataconv_dword_to_num_len()+2);
     12e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <dataconv_dword_to_num_len>
     132:	68 2f       	mov	r22, r24
     134:	6e 5f       	subi	r22, 0xFE	; 254
     136:	c8 01       	movw	r24, r16
     138:	0e 94 ce 04 	call	0x99c	; 0x99c <nrf24l01p_tx_basic>
	    nrf24l01p_mode_set(0);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 b7 03 	call	0x76e	; 0x76e <nrf24l01p_mode_set>
	    led_off();
     142:	0e 94 ad 09 	call	0x135a	; 0x135a <led_off>
	    Deep_Sleep();
     146:	0e 94 a6 00 	call	0x14c	; 0x14c <Deep_Sleep>
     14a:	d9 cf       	rjmp	.-78     	; 0xfe <main+0x58>

0000014c <Deep_Sleep>:
#include <avr/sleep.h>

volatile uint32_t WDT_Ticks=0;

void Deep_Sleep(void){
  sleep_enable();
     14c:	83 b7       	in	r24, 0x33	; 51
     14e:	81 60       	ori	r24, 0x01	; 1
     150:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
     152:	85 b7       	in	r24, 0x35	; 53
     154:	80 66       	ori	r24, 0x60	; 96
     156:	85 bf       	out	0x35, r24	; 53
     158:	8f 7d       	andi	r24, 0xDF	; 223
     15a:	85 bf       	out	0x35, r24	; 53
  sei();
     15c:	78 94       	sei
  sleep_cpu();
     15e:	88 95       	sleep
  sleep_disable();
     160:	83 b7       	in	r24, 0x33	; 51
     162:	8e 7f       	andi	r24, 0xFE	; 254
     164:	83 bf       	out	0x33, r24	; 51
}
     166:	08 95       	ret

00000168 <ADC_Disable>:

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
     168:	ea e7       	ldi	r30, 0x7A	; 122
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	8f 77       	andi	r24, 0x7F	; 127
     170:	80 83       	st	Z, r24
}
     172:	08 95       	ret

00000174 <Analog_Comparator_Disable>:

void Analog_Comparator_Disable(void){
  ACSR   |= (1<<ACD) ;
     174:	80 b7       	in	r24, 0x30	; 48
     176:	80 68       	ori	r24, 0x80	; 128
     178:	80 bf       	out	0x30, r24	; 48
}
     17a:	08 95       	ret

0000017c <WDT_Get_Ticks>:

uint32_t WDT_Get_Ticks(void){
  return WDT_Ticks;
     17c:	20 91 06 01 	lds	r18, 0x0106
     180:	30 91 07 01 	lds	r19, 0x0107
     184:	40 91 08 01 	lds	r20, 0x0108
     188:	50 91 09 01 	lds	r21, 0x0109
}
     18c:	b9 01       	movw	r22, r18
     18e:	ca 01       	movw	r24, r20
     190:	08 95       	ret

00000192 <Sleep_Init>:


void Sleep_Init(void){
  cli();
     192:	f8 94       	cli
  WDTCSR=(1<<WDCE)|(1<<WDE);
     194:	e0 e6       	ldi	r30, 0x60	; 96
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	88 e1       	ldi	r24, 0x18	; 24
     19a:	80 83       	st	Z, r24
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
     19c:	86 e4       	ldi	r24, 0x46	; 70
     19e:	80 83       	st	Z, r24
  sei();
     1a0:	78 94       	sei
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     1a2:	83 b7       	in	r24, 0x33	; 51
     1a4:	81 7f       	andi	r24, 0xF1	; 241
     1a6:	84 60       	ori	r24, 0x04	; 4
     1a8:	83 bf       	out	0x33, r24	; 51
  sleep_cpu();
  sleep_disable();
}

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
     1aa:	ea e7       	ldi	r30, 0x7A	; 122
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	8f 77       	andi	r24, 0x7F	; 127
     1b2:	80 83       	st	Z, r24
}

void Analog_Comparator_Disable(void){
  ACSR   |= (1<<ACD) ;
     1b4:	80 b7       	in	r24, 0x30	; 48
     1b6:	80 68       	ori	r24, 0x80	; 128
     1b8:	80 bf       	out	0x30, r24	; 48
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
  sei();
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ADC_Disable();
  Analog_Comparator_Disable();
}
     1ba:	08 95       	ret

000001bc <__vector_6>:

ISR(WDT_vect){
     1bc:	1f 92       	push	r1
     1be:	0f 92       	push	r0
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	0f 92       	push	r0
     1c4:	11 24       	eor	r1, r1
     1c6:	8f 93       	push	r24
     1c8:	9f 93       	push	r25
     1ca:	af 93       	push	r26
     1cc:	bf 93       	push	r27
     1ce:	ef 93       	push	r30
     1d0:	ff 93       	push	r31
  WDTCSR|=(1<<WDIE);
     1d2:	e0 e6       	ldi	r30, 0x60	; 96
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
  WDT_Ticks++;
     1dc:	80 91 06 01 	lds	r24, 0x0106
     1e0:	90 91 07 01 	lds	r25, 0x0107
     1e4:	a0 91 08 01 	lds	r26, 0x0108
     1e8:	b0 91 09 01 	lds	r27, 0x0109
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	a1 1d       	adc	r26, r1
     1f0:	b1 1d       	adc	r27, r1
     1f2:	80 93 06 01 	sts	0x0106, r24
     1f6:	90 93 07 01 	sts	0x0107, r25
     1fa:	a0 93 08 01 	sts	0x0108, r26
     1fe:	b0 93 09 01 	sts	0x0109, r27
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <nrf24l01p_struct_init>:


/* initialize structure of the driver */

void nrf24l01p_struct_init(void){
  nrf24l01p.mode = 0x00;
     218:	10 92 0d 01 	sts	0x010D, r1
  nrf24l01p.commen = 0x01;
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	90 93 0e 01 	sts	0x010E, r25
  nrf24l01p.tempbuf[0] = 0x00;
     222:	10 92 0f 01 	sts	0x010F, r1
  nrf24l01p.tempbuf[1] = 0x00;
     226:	10 92 10 01 	sts	0x0110, r1
  nrf24l01p.address.own = 0x01;
     22a:	90 93 11 01 	sts	0x0111, r25
  nrf24l01p.address.dest = 0x02;
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	80 93 12 01 	sts	0x0112, r24
  nrf24l01p.config.rxticks = 0;
     234:	10 92 16 01 	sts	0x0116, r1
     238:	10 92 15 01 	sts	0x0115, r1
  nrf24l01p.config.rxtimeout = 10;
     23c:	2a e0       	ldi	r18, 0x0A	; 10
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	30 93 14 01 	sts	0x0114, r19
     244:	20 93 13 01 	sts	0x0113, r18
  nrf24l01p.config.maxdatalen = 20;
     248:	84 e1       	ldi	r24, 0x14	; 20
     24a:	80 93 17 01 	sts	0x0117, r24
  nrf24l01p.config.maxretry = 10;
     24e:	30 93 19 01 	sts	0x0119, r19
     252:	20 93 18 01 	sts	0x0118, r18
  nrf24l01p.config.retryoccured = 0;
     256:	10 92 1b 01 	sts	0x011B, r1
     25a:	10 92 1a 01 	sts	0x011A, r1
  nrf24l01p.packet.txpid = 0x01;
     25e:	90 93 1c 01 	sts	0x011C, r25
  nrf24l01p.packet.rxpid = 0x00;
     262:	10 92 1d 01 	sts	0x011D, r1
  nrf24l01p.packet.lastrxpid = 0x00;
     266:	10 92 1e 01 	sts	0x011E, r1
  nrf24l01p.packet.ackreq = 1;
     26a:	90 93 1f 01 	sts	0x011F, r25
  nrf24l01p.blocks.remaining = 0;
     26e:	10 92 20 01 	sts	0x0120, r1
  nrf24l01p.blocks.failedpos = 0;
     272:	10 92 21 01 	sts	0x0121, r1
  nrf24l01p.spacealloc.crclsb = nRF24L01P_PACKET_LEN-1;
     276:	8f e1       	ldi	r24, 0x1F	; 31
     278:	80 93 23 01 	sts	0x0123, r24
  nrf24l01p.spacealloc.crcmsb = nRF24L01P_PACKET_LEN-2;
     27c:	8e e1       	ldi	r24, 0x1E	; 30
     27e:	80 93 22 01 	sts	0x0122, r24
  nrf24l01p.spacealloc.crclen = nRF24L01P_PACKET_LEN-2;
     282:	80 93 29 01 	sts	0x0129, r24
  nrf24l01p.spacealloc.len = nRF24L01P_PACKET_LEN-3;
     286:	8d e1       	ldi	r24, 0x1D	; 29
     288:	80 93 24 01 	sts	0x0124, r24
  nrf24l01p.spacealloc.dest = nRF24L01P_PACKET_LEN-4;
     28c:	8c e1       	ldi	r24, 0x1C	; 28
     28e:	80 93 25 01 	sts	0x0125, r24
  nrf24l01p.spacealloc.own = nRF24L01P_PACKET_LEN-5;
     292:	8b e1       	ldi	r24, 0x1B	; 27
     294:	80 93 26 01 	sts	0x0126, r24
  nrf24l01p.spacealloc.ack = nRF24L01P_PACKET_LEN-6;
     298:	8a e1       	ldi	r24, 0x1A	; 26
     29a:	80 93 27 01 	sts	0x0127, r24
  nrf24l01p.spacealloc.pid = nRF24L01P_PACKET_LEN-7;
     29e:	89 e1       	ldi	r24, 0x19	; 25
     2a0:	80 93 28 01 	sts	0x0128, r24
  nrf24l01p.spacealloc.blocks = nRF24L01P_PACKET_LEN-8;
     2a4:	88 e1       	ldi	r24, 0x18	; 24
     2a6:	80 93 2a 01 	sts	0x012A, r24
  nrf24l01p.errorticks = 0;
     2aa:	10 92 2c 01 	sts	0x012C, r1
     2ae:	10 92 2b 01 	sts	0x012B, r1
  nrf24l01p.error = 0;
     2b2:	10 92 2d 01 	sts	0x012D, r1
     2b6:	10 92 2e 01 	sts	0x012E, r1
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
    nrf24l01p.errors[0] = 0;
  }
}
     2ba:	08 95       	ret

000002bc <nrf24l01p_set_sck_dd>:


/* set data direction of associated gpio */

void nrf24l01p_set_sck_dd(uint8_t state){
  if(state){
     2bc:	88 23       	and	r24, r24
     2be:	11 f0       	breq	.+4      	; 0x2c4 <nrf24l01p_set_sck_dd+0x8>
    nRF24L01P_SCK_DDR |= (1<<nRF24L01P_SCK_bp);
     2c0:	25 9a       	sbi	0x04, 5	; 4
     2c2:	08 95       	ret
  }else{
    nRF24L01P_SCK_DDR &=~(1<<nRF24L01P_SCK_bp);
     2c4:	25 98       	cbi	0x04, 5	; 4
     2c6:	08 95       	ret

000002c8 <nrf24l01p_set_miso_dd>:
  }
}

void nrf24l01p_set_miso_dd(uint8_t state){
  if(state){
     2c8:	88 23       	and	r24, r24
     2ca:	11 f0       	breq	.+4      	; 0x2d0 <nrf24l01p_set_miso_dd+0x8>
    nRF24L01P_MISO_DDR |= (1<<nRF24L01P_MISO_bp);
     2cc:	24 9a       	sbi	0x04, 4	; 4
     2ce:	08 95       	ret
  }else{
    nRF24L01P_MISO_DDR &=~(1<<nRF24L01P_MISO_bp);
     2d0:	24 98       	cbi	0x04, 4	; 4
     2d2:	08 95       	ret

000002d4 <nrf24l01p_set_mosi_dd>:
  }
}

void nrf24l01p_set_mosi_dd(uint8_t state){
  if(state){
     2d4:	88 23       	and	r24, r24
     2d6:	11 f0       	breq	.+4      	; 0x2dc <nrf24l01p_set_mosi_dd+0x8>
    nRF24L01P_MOSI_DDR |= (1<<nRF24L01P_MOSI_bp);
     2d8:	23 9a       	sbi	0x04, 3	; 4
     2da:	08 95       	ret
  }else{
    nRF24L01P_MOSI_DDR &=~(1<<nRF24L01P_MOSI_bp);
     2dc:	23 98       	cbi	0x04, 3	; 4
     2de:	08 95       	ret

000002e0 <nrf24l01p_set_csn_dd>:
  }
}


void nrf24l01p_set_csn_dd(uint8_t state){
  if(state){
     2e0:	88 23       	and	r24, r24
     2e2:	11 f0       	breq	.+4      	; 0x2e8 <nrf24l01p_set_csn_dd+0x8>
    nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
     2e4:	22 9a       	sbi	0x04, 2	; 4
     2e6:	08 95       	ret
  }else{
    nRF24L01P_CSN_DDR &=~(1<<nRF24L01P_CSN_bp);
     2e8:	22 98       	cbi	0x04, 2	; 4
     2ea:	08 95       	ret

000002ec <nrf24l01p_set_ce_dd>:
  }
}

void nrf24l01p_set_ce_dd(uint8_t state){
  if(state){
     2ec:	88 23       	and	r24, r24
     2ee:	11 f0       	breq	.+4      	; 0x2f4 <nrf24l01p_set_ce_dd+0x8>
    nRF24L01P_CE_DDR |= (1<<nRF24L01P_CE_bp);
     2f0:	38 9a       	sbi	0x07, 0	; 7
     2f2:	08 95       	ret
  }else{
    nRF24L01P_CE_DDR &=~(1<<nRF24L01P_CE_bp);
     2f4:	38 98       	cbi	0x07, 0	; 7
     2f6:	08 95       	ret

000002f8 <nrf24l01p_set_sck>:


/* set output state of associated gpio */

void nrf24l01p_set_sck(uint8_t state){
  if(state){
     2f8:	88 23       	and	r24, r24
     2fa:	11 f0       	breq	.+4      	; 0x300 <nrf24l01p_set_sck+0x8>
    nRF24L01P_SCK_PORT |= (1<<nRF24L01P_SCK_bp);
     2fc:	2d 9a       	sbi	0x05, 5	; 5
     2fe:	08 95       	ret
  }else{
    nRF24L01P_SCK_PORT &=~(1<<nRF24L01P_SCK_bp);
     300:	2d 98       	cbi	0x05, 5	; 5
     302:	08 95       	ret

00000304 <nrf24l01p_set_miso>:
  }
}

void nrf24l01p_set_miso(uint8_t state){
  if(state){
     304:	88 23       	and	r24, r24
     306:	11 f0       	breq	.+4      	; 0x30c <nrf24l01p_set_miso+0x8>
    nRF24L01P_MISO_PORT |= (1<<nRF24L01P_MISO_bp);
     308:	2c 9a       	sbi	0x05, 4	; 5
     30a:	08 95       	ret
  }else{
    nRF24L01P_MISO_PORT &=~(1<<nRF24L01P_MISO_bp);
     30c:	2c 98       	cbi	0x05, 4	; 5
     30e:	08 95       	ret

00000310 <nrf24l01p_set_mosi>:
  }
}

void nrf24l01p_set_mosi(uint8_t state){
  if(state){
     310:	88 23       	and	r24, r24
     312:	11 f0       	breq	.+4      	; 0x318 <nrf24l01p_set_mosi+0x8>
    nRF24L01P_MOSI_PORT |= (1<<nRF24L01P_MOSI_bp);
     314:	2b 9a       	sbi	0x05, 3	; 5
     316:	08 95       	ret
  }else{
    nRF24L01P_MOSI_PORT &=~(1<<nRF24L01P_MOSI_bp);
     318:	2b 98       	cbi	0x05, 3	; 5
     31a:	08 95       	ret

0000031c <nrf24l01p_set_csn>:
  }
}

void nrf24l01p_set_csn(uint8_t state){
  if(state){
     31c:	88 23       	and	r24, r24
     31e:	11 f0       	breq	.+4      	; 0x324 <nrf24l01p_set_csn+0x8>
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     320:	2a 9a       	sbi	0x05, 2	; 5
     322:	08 95       	ret
  }else{
    nRF24L01P_CSN_PORT &=~(1<<nRF24L01P_CSN_bp);
     324:	2a 98       	cbi	0x05, 2	; 5
     326:	08 95       	ret

00000328 <nrf24l01p_set_ce>:
  }
}

void nrf24l01p_set_ce(uint8_t state){
  if(state){
     328:	88 23       	and	r24, r24
     32a:	11 f0       	breq	.+4      	; 0x330 <nrf24l01p_set_ce+0x8>
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
     32c:	40 9a       	sbi	0x08, 0	; 8
     32e:	08 95       	ret
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     330:	40 98       	cbi	0x08, 0	; 8
     332:	08 95       	ret

00000334 <nrf24l01p_gpio_enable>:

/* set data direction of associated gpio */

void nrf24l01p_set_sck_dd(uint8_t state){
  if(state){
    nRF24L01P_SCK_DDR |= (1<<nRF24L01P_SCK_bp);
     334:	25 9a       	sbi	0x04, 5	; 4

void nrf24l01p_set_miso_dd(uint8_t state){
  if(state){
    nRF24L01P_MISO_DDR |= (1<<nRF24L01P_MISO_bp);
  }else{
    nRF24L01P_MISO_DDR &=~(1<<nRF24L01P_MISO_bp);
     336:	24 98       	cbi	0x04, 4	; 4
  }
}

void nrf24l01p_set_mosi_dd(uint8_t state){
  if(state){
    nRF24L01P_MOSI_DDR |= (1<<nRF24L01P_MOSI_bp);
     338:	23 9a       	sbi	0x04, 3	; 4
}


void nrf24l01p_set_csn_dd(uint8_t state){
  if(state){
    nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
     33a:	22 9a       	sbi	0x04, 2	; 4
  }
}

void nrf24l01p_set_ce_dd(uint8_t state){
  if(state){
    nRF24L01P_CE_DDR |= (1<<nRF24L01P_CE_bp);
     33c:	38 9a       	sbi	0x07, 0	; 7
  }
}

void nrf24l01p_set_csn(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     33e:	2a 9a       	sbi	0x05, 2	; 5

void nrf24l01p_set_ce(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     340:	40 98       	cbi	0x08, 0	; 8
  nrf24l01p_set_csn_dd(1);
  nrf24l01p_set_ce_dd(1);
  nrf24l01p_set_csn(1);
  nrf24l01p_set_ce(0);
  #ifdef nRF24L01P_USE_HW_SPI
  DDRB |= (1<<2);
     342:	22 9a       	sbi	0x04, 2	; 4
  #endif
}
     344:	08 95       	ret

00000346 <nrf24l01p_gpio_disable>:

/* set data direction of associated gpio */

void nrf24l01p_set_sck_dd(uint8_t state){
  if(state){
    nRF24L01P_SCK_DDR |= (1<<nRF24L01P_SCK_bp);
     346:	25 9a       	sbi	0x04, 5	; 4
  }
}

void nrf24l01p_set_miso_dd(uint8_t state){
  if(state){
    nRF24L01P_MISO_DDR |= (1<<nRF24L01P_MISO_bp);
     348:	24 9a       	sbi	0x04, 4	; 4
  }
}

void nrf24l01p_set_mosi_dd(uint8_t state){
  if(state){
    nRF24L01P_MOSI_DDR |= (1<<nRF24L01P_MOSI_bp);
     34a:	23 9a       	sbi	0x04, 3	; 4
}


void nrf24l01p_set_csn_dd(uint8_t state){
  if(state){
    nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
     34c:	22 9a       	sbi	0x04, 2	; 4
  }
}

void nrf24l01p_set_ce_dd(uint8_t state){
  if(state){
    nRF24L01P_CE_DDR |= (1<<nRF24L01P_CE_bp);
     34e:	38 9a       	sbi	0x07, 0	; 7

void nrf24l01p_set_sck(uint8_t state){
  if(state){
    nRF24L01P_SCK_PORT |= (1<<nRF24L01P_SCK_bp);
  }else{
    nRF24L01P_SCK_PORT &=~(1<<nRF24L01P_SCK_bp);
     350:	2d 98       	cbi	0x05, 5	; 5

void nrf24l01p_set_miso(uint8_t state){
  if(state){
    nRF24L01P_MISO_PORT |= (1<<nRF24L01P_MISO_bp);
  }else{
    nRF24L01P_MISO_PORT &=~(1<<nRF24L01P_MISO_bp);
     352:	2c 98       	cbi	0x05, 4	; 5

void nrf24l01p_set_mosi(uint8_t state){
  if(state){
    nRF24L01P_MOSI_PORT |= (1<<nRF24L01P_MOSI_bp);
  }else{
    nRF24L01P_MOSI_PORT &=~(1<<nRF24L01P_MOSI_bp);
     354:	2b 98       	cbi	0x05, 3	; 5
  }
}

void nrf24l01p_set_csn(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     356:	2a 9a       	sbi	0x05, 2	; 5

void nrf24l01p_set_ce(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     358:	40 98       	cbi	0x08, 0	; 8
  nrf24l01p_set_sck(0);
  nrf24l01p_set_miso(0);
  nrf24l01p_set_mosi(0);
  nrf24l01p_set_csn(1);
  nrf24l01p_set_ce(0);
}
     35a:	08 95       	ret

0000035c <nrf24l01p_spi_enable>:

/* configuration of spi for different states */

void nrf24l01p_spi_enable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = (1<<SPE)|(1<<MSTR);                     
     35c:	80 e5       	ldi	r24, 0x50	; 80
     35e:	8c bd       	out	0x2c, r24	; 44
  //SPSR = (1<<SPI2X);
  SPSR = 0;
     360:	1d bc       	out	0x2d, r1	; 45
  #endif
}
     362:	08 95       	ret

00000364 <nrf24l01p_spi_disable>:

void nrf24l01p_spi_disable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = 0x00;                     
     364:	1c bc       	out	0x2c, r1	; 44
  SPSR = 0x00;
     366:	1d bc       	out	0x2d, r1	; 45
  #endif
}
     368:	08 95       	ret

0000036a <nrf24l01p_enable>:


/* configuration of gpio & spi for different states */

void nrf24l01p_enable(void){
  nrf24l01p_gpio_enable();
     36a:	0e 94 9a 01 	call	0x334	; 0x334 <nrf24l01p_gpio_enable>

/* configuration of spi for different states */

void nrf24l01p_spi_enable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = (1<<SPE)|(1<<MSTR);                     
     36e:	80 e5       	ldi	r24, 0x50	; 80
     370:	8c bd       	out	0x2c, r24	; 44
  //SPSR = (1<<SPI2X);
  SPSR = 0;
     372:	1d bc       	out	0x2d, r1	; 45
/* configuration of gpio & spi for different states */

void nrf24l01p_enable(void){
  nrf24l01p_gpio_enable();
  nrf24l01p_spi_enable();
  nrf24l01p.commen = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 0e 01 	sts	0x010E, r24
}
     37a:	08 95       	ret

0000037c <nrf24l01p_disable>:
  #endif
}

void nrf24l01p_spi_disable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = 0x00;                     
     37c:	1c bc       	out	0x2c, r1	; 44
  SPSR = 0x00;
     37e:	1d bc       	out	0x2d, r1	; 45
  nrf24l01p.commen = 1;
}

void nrf24l01p_disable(void){
  nrf24l01p_spi_disable();
  nrf24l01p_gpio_disable();
     380:	0e 94 a3 01 	call	0x346	; 0x346 <nrf24l01p_gpio_disable>
  nrf24l01p.commen = 0;
     384:	10 92 0e 01 	sts	0x010E, r1
}
     388:	08 95       	ret

0000038a <nrf24l01p_error_clear>:


/* error handling */

void nrf24l01p_error_clear(void){
  nrf24l01p.error = 0;
     38a:	10 92 2d 01 	sts	0x012D, r1
}
     38e:	08 95       	ret

00000390 <nrf24l01p_error_clear_ticks>:

void nrf24l01p_error_clear_ticks(void){
  nrf24l01p.errorticks = 0;
     390:	10 92 2c 01 	sts	0x012C, r1
     394:	10 92 2b 01 	sts	0x012B, r1
}
     398:	08 95       	ret

0000039a <nrf24l01p_error_clear_buf>:

void nrf24l01p_error_clear_buf(void){
     39a:	ee e2       	ldi	r30, 0x2E	; 46
     39c:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
    nrf24l01p.errors[i] = 0;
     39e:	11 92       	st	Z+, r1
void nrf24l01p_error_clear_ticks(void){
  nrf24l01p.errorticks = 0;
}

void nrf24l01p_error_clear_buf(void){
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	e8 33       	cpi	r30, 0x38	; 56
     3a4:	f8 07       	cpc	r31, r24
     3a6:	d9 f7       	brne	.-10     	; 0x39e <nrf24l01p_error_clear_buf+0x4>
    nrf24l01p.errors[i] = 0;
  }
}
     3a8:	08 95       	ret

000003aa <nrf24l01p_error_clear_all>:


/* error handling */

void nrf24l01p_error_clear(void){
  nrf24l01p.error = 0;
     3aa:	10 92 2d 01 	sts	0x012D, r1
}

void nrf24l01p_error_clear_ticks(void){
  nrf24l01p.errorticks = 0;
     3ae:	10 92 2c 01 	sts	0x012C, r1
     3b2:	10 92 2b 01 	sts	0x012B, r1
     3b6:	ee e2       	ldi	r30, 0x2E	; 46
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
}

void nrf24l01p_error_clear_buf(void){
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
    nrf24l01p.errors[i] = 0;
     3ba:	11 92       	st	Z+, r1
void nrf24l01p_error_clear_ticks(void){
  nrf24l01p.errorticks = 0;
}

void nrf24l01p_error_clear_buf(void){
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	e8 33       	cpi	r30, 0x38	; 56
     3c0:	f8 07       	cpc	r31, r24
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <nrf24l01p_error_clear_all+0x10>

void nrf24l01p_error_clear_all(void){
  nrf24l01p_error_clear();
  nrf24l01p_error_clear_ticks();
  nrf24l01p_error_clear_buf();
}
     3c4:	08 95       	ret

000003c6 <nrf24l01p_error_set>:

void nrf24l01p_error_set(uint8_t val){
  nrf24l01p.error = val;
     3c6:	80 93 2d 01 	sts	0x012D, r24
}
     3ca:	08 95       	ret

000003cc <nrf24l01p_error_get>:

uint8_t nrf24l01p_error_get(void){
  return nrf24l01p.error;
}
     3cc:	80 91 2d 01 	lds	r24, 0x012D
     3d0:	08 95       	ret

000003d2 <nrf24l01p_error_get_index>:

uint8_t nrf24l01p_error_get_index(uint8_t index){
     3d2:	ed e0       	ldi	r30, 0x0D	; 13
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	e8 0f       	add	r30, r24
     3d8:	f1 1d       	adc	r31, r1
  return nrf24l01p.errors[index];
}
     3da:	81 a1       	ldd	r24, Z+33	; 0x21
     3dc:	08 95       	ret

000003de <nrf24l01p_error_timeout>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3de:	ec e2       	ldi	r30, 0x2C	; 44
     3e0:	f1 e0       	ldi	r31, 0x01	; 1
     3e2:	31 97       	sbiw	r30, 0x01	; 1
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <nrf24l01p_error_timeout+0x4>

uint8_t nrf24l01p_error_timeout(uint16_t ticks){
  _delay_us(100);
  nrf24l01p.errorticks++;
     3e6:	20 91 2b 01 	lds	r18, 0x012B
     3ea:	30 91 2c 01 	lds	r19, 0x012C
     3ee:	2f 5f       	subi	r18, 0xFF	; 255
     3f0:	3f 4f       	sbci	r19, 0xFF	; 255
     3f2:	30 93 2c 01 	sts	0x012C, r19
     3f6:	20 93 2b 01 	sts	0x012B, r18
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	82 17       	cp	r24, r18
     3fe:	93 07       	cpc	r25, r19
     400:	08 f4       	brcc	.+2      	; 0x404 <nrf24l01p_error_timeout+0x26>
     402:	41 e0       	ldi	r20, 0x01	; 1
	return 1;
  }
  else{
    return 0;
  }
}
     404:	84 2f       	mov	r24, r20
     406:	08 95       	ret

00000408 <nrf24l01p_error_free>:

uint8_t nrf24l01p_error_free(void){
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	80 91 2d 01 	lds	r24, 0x012D
     40e:	88 23       	and	r24, r24
     410:	09 f4       	brne	.+2      	; 0x414 <nrf24l01p_error_free+0xc>
     412:	91 e0       	ldi	r25, 0x01	; 1
    return 1;
  }
  else{
    return 0;
  }
}
     414:	89 2f       	mov	r24, r25
     416:	08 95       	ret

00000418 <nrf24l01p_crc>:


/* crc calcultions and validation */

uint16_t nrf24l01p_crc(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
     418:	36 2f       	mov	r19, r22
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	28 27       	eor	r18, r24
     41e:	39 27       	eor	r19, r25
     420:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
     422:	61 e2       	ldi	r22, 0x21	; 33
     424:	70 e1       	ldi	r23, 0x10	; 16
     426:	c9 01       	movw	r24, r18
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
/* crc calcultions and validation */

uint16_t nrf24l01p_crc(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
     42c:	37 ff       	sbrs	r19, 7
     42e:	04 c0       	rjmp	.+8      	; 0x438 <nrf24l01p_crc+0x20>
	  crc = (crc<<1)^0x1021;
     430:	9c 01       	movw	r18, r24
     432:	26 27       	eor	r18, r22
     434:	37 27       	eor	r19, r23
     436:	01 c0       	rjmp	.+2      	; 0x43a <nrf24l01p_crc+0x22>
	}
    else{
	  crc <<= 1;
     438:	9c 01       	movw	r18, r24

/* crc calcultions and validation */

uint16_t nrf24l01p_crc(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
     43a:	4f 5f       	subi	r20, 0xFF	; 255
     43c:	48 30       	cpi	r20, 0x08	; 8
     43e:	99 f7       	brne	.-26     	; 0x426 <nrf24l01p_crc+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
     440:	c9 01       	movw	r24, r18
     442:	08 95       	ret

00000444 <nrf24l01p_crc_block>:

uint16_t nrf24l01p_crc_block(uint8_t *buf, uint8_t len){
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	06 2f       	mov	r16, r22
     44e:	ec 01       	movw	r28, r24
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	06 c0       	rjmp	.+12     	; 0x464 <nrf24l01p_crc_block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = nrf24l01p_crc(crc,buf[i]);
     458:	c9 01       	movw	r24, r18
     45a:	69 91       	ld	r22, Y+
     45c:	0e 94 0c 02 	call	0x418	; 0x418 <nrf24l01p_crc>
     460:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t nrf24l01p_crc_block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
     462:	1f 5f       	subi	r17, 0xFF	; 255
     464:	10 17       	cp	r17, r16
     466:	c0 f3       	brcs	.-16     	; 0x458 <nrf24l01p_crc_block+0x14>
    crc = nrf24l01p_crc(crc,buf[i]);
  }
  return crc;
}
     468:	c9 01       	movw	r24, r18
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <nrf24l01p_spi_transfer>:



/* spi transfer */

uint8_t nrf24l01p_spi_transfer(uint8_t data){
     474:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     476:	80 91 2d 01 	lds	r24, 0x012D
     47a:	88 23       	and	r24, r24
     47c:	69 f4       	brne	.+26     	; 0x498 <nrf24l01p_spi_transfer+0x24>

/* spi transfer */

uint8_t nrf24l01p_spi_transfer(uint8_t data){
  if(nrf24l01p_error_free()){
    SPDR = data;
     47e:	9e bd       	out	0x2e, r25	; 46
     480:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     482:	28 e2       	ldi	r18, 0x28	; 40
     484:	0b c0       	rjmp	.+22     	; 0x49c <nrf24l01p_spi_transfer+0x28>
     486:	82 2f       	mov	r24, r18
     488:	8a 95       	dec	r24
     48a:	f1 f7       	brne	.-4      	; 0x488 <nrf24l01p_spi_transfer+0x14>
    uint8_t i = 0;
    while(!(SPSR & (1 << SPIF))){
	  _delay_us(10);
	  i++;
     48c:	9f 5f       	subi	r25, 0xFF	; 255
	  if(i > 200){
     48e:	99 3c       	cpi	r25, 0xC9	; 201
     490:	29 f4       	brne	.+10     	; 0x49c <nrf24l01p_spi_transfer+0x28>
  nrf24l01p_error_clear_ticks();
  nrf24l01p_error_clear_buf();
}

void nrf24l01p_error_set(uint8_t val){
  nrf24l01p.error = val;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 2d 01 	sts	0x012D, r24
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	08 95       	ret

uint8_t nrf24l01p_spi_transfer(uint8_t data){
  if(nrf24l01p_error_free()){
    SPDR = data;
    uint8_t i = 0;
    while(!(SPSR & (1 << SPIF))){
     49c:	0d b4       	in	r0, 0x2d	; 45
     49e:	07 fe       	sbrs	r0, 7
     4a0:	f2 cf       	rjmp	.-28     	; 0x486 <nrf24l01p_spi_transfer+0x12>
	  if(i > 200){
	    nrf24l01p_error_set(0x01);
	    return 0;
	  }
    }
	return SPDR;
     4a2:	8e b5       	in	r24, 0x2e	; 46
  }else{
    return 0;
  }
}
     4a4:	08 95       	ret

000004a6 <nrf24l01p_readwrite_register>:


/* register read write */

void nrf24l01p_readwrite_register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
     4a6:	df 92       	push	r13
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	18 2f       	mov	r17, r24
     4b6:	06 2f       	mov	r16, r22
     4b8:	f4 2e       	mov	r15, r20
     4ba:	e5 2e       	mov	r14, r21
     4bc:	d2 2e       	mov	r13, r18
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     4be:	80 91 2d 01 	lds	r24, 0x012D
     4c2:	88 23       	and	r24, r24
     4c4:	59 f5       	brne	.+86     	; 0x51c <nrf24l01p_readwrite_register+0x76>

/* register read write */

void nrf24l01p_readwrite_register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
  if(nrf24l01p_error_free()){
    if(nrf24l01p.commen == 0){
     4c6:	80 91 0e 01 	lds	r24, 0x010E
     4ca:	88 23       	and	r24, r24
     4cc:	11 f4       	brne	.+4      	; 0x4d2 <nrf24l01p_readwrite_register+0x2c>
      nrf24l01p_enable();
     4ce:	0e 94 b5 01 	call	0x36a	; 0x36a <nrf24l01p_enable>

void nrf24l01p_set_csn(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
  }else{
    nRF24L01P_CSN_PORT &=~(1<<nRF24L01P_CSN_bp);
     4d2:	2a 98       	cbi	0x05, 2	; 5
  if(nrf24l01p_error_free()){
    if(nrf24l01p.commen == 0){
      nrf24l01p_enable();
    }
    nrf24l01p_set_csn(0);
    if(rw == 0){
     4d4:	00 23       	and	r16, r16
     4d6:	89 f4       	brne	.+34     	; 0x4fa <nrf24l01p_readwrite_register+0x54>
      reg |= 0x20;
	  nrf24l01p_spi_transfer(reg);
     4d8:	81 2f       	mov	r24, r17
     4da:	80 62       	ori	r24, 0x20	; 32
     4dc:	0e 94 3a 02 	call	0x474	; 0x474 <nrf24l01p_spi_transfer>
     4e0:	8f 2d       	mov	r24, r15
     4e2:	9e 2d       	mov	r25, r14
     4e4:	9c 01       	movw	r18, r24
     4e6:	e9 01       	movw	r28, r18
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <nrf24l01p_readwrite_register+0x4e>
	  for(uint8_t i = 0; i < len; i++){
	    nrf24l01p_spi_transfer(data[i]);
     4ec:	89 91       	ld	r24, Y+
     4ee:	0e 94 3a 02 	call	0x474	; 0x474 <nrf24l01p_spi_transfer>
    }
    nrf24l01p_set_csn(0);
    if(rw == 0){
      reg |= 0x20;
	  nrf24l01p_spi_transfer(reg);
	  for(uint8_t i = 0; i < len; i++){
     4f2:	1f 5f       	subi	r17, 0xFF	; 255
     4f4:	1d 15       	cp	r17, r13
     4f6:	d0 f3       	brcs	.-12     	; 0x4ec <nrf24l01p_readwrite_register+0x46>
     4f8:	10 c0       	rjmp	.+32     	; 0x51a <nrf24l01p_readwrite_register+0x74>
	    nrf24l01p_spi_transfer(data[i]);
	  }
    }else{
      nrf24l01p_spi_transfer(reg);
     4fa:	81 2f       	mov	r24, r17
     4fc:	0e 94 3a 02 	call	0x474	; 0x474 <nrf24l01p_spi_transfer>
     500:	8f 2d       	mov	r24, r15
     502:	9e 2d       	mov	r25, r14
     504:	9c 01       	movw	r18, r24
     506:	e9 01       	movw	r28, r18
     508:	10 e0       	ldi	r17, 0x00	; 0
     50a:	05 c0       	rjmp	.+10     	; 0x516 <nrf24l01p_readwrite_register+0x70>
      for(uint8_t i = 0; i < len; i++){
        data[i] = nrf24l01p_spi_transfer(0xFF);
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	0e 94 3a 02 	call	0x474	; 0x474 <nrf24l01p_spi_transfer>
     512:	89 93       	st	Y+, r24
	  for(uint8_t i = 0; i < len; i++){
	    nrf24l01p_spi_transfer(data[i]);
	  }
    }else{
      nrf24l01p_spi_transfer(reg);
      for(uint8_t i = 0; i < len; i++){
     514:	1f 5f       	subi	r17, 0xFF	; 255
     516:	1d 15       	cp	r17, r13
     518:	c8 f3       	brcs	.-14     	; 0x50c <nrf24l01p_readwrite_register+0x66>
  }
}

void nrf24l01p_set_csn(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     51a:	2a 9a       	sbi	0x05, 2	; 5
        data[i] = nrf24l01p_spi_transfer(0xFF);
      }
    }
    nrf24l01p_set_csn(1);
  }
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	df 90       	pop	r13
     52a:	08 95       	ret

0000052c <nrf24l01p_read_modify_write_register>:

void nrf24l01p_read_modify_write_register( uint8_t reg, uint8_t bit_pos, uint8_t bit_val ){
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	f8 2e       	mov	r15, r24
     534:	06 2f       	mov	r16, r22
     536:	14 2f       	mov	r17, r20
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     538:	80 91 2d 01 	lds	r24, 0x012D
     53c:	88 23       	and	r24, r24
     53e:	41 f5       	brne	.+80     	; 0x590 <nrf24l01p_read_modify_write_register+0x64>
  }
}

void nrf24l01p_read_modify_write_register( uint8_t reg, uint8_t bit_pos, uint8_t bit_val ){
  if(nrf24l01p_error_free()){
    nrf24l01p_readwrite_register( reg, 1, nrf24l01p.tempbuf, 1);
     540:	8f 2d       	mov	r24, r15
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	4f e0       	ldi	r20, 0x0F	; 15
     546:	51 e0       	ldi	r21, 0x01	; 1
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
     54e:	20 91 0f 01 	lds	r18, 0x010F
    if(bit_val){
     552:	11 23       	and	r17, r17
     554:	59 f0       	breq	.+22     	; 0x56c <nrf24l01p_read_modify_write_register+0x40>
      nrf24l01p.tempbuf[0]|=(1<<bit_pos);
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	02 c0       	rjmp	.+4      	; 0x560 <nrf24l01p_read_modify_write_register+0x34>
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	0a 95       	dec	r16
     562:	e2 f7       	brpl	.-8      	; 0x55c <nrf24l01p_read_modify_write_register+0x30>
     564:	28 2b       	or	r18, r24
     566:	20 93 0f 01 	sts	0x010F, r18
     56a:	0b c0       	rjmp	.+22     	; 0x582 <nrf24l01p_read_modify_write_register+0x56>
    }else{
      nrf24l01p.tempbuf[0]&=~(1<<bit_pos);
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	02 c0       	rjmp	.+4      	; 0x576 <nrf24l01p_read_modify_write_register+0x4a>
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	0a 95       	dec	r16
     578:	e2 f7       	brpl	.-8      	; 0x572 <nrf24l01p_read_modify_write_register+0x46>
     57a:	80 95       	com	r24
     57c:	82 23       	and	r24, r18
     57e:	80 93 0f 01 	sts	0x010F, r24
    }
    nrf24l01p_readwrite_register( reg, 0, nrf24l01p.tempbuf, 1 );
     582:	8f 2d       	mov	r24, r15
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	4f e0       	ldi	r20, 0x0F	; 15
     588:	51 e0       	ldi	r21, 0x01	; 1
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  }
}
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	ff 90       	pop	r15
     596:	08 95       	ret

00000598 <nrf24l01p_flush_tx_buf>:


/* tx and rx buffer flush */

void nrf24l01p_flush_tx_buf(void){
  nrf24l01p_readwrite_register( 0xE1, 0, nrf24l01p.tempbuf, 0 );
     598:	81 ee       	ldi	r24, 0xE1	; 225
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	4f e0       	ldi	r20, 0x0F	; 15
     59e:	51 e0       	ldi	r21, 0x01	; 1
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     5a6:	80 91 2d 01 	lds	r24, 0x012D
     5aa:	88 23       	and	r24, r24
     5ac:	19 f0       	breq	.+6      	; 0x5b4 <nrf24l01p_flush_tx_buf+0x1c>
  nrf24l01p_error_clear_ticks();
  nrf24l01p_error_clear_buf();
}

void nrf24l01p_error_set(uint8_t val){
  nrf24l01p.error = val;
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	80 93 2d 01 	sts	0x012D, r24
     5b4:	08 95       	ret

000005b6 <nrf24l01p_flush_rx_buf>:
    nrf24l01p_error_set(0x02);
  }
}

void nrf24l01p_flush_rx_buf(void){
  nrf24l01p_readwrite_register( 0xE2, 0, nrf24l01p.tempbuf, 0 );
     5b6:	82 ee       	ldi	r24, 0xE2	; 226
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	4f e0       	ldi	r20, 0x0F	; 15
     5bc:	51 e0       	ldi	r21, 0x01	; 1
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     5c4:	80 91 2d 01 	lds	r24, 0x012D
     5c8:	88 23       	and	r24, r24
     5ca:	19 f0       	breq	.+6      	; 0x5d2 <nrf24l01p_flush_rx_buf+0x1c>
  nrf24l01p_error_clear_ticks();
  nrf24l01p_error_clear_buf();
}

void nrf24l01p_error_set(uint8_t val){
  nrf24l01p.error = val;
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	80 93 2d 01 	sts	0x012D, r24
     5d2:	08 95       	ret

000005d4 <nrf24l01p_write_data_tx_buf>:



/* read and write in tx and rx fifo */

void nrf24l01p_write_data_tx_buf(uint8_t *data){
     5d4:	ac 01       	movw	r20, r24
  nrf24l01p_readwrite_register( 0xA0, 0, data, nRF24L01P_PACKET_LEN );
     5d6:	80 ea       	ldi	r24, 0xA0	; 160
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	20 e2       	ldi	r18, 0x20	; 32
     5dc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     5e0:	80 91 2d 01 	lds	r24, 0x012D
     5e4:	88 23       	and	r24, r24
     5e6:	19 f0       	breq	.+6      	; 0x5ee <nrf24l01p_write_data_tx_buf+0x1a>
  nrf24l01p_error_clear_ticks();
  nrf24l01p_error_clear_buf();
}

void nrf24l01p_error_set(uint8_t val){
  nrf24l01p.error = val;
     5e8:	84 e0       	ldi	r24, 0x04	; 4
     5ea:	80 93 2d 01 	sts	0x012D, r24
     5ee:	08 95       	ret

000005f0 <nrf24l01p_read_data_rx_buf>:
  if( !nrf24l01p_error_free() ){
    nrf24l01p_error_set(0x04);
  }
}

void nrf24l01p_read_data_rx_buf(uint8_t *data){
     5f0:	ac 01       	movw	r20, r24
  nrf24l01p_readwrite_register( 0x61, 1, data, nRF24L01P_PACKET_LEN );
     5f2:	81 e6       	ldi	r24, 0x61	; 97
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	20 e2       	ldi	r18, 0x20	; 32
     5f8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     5fc:	80 91 2d 01 	lds	r24, 0x012D
     600:	88 23       	and	r24, r24
     602:	19 f0       	breq	.+6      	; 0x60a <nrf24l01p_read_data_rx_buf+0x1a>
  nrf24l01p_error_clear_ticks();
  nrf24l01p_error_clear_buf();
}

void nrf24l01p_error_set(uint8_t val){
  nrf24l01p.error = val;
     604:	85 e0       	ldi	r24, 0x05	; 5
     606:	80 93 2d 01 	sts	0x012D, r24
     60a:	08 95       	ret

0000060c <nrf24l01p_tx_buf_empty>:
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     60c:	80 91 2d 01 	lds	r24, 0x012D
     610:	88 23       	and	r24, r24
     612:	11 f0       	breq	.+4      	; 0x618 <nrf24l01p_tx_buf_empty+0xc>
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	08 95       	ret

/* read tx and rx fifo status */

uint8_t nrf24l01p_tx_buf_empty(void){
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0;
     618:	10 92 0f 01 	sts	0x010F, r1
    nrf24l01p_readwrite_register( 0x17, 1, nrf24l01p.tempbuf, 1);
     61c:	87 e1       	ldi	r24, 0x17	; 23
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	4f e0       	ldi	r20, 0x0F	; 15
     622:	51 e0       	ldi	r21, 0x01	; 1
     624:	21 e0       	ldi	r18, 0x01	; 1
     626:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
     62a:	80 91 0f 01 	lds	r24, 0x010F
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	64 e0       	ldi	r22, 0x04	; 4
     632:	96 95       	lsr	r25
     634:	87 95       	ror	r24
     636:	6a 95       	dec	r22
     638:	e1 f7       	brne	.-8      	; 0x632 <nrf24l01p_tx_buf_empty+0x26>
     63a:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
     63c:	08 95       	ret

0000063e <nrf24l01p_rx_buf_not_empty>:
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     63e:	80 91 2d 01 	lds	r24, 0x012D
     642:	88 23       	and	r24, r24
     644:	11 f0       	breq	.+4      	; 0x64a <nrf24l01p_rx_buf_not_empty+0xc>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	08 95       	ret
}


uint8_t nrf24l01p_rx_buf_not_empty(void){
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0;
     64a:	10 92 0f 01 	sts	0x010F, r1
    nrf24l01p_readwrite_register( 0x17, 1, nrf24l01p.tempbuf, 1);
     64e:	87 e1       	ldi	r24, 0x17	; 23
     650:	61 e0       	ldi	r22, 0x01	; 1
     652:	4f e0       	ldi	r20, 0x0F	; 15
     654:	51 e0       	ldi	r21, 0x01	; 1
     656:	21 e0       	ldi	r18, 0x01	; 1
     658:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
     65c:	80 91 0f 01 	lds	r24, 0x010F
     660:	80 95       	com	r24
     662:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
     664:	08 95       	ret

00000666 <nrf24l01p_wait_tx_complete>:


uint8_t nrf24l01p_wait_tx_complete(void){
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     66a:	80 91 2d 01 	lds	r24, 0x012D
     66e:	88 23       	and	r24, r24
     670:	c9 f4       	brne	.+50     	; 0x6a4 <nrf24l01p_wait_tx_complete+0x3e>
void nrf24l01p_error_clear(void){
  nrf24l01p.error = 0;
}

void nrf24l01p_error_clear_ticks(void){
  nrf24l01p.errorticks = 0;
     672:	10 92 2c 01 	sts	0x012C, r1
     676:	10 92 2b 01 	sts	0x012B, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     67a:	cc e2       	ldi	r28, 0x2C	; 44
     67c:	d1 e0       	ldi	r29, 0x01	; 1
     67e:	14 c0       	rjmp	.+40     	; 0x6a8 <nrf24l01p_wait_tx_complete+0x42>
     680:	ce 01       	movw	r24, r28
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	f1 f7       	brne	.-4      	; 0x682 <nrf24l01p_wait_tx_complete+0x1c>
  return nrf24l01p.errors[index];
}

uint8_t nrf24l01p_error_timeout(uint16_t ticks){
  _delay_us(100);
  nrf24l01p.errorticks++;
     686:	80 91 2b 01 	lds	r24, 0x012B
     68a:	90 91 2c 01 	lds	r25, 0x012C
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	90 93 2c 01 	sts	0x012C, r25
     694:	80 93 2b 01 	sts	0x012B, r24
  if(nrf24l01p.errorticks>ticks){
     698:	85 36       	cpi	r24, 0x65	; 101
     69a:	91 05       	cpc	r25, r1
     69c:	28 f0       	brcs	.+10     	; 0x6a8 <nrf24l01p_wait_tx_complete+0x42>
  nrf24l01p_error_clear_ticks();
  nrf24l01p_error_clear_buf();
}

void nrf24l01p_error_set(uint8_t val){
  nrf24l01p.error = val;
     69e:	86 e0       	ldi	r24, 0x06	; 6
     6a0:	80 93 2d 01 	sts	0x012D, r24
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <nrf24l01p_wait_tx_complete+0x4c>


uint8_t nrf24l01p_wait_tx_complete(void){
  if(nrf24l01p_error_free()){
    nrf24l01p_error_clear_ticks();
    while( !nrf24l01p_tx_buf_empty() ){
     6a8:	0e 94 06 03 	call	0x60c	; 0x60c <nrf24l01p_tx_buf_empty>
     6ac:	88 23       	and	r24, r24
     6ae:	41 f3       	breq	.-48     	; 0x680 <nrf24l01p_wait_tx_complete+0x1a>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
    }
	return 1;
  }else{
    return 0;
  }
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <nrf24l01p_mode_set_deep_sleep>:
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     6b8:	80 91 2d 01 	lds	r24, 0x012D
     6bc:	88 23       	and	r24, r24
     6be:	51 f4       	brne	.+20     	; 0x6d4 <nrf24l01p_mode_set_deep_sleep+0x1c>

/* set modes */

void nrf24l01p_mode_set_deep_sleep(void){
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0x00;
     6c0:	10 92 0f 01 	sts	0x010F, r1
    nrf24l01p_readwrite_register( 0x00, 0, nrf24l01p.tempbuf, 1 );
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	4f e0       	ldi	r20, 0x0F	; 15
     6c8:	51 e0       	ldi	r21, 0x01	; 1
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    nrf24l01p.mode = 0x00;
     6d0:	10 92 0d 01 	sts	0x010D, r1
  }
  nrf24l01p_disable();
     6d4:	0e 94 be 01 	call	0x37c	; 0x37c <nrf24l01p_disable>
}
     6d8:	08 95       	ret

000006da <nrf24l01p_mode_set_sleep>:

void nrf24l01p_mode_set_sleep(void){
  if(nrf24l01p.commen == 0){
     6da:	80 91 0e 01 	lds	r24, 0x010E
     6de:	88 23       	and	r24, r24
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <nrf24l01p_mode_set_sleep+0xc>
    nrf24l01p_enable();
     6e2:	0e 94 b5 01 	call	0x36a	; 0x36a <nrf24l01p_enable>
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     6e6:	80 91 2d 01 	lds	r24, 0x012D
     6ea:	88 23       	and	r24, r24
     6ec:	61 f4       	brne	.+24     	; 0x706 <nrf24l01p_mode_set_sleep+0x2c>
void nrf24l01p_mode_set_sleep(void){
  if(nrf24l01p.commen == 0){
    nrf24l01p_enable();
  }
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0x00;
     6ee:	10 92 0f 01 	sts	0x010F, r1

void nrf24l01p_set_ce(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     6f2:	40 98       	cbi	0x08, 0	; 8
    nrf24l01p_enable();
  }
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0x00;
	nrf24l01p_set_ce(0);
    nrf24l01p_readwrite_register( 0x00, 0, nrf24l01p.tempbuf, 1 );
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	4f e0       	ldi	r20, 0x0F	; 15
     6f8:	51 e0       	ldi	r21, 0x01	; 1
     6fa:	21 e0       	ldi	r18, 0x01	; 1
     6fc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    nrf24l01p.mode = 0x01;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	80 93 0d 01 	sts	0x010D, r24
     706:	08 95       	ret

00000708 <nrf24l01p_mode_set_rx>:
  }
}

void nrf24l01p_mode_set_rx(void){
  if(nrf24l01p.commen == 0){
     708:	80 91 0e 01 	lds	r24, 0x010E
     70c:	88 23       	and	r24, r24
     70e:	11 f4       	brne	.+4      	; 0x714 <nrf24l01p_mode_set_rx+0xc>
    nrf24l01p_enable();
     710:	0e 94 b5 01 	call	0x36a	; 0x36a <nrf24l01p_enable>
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     714:	80 91 2d 01 	lds	r24, 0x012D
     718:	88 23       	and	r24, r24
     71a:	71 f4       	brne	.+28     	; 0x738 <nrf24l01p_mode_set_rx+0x30>
void nrf24l01p_mode_set_rx(void){
  if(nrf24l01p.commen == 0){
    nrf24l01p_enable();
  }
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0x73;
     71c:	83 e7       	ldi	r24, 0x73	; 115
     71e:	80 93 0f 01 	sts	0x010F, r24
  }
}

void nrf24l01p_set_ce(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
     722:	40 9a       	sbi	0x08, 0	; 8
    nrf24l01p_enable();
  }
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0x73;
    nrf24l01p_set_ce(1);
    nrf24l01p_readwrite_register( 0x00, 0, nrf24l01p.tempbuf, 1 );
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	4f e0       	ldi	r20, 0x0F	; 15
     72a:	51 e0       	ldi	r21, 0x01	; 1
     72c:	21 e0       	ldi	r18, 0x01	; 1
     72e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
	nrf24l01p.mode = 0x02;
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	80 93 0d 01 	sts	0x010D, r24
     738:	08 95       	ret

0000073a <nrf24l01p_mode_set_tx>:
  }
}

void nrf24l01p_mode_set_tx(void){
  if(nrf24l01p.commen == 0){
     73a:	80 91 0e 01 	lds	r24, 0x010E
     73e:	88 23       	and	r24, r24
     740:	11 f4       	brne	.+4      	; 0x746 <nrf24l01p_mode_set_tx+0xc>
    nrf24l01p_enable();
     742:	0e 94 b5 01 	call	0x36a	; 0x36a <nrf24l01p_enable>
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     746:	80 91 2d 01 	lds	r24, 0x012D
     74a:	88 23       	and	r24, r24
     74c:	79 f4       	brne	.+30     	; 0x76c <nrf24l01p_mode_set_tx+0x32>
void nrf24l01p_mode_set_tx(void){
  if(nrf24l01p.commen == 0){
    nrf24l01p_enable();
  }
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0x72;
     74e:	82 e7       	ldi	r24, 0x72	; 114
     750:	80 93 0f 01 	sts	0x010F, r24

void nrf24l01p_set_ce(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     754:	40 98       	cbi	0x08, 0	; 8
    nrf24l01p_enable();
  }
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0x72;
    nrf24l01p_set_ce(0);
    nrf24l01p_readwrite_register( 0x00, 0, nrf24l01p.tempbuf, 1 );
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	4f e0       	ldi	r20, 0x0F	; 15
     75c:	51 e0       	ldi	r21, 0x01	; 1
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  }
}

void nrf24l01p_set_ce(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
     764:	40 9a       	sbi	0x08, 0	; 8
  if(nrf24l01p_error_free()){
    nrf24l01p.tempbuf[0] = 0x72;
    nrf24l01p_set_ce(0);
    nrf24l01p_readwrite_register( 0x00, 0, nrf24l01p.tempbuf, 1 );
	nrf24l01p_set_ce(1);
	nrf24l01p.mode = 0x03;
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	80 93 0d 01 	sts	0x010D, r24
     76c:	08 95       	ret

0000076e <nrf24l01p_mode_set>:
  }
}

void nrf24l01p_mode_set(uint8_t mode){
     76e:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     770:	80 91 2d 01 	lds	r24, 0x012D
     774:	88 23       	and	r24, r24
     776:	b1 f4       	brne	.+44     	; 0x7a4 <nrf24l01p_mode_set+0x36>
  }
}

void nrf24l01p_mode_set(uint8_t mode){
  if(nrf24l01p_error_free()){
    if(mode == 0){
     778:	99 23       	and	r25, r25
     77a:	19 f4       	brne	.+6      	; 0x782 <nrf24l01p_mode_set+0x14>
	  nrf24l01p_mode_set_deep_sleep();
     77c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <nrf24l01p_mode_set_deep_sleep>
     780:	08 95       	ret
	}else if(mode == 1){
     782:	91 30       	cpi	r25, 0x01	; 1
     784:	19 f4       	brne	.+6      	; 0x78c <nrf24l01p_mode_set+0x1e>
	  nrf24l01p_mode_set_sleep();
     786:	0e 94 6d 03 	call	0x6da	; 0x6da <nrf24l01p_mode_set_sleep>
     78a:	08 95       	ret
	}else if(mode == 2){
     78c:	92 30       	cpi	r25, 0x02	; 2
     78e:	19 f4       	brne	.+6      	; 0x796 <nrf24l01p_mode_set+0x28>
	  nrf24l01p_mode_set_rx();
     790:	0e 94 84 03 	call	0x708	; 0x708 <nrf24l01p_mode_set_rx>
     794:	08 95       	ret
	}else if(mode == 3){
     796:	93 30       	cpi	r25, 0x03	; 3
     798:	19 f4       	brne	.+6      	; 0x7a0 <nrf24l01p_mode_set+0x32>
	  nrf24l01p_mode_set_tx();
     79a:	0e 94 9d 03 	call	0x73a	; 0x73a <nrf24l01p_mode_set_tx>
     79e:	08 95       	ret
	}else{
	  nrf24l01p_mode_set_rx();
     7a0:	0e 94 84 03 	call	0x708	; 0x708 <nrf24l01p_mode_set_rx>
     7a4:	08 95       	ret

000007a6 <nrf24l01p_mode_get>:
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     7a6:	80 91 2d 01 	lds	r24, 0x012D
     7aa:	88 23       	and	r24, r24
     7ac:	11 f0       	breq	.+4      	; 0x7b2 <nrf24l01p_mode_get+0xc>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	08 95       	ret
  }
}

uint8_t nrf24l01p_mode_get(void){
  if(nrf24l01p_error_free()){
    nrf24l01p_readwrite_register( 0x00, 1, nrf24l01p.tempbuf, 1 );
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	4f e0       	ldi	r20, 0x0F	; 15
     7b8:	51 e0       	ldi	r21, 0x01	; 1
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    if(nrf24l01p.tempbuf[0] & (1<<1)){
     7c0:	80 91 0f 01 	lds	r24, 0x010F
     7c4:	81 ff       	sbrs	r24, 1
     7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <nrf24l01p_mode_get+0x32>
      if(nrf24l01p.tempbuf[0] & (1<<0)){
     7c8:	80 ff       	sbrs	r24, 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <nrf24l01p_mode_get+0x2a>
	    nrf24l01p.mode = 0x02;
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <nrf24l01p_mode_get+0x2c>
	    return 2; //rx mode
	  }else{
	    nrf24l01p.mode = 0x03;
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	80 93 0d 01 	sts	0x010D, r24
     7d6:	08 95       	ret
	    return 3; //tx mode
	  }
    }else{
      nrf24l01p.mode = 0x01;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 0d 01 	sts	0x010D, r24
      return 1;   //pwr down
    }
  }else{
    return 0;
  }
}
     7de:	08 95       	ret

000007e0 <nrf24l01p_channel_set>:



void nrf24l01p_channel_set(uint8_t channel){
     7e0:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     7e2:	80 91 2d 01 	lds	r24, 0x012D
     7e6:	88 23       	and	r24, r24
     7e8:	69 f4       	brne	.+26     	; 0x804 <nrf24l01p_channel_set+0x24>
void nrf24l01p_channel_set(uint8_t channel){
  if(nrf24l01p_error_free()){
    if(channel > 120){
      channel = 120;
    }
    nrf24l01p.tempbuf[0] = channel;
     7ea:	89 2f       	mov	r24, r25
     7ec:	99 37       	cpi	r25, 0x79	; 121
     7ee:	08 f0       	brcs	.+2      	; 0x7f2 <nrf24l01p_channel_set+0x12>
     7f0:	88 e7       	ldi	r24, 0x78	; 120
     7f2:	80 93 0f 01 	sts	0x010F, r24
    nrf24l01p_readwrite_register( 0x05, 0, nrf24l01p.tempbuf, 1 );
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	4f e0       	ldi	r20, 0x0F	; 15
     7fc:	51 e0       	ldi	r21, 0x01	; 1
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
     804:	08 95       	ret

00000806 <nrf24l01p_channel_get>:
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     806:	80 91 2d 01 	lds	r24, 0x012D
     80a:	88 23       	and	r24, r24
     80c:	11 f0       	breq	.+4      	; 0x812 <nrf24l01p_channel_get+0xc>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	08 95       	ret
  }
}

uint8_t nrf24l01p_channel_get(void){
  if(nrf24l01p_error_free()){
    nrf24l01p_readwrite_register( 0x05, 1, nrf24l01p.tempbuf, 1 );
     812:	85 e0       	ldi	r24, 0x05	; 5
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	4f e0       	ldi	r20, 0x0F	; 15
     818:	51 e0       	ldi	r21, 0x01	; 1
     81a:	21 e0       	ldi	r18, 0x01	; 1
     81c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    return nrf24l01p.tempbuf[0];
     820:	80 91 0f 01 	lds	r24, 0x010F
  }else{
    return 0;
  }
}
     824:	08 95       	ret

00000826 <nrf24l01p_speed_set>:



void nrf24l01p_speed_set(uint8_t index){
  if(index == 0){       //250kbps
     826:	88 23       	and	r24, r24
     828:	21 f4       	brne	.+8      	; 0x832 <nrf24l01p_speed_set+0xc>
    nrf24l01p_read_modify_write_register( 0x06, 5, 1 );
     82a:	86 e0       	ldi	r24, 0x06	; 6
     82c:	65 e0       	ldi	r22, 0x05	; 5
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	05 c0       	rjmp	.+10     	; 0x83c <nrf24l01p_speed_set+0x16>
    nrf24l01p_read_modify_write_register( 0x06, 3, 0 );
  }
  else if(index == 1){  //1Mbps
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	49 f4       	brne	.+18     	; 0x848 <nrf24l01p_speed_set+0x22>
    nrf24l01p_read_modify_write_register( 0x06, 5, 0 );
     836:	86 e0       	ldi	r24, 0x06	; 6
     838:	65 e0       	ldi	r22, 0x05	; 5
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	0e 94 96 02 	call	0x52c	; 0x52c <nrf24l01p_read_modify_write_register>
    nrf24l01p_read_modify_write_register( 0x06, 3, 0 );
     840:	86 e0       	ldi	r24, 0x06	; 6
     842:	63 e0       	ldi	r22, 0x03	; 3
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	08 c0       	rjmp	.+16     	; 0x858 <nrf24l01p_speed_set+0x32>
  }
  else if(index == 2){  //2Mbps
    nrf24l01p_read_modify_write_register( 0x06, 5, 0 );
    nrf24l01p_read_modify_write_register( 0x06, 3, 1 );
  }else{                //2Mbps
    nrf24l01p_read_modify_write_register( 0x06, 5, 0 );
     848:	86 e0       	ldi	r24, 0x06	; 6
     84a:	65 e0       	ldi	r22, 0x05	; 5
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	0e 94 96 02 	call	0x52c	; 0x52c <nrf24l01p_read_modify_write_register>
    nrf24l01p_read_modify_write_register( 0x06, 3, 1 );
     852:	86 e0       	ldi	r24, 0x06	; 6
     854:	63 e0       	ldi	r22, 0x03	; 3
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	0e 94 96 02 	call	0x52c	; 0x52c <nrf24l01p_read_modify_write_register>
     85c:	08 95       	ret

0000085e <nrf24l01p_speed_get>:
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     85e:	80 91 2d 01 	lds	r24, 0x012D
     862:	88 23       	and	r24, r24
     864:	11 f0       	breq	.+4      	; 0x86a <nrf24l01p_speed_get+0xc>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	08 95       	ret
  }
}

uint8_t nrf24l01p_speed_get(void){
  if(nrf24l01p_error_free()){
    nrf24l01p_readwrite_register( 0x06, 1, nrf24l01p.tempbuf, 1 );
     86a:	86 e0       	ldi	r24, 0x06	; 6
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	4f e0       	ldi	r20, 0x0F	; 15
     870:	51 e0       	ldi	r21, 0x01	; 1
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    nrf24l01p.tempbuf[1] = (nrf24l01p.tempbuf[0] >> 3) & 0x01;
     878:	90 91 0f 01 	lds	r25, 0x010F
    nrf24l01p.tempbuf[0] >>= 4;
    nrf24l01p.tempbuf[0] &= 0x02;
     87c:	89 2f       	mov	r24, r25
     87e:	82 95       	swap	r24
     880:	82 70       	andi	r24, 0x02	; 2
     882:	80 93 0f 01 	sts	0x010F, r24
    nrf24l01p.tempbuf[1] |= nrf24l01p.tempbuf[0];
     886:	96 95       	lsr	r25
     888:	96 95       	lsr	r25
     88a:	96 95       	lsr	r25
     88c:	91 70       	andi	r25, 0x01	; 1
     88e:	98 2b       	or	r25, r24
     890:	90 93 10 01 	sts	0x0110, r25
    if      (nrf24l01p.tempbuf[1] == 0x02){
     894:	92 30       	cpi	r25, 0x02	; 2
     896:	19 f4       	brne	.+6      	; 0x89e <nrf24l01p_speed_get+0x40>
      nrf24l01p.tempbuf[0] = 0;
     898:	10 92 0f 01 	sts	0x010F, r1
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <nrf24l01p_speed_get+0x54>
    }else if(nrf24l01p.tempbuf[1] == 0x01){
     89e:	91 30       	cpi	r25, 0x01	; 1
     8a0:	19 f4       	brne	.+6      	; 0x8a8 <nrf24l01p_speed_get+0x4a>
      nrf24l01p.tempbuf[0] = 1;
     8a2:	90 93 0f 01 	sts	0x010F, r25
     8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <nrf24l01p_speed_get+0x54>
    }else if(nrf24l01p.tempbuf[1] == 0x00){
     8a8:	99 23       	and	r25, r25
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <nrf24l01p_speed_get+0x54>
      nrf24l01p.tempbuf[0] = 2;
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	80 93 0f 01 	sts	0x010F, r24
    }
    return nrf24l01p.tempbuf[0];
     8b2:	80 91 0f 01 	lds	r24, 0x010F
  }else{
    return 0;
  }
}
     8b6:	08 95       	ret

000008b8 <nrf24l01p_tx_power_set>:



void nrf24l01p_tx_power_set(uint8_t index){
     8b8:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     8ba:	80 91 2d 01 	lds	r24, 0x012D
     8be:	88 23       	and	r24, r24
     8c0:	71 f5       	brne	.+92     	; 0x91e <__stack+0x1f>



void nrf24l01p_tx_power_set(uint8_t index){
  if(nrf24l01p_error_free()){
    if(index == 0){
     8c2:	99 23       	and	r25, r25
     8c4:	21 f4       	brne	.+8      	; 0x8ce <nrf24l01p_tx_power_set+0x16>
      nrf24l01p_read_modify_write_register( 0x06, 2, 0 );
     8c6:	86 e0       	ldi	r24, 0x06	; 6
     8c8:	62 e0       	ldi	r22, 0x02	; 2
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	0b c0       	rjmp	.+22     	; 0x8e4 <nrf24l01p_tx_power_set+0x2c>
      nrf24l01p_read_modify_write_register( 0x06, 1, 0 );
    }
    else if(index == 1){
     8ce:	91 30       	cpi	r25, 0x01	; 1
     8d0:	21 f4       	brne	.+8      	; 0x8da <nrf24l01p_tx_power_set+0x22>
      nrf24l01p_read_modify_write_register( 0x06, 2, 0 );
     8d2:	86 e0       	ldi	r24, 0x06	; 6
     8d4:	62 e0       	ldi	r22, 0x02	; 2
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	10 c0       	rjmp	.+32     	; 0x8fa <nrf24l01p_tx_power_set+0x42>
      nrf24l01p_read_modify_write_register( 0x06, 1, 1 );
    }
    else if(index == 2){
     8da:	92 30       	cpi	r25, 0x02	; 2
     8dc:	49 f4       	brne	.+18     	; 0x8f0 <nrf24l01p_tx_power_set+0x38>
      nrf24l01p_read_modify_write_register( 0x06, 2, 1 );
     8de:	86 e0       	ldi	r24, 0x06	; 6
     8e0:	62 e0       	ldi	r22, 0x02	; 2
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	0e 94 96 02 	call	0x52c	; 0x52c <nrf24l01p_read_modify_write_register>
      nrf24l01p_read_modify_write_register( 0x06, 1, 0 );
     8e8:	86 e0       	ldi	r24, 0x06	; 6
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	0a c0       	rjmp	.+20     	; 0x904 <__stack+0x5>
    }
    else if(index == 3){
     8f0:	93 30       	cpi	r25, 0x03	; 3
     8f2:	59 f4       	brne	.+22     	; 0x90a <__stack+0xb>
      nrf24l01p_read_modify_write_register( 0x06, 2, 1 );
     8f4:	86 e0       	ldi	r24, 0x06	; 6
     8f6:	62 e0       	ldi	r22, 0x02	; 2
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	0e 94 96 02 	call	0x52c	; 0x52c <nrf24l01p_read_modify_write_register>
      nrf24l01p_read_modify_write_register( 0x06, 1, 1 );
     8fe:	86 e0       	ldi	r24, 0x06	; 6
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	0e 94 96 02 	call	0x52c	; 0x52c <nrf24l01p_read_modify_write_register>
     908:	08 95       	ret
    }else{
      nrf24l01p_read_modify_write_register( 0x06, 2, 1 );
     90a:	86 e0       	ldi	r24, 0x06	; 6
     90c:	62 e0       	ldi	r22, 0x02	; 2
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	0e 94 96 02 	call	0x52c	; 0x52c <nrf24l01p_read_modify_write_register>
      nrf24l01p_read_modify_write_register( 0x06, 1, 1 );
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	0e 94 96 02 	call	0x52c	; 0x52c <nrf24l01p_read_modify_write_register>
     91e:	08 95       	ret

00000920 <nrf24l01p_tx_power_get>:
    return 0;
  }
}

uint8_t nrf24l01p_error_free(void){
  if(nrf24l01p_error_get() == 0){
     920:	80 91 2d 01 	lds	r24, 0x012D
     924:	88 23       	and	r24, r24
     926:	11 f0       	breq	.+4      	; 0x92c <nrf24l01p_tx_power_get+0xc>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	08 95       	ret
  }
}

uint8_t nrf24l01p_tx_power_get(void){
  if(nrf24l01p_error_free()){
    nrf24l01p_readwrite_register( 0x06, 1, nrf24l01p.tempbuf, 1 );
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	4f e0       	ldi	r20, 0x0F	; 15
     932:	51 e0       	ldi	r21, 0x01	; 1
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
    nrf24l01p.tempbuf[0] >>= 1;
    nrf24l01p.tempbuf[0] &= 0x03;
     93a:	80 91 0f 01 	lds	r24, 0x010F
     93e:	86 95       	lsr	r24
     940:	83 70       	andi	r24, 0x03	; 3
     942:	80 93 0f 01 	sts	0x010F, r24
    return nrf24l01p.tempbuf[0];
  }else{
    return 0;
  }
}  
     946:	08 95       	ret

00000948 <nrf24l01p_own_addr_set>:

void nrf24l01p_own_addr_set(uint8_t addr){
  nrf24l01p.address.own=addr;
     948:	80 93 11 01 	sts	0x0111, r24
}
     94c:	08 95       	ret

0000094e <nrf24l01p_own_addr_get>:

uint8_t nrf24l01p_own_addr_get(void){
  return nrf24l01p.address.own;
}
     94e:	80 91 11 01 	lds	r24, 0x0111
     952:	08 95       	ret

00000954 <nrf24l01p_dest_addr_set>:

void nrf24l01p_dest_addr_set(uint8_t addr){
  nrf24l01p.address.dest=addr;
     954:	80 93 12 01 	sts	0x0112, r24
}
     958:	08 95       	ret

0000095a <nrf24l01p_dest_addr_get>:

uint8_t nrf24l01p_dest_addr_get(void){
  return nrf24l01p.address.dest;
}
     95a:	80 91 12 01 	lds	r24, 0x0112
     95e:	08 95       	ret

00000960 <nrf24l01p_rxticks_set>:

void nrf24l01p_rxticks_set(uint16_t val){
  nrf24l01p.config.rxticks=val;
     960:	90 93 16 01 	sts	0x0116, r25
     964:	80 93 15 01 	sts	0x0115, r24
}
     968:	08 95       	ret

0000096a <nrf24l01p_rxticks_get>:

uint16_t nrf24l01p_rxticks_get(void){
  return nrf24l01p.config.rxticks;
}
     96a:	80 91 15 01 	lds	r24, 0x0115
     96e:	90 91 16 01 	lds	r25, 0x0116
     972:	08 95       	ret

00000974 <nrf24l01p_rx_timeout_set>:

void nrf24l01p_rx_timeout_set(uint16_t val){
  nrf24l01p.config.rxtimeout=val;
     974:	90 93 14 01 	sts	0x0114, r25
     978:	80 93 13 01 	sts	0x0113, r24
}
     97c:	08 95       	ret

0000097e <nrf24l01p_rx_timeout_get>:

uint16_t nrf24l01p_rx_timeout_get(void){
  return nrf24l01p.config.rxtimeout;
}
     97e:	80 91 13 01 	lds	r24, 0x0113
     982:	90 91 14 01 	lds	r25, 0x0114
     986:	08 95       	ret

00000988 <nrf24l01p_max_retransmission_set>:

void nrf24l01p_max_retransmission_set(uint16_t val){
  nrf24l01p.config.maxretry=val;
     988:	90 93 19 01 	sts	0x0119, r25
     98c:	80 93 18 01 	sts	0x0118, r24
}
     990:	08 95       	ret

00000992 <nrf24l01p_max_retransmission_get>:

uint16_t nrf24l01p_max_retransmission_get(void){
  return nrf24l01p.config.maxretry;
}
     992:	80 91 18 01 	lds	r24, 0x0118
     996:	90 91 19 01 	lds	r25, 0x0119
     99a:	08 95       	ret

0000099c <nrf24l01p_tx_basic>:

void nrf24l01p_tx_basic(uint8_t *buf, uint8_t len){
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	8c 01       	movw	r16, r24
     9a4:	f6 2e       	mov	r15, r22


/* error handling */

void nrf24l01p_error_clear(void){
  nrf24l01p.error = 0;
     9a6:	10 92 2d 01 	sts	0x012D, r1
  return nrf24l01p.config.maxretry;
}

void nrf24l01p_tx_basic(uint8_t *buf, uint8_t len){
  nrf24l01p_error_clear();
  nrf24l01p_flush_tx_buf();
     9aa:	0e 94 cc 02 	call	0x598	; 0x598 <nrf24l01p_flush_tx_buf>
  buf[nrf24l01p.spacealloc.blocks] = nrf24l01p.blocks.remaining;      //24
     9ae:	80 91 2a 01 	lds	r24, 0x012A
     9b2:	f8 01       	movw	r30, r16
     9b4:	e8 0f       	add	r30, r24
     9b6:	f1 1d       	adc	r31, r1
     9b8:	80 91 20 01 	lds	r24, 0x0120
     9bc:	80 83       	st	Z, r24
  buf[nrf24l01p.spacealloc.pid   ] = nrf24l01p.packet.txpid;          //25
     9be:	80 91 28 01 	lds	r24, 0x0128
     9c2:	f8 01       	movw	r30, r16
     9c4:	e8 0f       	add	r30, r24
     9c6:	f1 1d       	adc	r31, r1
     9c8:	80 91 1c 01 	lds	r24, 0x011C
     9cc:	80 83       	st	Z, r24
  buf[nrf24l01p.spacealloc.ack   ] = nrf24l01p.packet.ackreq;         //26
     9ce:	80 91 27 01 	lds	r24, 0x0127
     9d2:	f8 01       	movw	r30, r16
     9d4:	e8 0f       	add	r30, r24
     9d6:	f1 1d       	adc	r31, r1
     9d8:	80 91 1f 01 	lds	r24, 0x011F
     9dc:	80 83       	st	Z, r24
  buf[nrf24l01p.spacealloc.own   ] = nrf24l01p.address.own;           //27
     9de:	80 91 26 01 	lds	r24, 0x0126
     9e2:	f8 01       	movw	r30, r16
     9e4:	e8 0f       	add	r30, r24
     9e6:	f1 1d       	adc	r31, r1
     9e8:	80 91 11 01 	lds	r24, 0x0111
     9ec:	80 83       	st	Z, r24
  buf[nrf24l01p.spacealloc.dest  ] = nrf24l01p.address.dest;          //28
     9ee:	80 91 25 01 	lds	r24, 0x0125
     9f2:	f8 01       	movw	r30, r16
     9f4:	e8 0f       	add	r30, r24
     9f6:	f1 1d       	adc	r31, r1
     9f8:	80 91 12 01 	lds	r24, 0x0112
     9fc:	80 83       	st	Z, r24
  buf[nrf24l01p.spacealloc.len   ] = len;                             //29
     9fe:	80 91 24 01 	lds	r24, 0x0124
     a02:	f8 01       	movw	r30, r16
     a04:	e8 0f       	add	r30, r24
     a06:	f1 1d       	adc	r31, r1
     a08:	f0 82       	st	Z, r15
  uint16_t temp = nrf24l01p_crc_block( buf, nrf24l01p.spacealloc.crclen );
     a0a:	c8 01       	movw	r24, r16
     a0c:	60 91 29 01 	lds	r22, 0x0129
     a10:	0e 94 22 02 	call	0x444	; 0x444 <nrf24l01p_crc_block>
  buf[nrf24l01p.spacealloc.crcmsb] = (temp & 0xFF00)>>8;              //30
     a14:	20 91 22 01 	lds	r18, 0x0122
     a18:	f8 01       	movw	r30, r16
     a1a:	e2 0f       	add	r30, r18
     a1c:	f1 1d       	adc	r31, r1
     a1e:	90 83       	st	Z, r25
  buf[nrf24l01p.spacealloc.crclsb] = (temp & 0x00FF);                 //31
     a20:	90 91 23 01 	lds	r25, 0x0123
     a24:	f8 01       	movw	r30, r16
     a26:	e9 0f       	add	r30, r25
     a28:	f1 1d       	adc	r31, r1
     a2a:	80 83       	st	Z, r24
  nrf24l01p_write_data_tx_buf(buf);
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <nrf24l01p_write_data_tx_buf>
  nrf24l01p_mode_set(3);                                               //tx
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	0e 94 b7 03 	call	0x76e	; 0x76e <nrf24l01p_mode_set>
  nrf24l01p_wait_tx_complete(); 
     a38:	0e 94 33 03 	call	0x666	; 0x666 <nrf24l01p_wait_tx_complete>
  nrf24l01p_mode_set(2);                                               //rx
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	0e 94 b7 03 	call	0x76e	; 0x76e <nrf24l01p_mode_set>
}
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	08 95       	ret

00000a4a <nrf24l01p_rx_basic>:


uint8_t nrf24l01p_rx_basic(uint8_t *buf){
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	ec 01       	movw	r28, r24


/* error handling */

void nrf24l01p_error_clear(void){
  nrf24l01p.error = 0;
     a5c:	10 92 2d 01 	sts	0x012D, r1
uint8_t nrf24l01p_dest_addr_get(void){
  return nrf24l01p.address.dest;
}

void nrf24l01p_rxticks_set(uint16_t val){
  nrf24l01p.config.rxticks=val;
     a60:	10 92 16 01 	sts	0x0116, r1
     a64:	10 92 15 01 	sts	0x0115, r1
     a68:	7c e2       	ldi	r23, 0x2C	; 44
     a6a:	c7 2e       	mov	r12, r23
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	d7 2e       	mov	r13, r23
     a70:	3c c0       	rjmp	.+120    	; 0xaea <nrf24l01p_rx_basic+0xa0>
uint8_t nrf24l01p_rx_basic(uint8_t *buf){
  uint8_t sts=0;
  nrf24l01p_error_clear();
  nrf24l01p_rxticks_set(0);
  while(nrf24l01p_rxticks_get() < nrf24l01p_rx_timeout_get()){
    if(nrf24l01p_rx_buf_not_empty()){
     a72:	0e 94 1f 03 	call	0x63e	; 0x63e <nrf24l01p_rx_buf_not_empty>
     a76:	88 23       	and	r24, r24
     a78:	61 f1       	breq	.+88     	; 0xad2 <nrf24l01p_rx_basic+0x88>
      nrf24l01p_read_data_rx_buf(buf);
     a7a:	ce 01       	movw	r24, r28
     a7c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <nrf24l01p_read_data_rx_buf>
	  uint16_t rec_crc=buf[nrf24l01p.spacealloc.crcmsb];               //30
     a80:	80 91 22 01 	lds	r24, 0x0122
     a84:	fe 01       	movw	r30, r28
     a86:	e8 0f       	add	r30, r24
     a88:	f1 1d       	adc	r31, r1
	  rec_crc<<=8;
     a8a:	f0 80       	ld	r15, Z
     a8c:	ee 24       	eor	r14, r14
	  rec_crc|=buf[nrf24l01p.spacealloc.crclsb];                       //31
     a8e:	80 91 23 01 	lds	r24, 0x0123
     a92:	fe 01       	movw	r30, r28
     a94:	e8 0f       	add	r30, r24
     a96:	f1 1d       	adc	r31, r1
     a98:	00 81       	ld	r16, Z
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	0e 29       	or	r16, r14
     a9e:	1f 29       	or	r17, r15
      uint16_t calc_crc=nrf24l01p_crc_block(buf, nrf24l01p.spacealloc.crclen);
     aa0:	ce 01       	movw	r24, r28
     aa2:	60 91 29 01 	lds	r22, 0x0129
     aa6:	0e 94 22 02 	call	0x444	; 0x444 <nrf24l01p_crc_block>
      if(rec_crc == calc_crc){
     aaa:	08 17       	cp	r16, r24
     aac:	19 07       	cpc	r17, r25
     aae:	e9 f4       	brne	.+58     	; 0xaea <nrf24l01p_rx_basic+0xa0>
	    nrf24l01p.packet.rxpid = buf[nrf24l01p.spacealloc.pid];        //25
     ab0:	80 91 28 01 	lds	r24, 0x0128
     ab4:	fe 01       	movw	r30, r28
     ab6:	e8 0f       	add	r30, r24
     ab8:	f1 1d       	adc	r31, r1
     aba:	80 81       	ld	r24, Z
     abc:	80 93 1d 01 	sts	0x011D, r24
	    nrf24l01p.blocks.remaining = buf[nrf24l01p.spacealloc.blocks]; //24
     ac0:	80 91 2a 01 	lds	r24, 0x012A
     ac4:	c8 0f       	add	r28, r24
     ac6:	d1 1d       	adc	r29, r1
     ac8:	88 81       	ld	r24, Y
     aca:	80 93 20 01 	sts	0x0120, r24
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	19 c0       	rjmp	.+50     	; 0xb04 <nrf24l01p_rx_basic+0xba>
     ad2:	c6 01       	movw	r24, r12
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <nrf24l01p_rx_basic+0x8a>
		sts=1;
		break;
	  }
    }else{
      _delay_us(100);
      nrf24l01p.config.rxticks++;
     ad8:	80 91 15 01 	lds	r24, 0x0115
     adc:	90 91 16 01 	lds	r25, 0x0116
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	90 93 16 01 	sts	0x0116, r25
     ae6:	80 93 15 01 	sts	0x0115, r24

uint8_t nrf24l01p_rx_basic(uint8_t *buf){
  uint8_t sts=0;
  nrf24l01p_error_clear();
  nrf24l01p_rxticks_set(0);
  while(nrf24l01p_rxticks_get() < nrf24l01p_rx_timeout_get()){
     aea:	20 91 15 01 	lds	r18, 0x0115
     aee:	30 91 16 01 	lds	r19, 0x0116
     af2:	80 91 13 01 	lds	r24, 0x0113
     af6:	90 91 14 01 	lds	r25, 0x0114
     afa:	28 17       	cp	r18, r24
     afc:	39 07       	cpc	r19, r25
     afe:	08 f4       	brcc	.+2      	; 0xb02 <nrf24l01p_rx_basic+0xb8>
     b00:	b8 cf       	rjmp	.-144    	; 0xa72 <nrf24l01p_rx_basic+0x28>
     b02:	80 e0       	ldi	r24, 0x00	; 0
      _delay_us(100);
      nrf24l01p.config.rxticks++;
	}
  }
  return sts;
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	08 95       	ret

00000b16 <nrf24l01p_tx_with_ack>:


uint8_t nrf24l01p_tx_with_ack(uint8_t *buf, uint8_t len){
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	df 93       	push	r29
     b20:	cf 93       	push	r28
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	a0 97       	sbiw	r28, 0x20	; 32
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
void nrf24l01p_rx_timeout_set(uint16_t val){
  nrf24l01p.config.rxtimeout=val;
}

uint16_t nrf24l01p_rx_timeout_get(void){
  return nrf24l01p.config.rxtimeout;
     b32:	e0 90 13 01 	lds	r14, 0x0113
     b36:	f0 90 14 01 	lds	r15, 0x0114
uint16_t nrf24l01p_rxticks_get(void){
  return nrf24l01p.config.rxticks;
}

void nrf24l01p_rx_timeout_set(uint16_t val){
  nrf24l01p.config.rxtimeout=val;
     b3a:	25 e0       	ldi	r18, 0x05	; 5
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	30 93 14 01 	sts	0x0114, r19
     b42:	20 93 13 01 	sts	0x0113, r18

uint8_t nrf24l01p_tx_with_ack(uint8_t *buf, uint8_t len){
  uint8_t  sts = 0, ack_buf[32];
  uint16_t timeout_mem = nrf24l01p_rx_timeout_get();
  nrf24l01p_rx_timeout_set(nRF24L01P_TX_ACK_RCV_TIMEOUT);
  nrf24l01p_tx_basic(buf, len);
     b46:	0e 94 ce 04 	call	0x99c	; 0x99c <nrf24l01p_tx_basic>
  if( nrf24l01p.packet.ackreq ){                    //need to improve ack type
     b4a:	80 91 1f 01 	lds	r24, 0x011F
     b4e:	88 23       	and	r24, r24
     b50:	a1 f0       	breq	.+40     	; 0xb7a <nrf24l01p_tx_with_ack+0x64>
    if( nrf24l01p_rx_basic(ack_buf) ){
     b52:	8e 01       	movw	r16, r28
     b54:	0f 5f       	subi	r16, 0xFF	; 255
     b56:	1f 4f       	sbci	r17, 0xFF	; 255
     b58:	c8 01       	movw	r24, r16
     b5a:	0e 94 25 05 	call	0xa4a	; 0xa4a <nrf24l01p_rx_basic>
     b5e:	88 23       	and	r24, r24
     b60:	61 f0       	breq	.+24     	; 0xb7a <nrf24l01p_tx_with_ack+0x64>
      if( nrf24l01p_own_addr_get() == ack_buf[nrf24l01p.spacealloc.dest] ){
     b62:	80 91 25 01 	lds	r24, 0x0125
     b66:	08 0f       	add	r16, r24
     b68:	11 1d       	adc	r17, r1
     b6a:	90 91 11 01 	lds	r25, 0x0111
     b6e:	f8 01       	movw	r30, r16
     b70:	80 81       	ld	r24, Z
     b72:	98 17       	cp	r25, r24
     b74:	11 f4       	brne	.+4      	; 0xb7a <nrf24l01p_tx_with_ack+0x64>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <nrf24l01p_tx_with_ack+0x66>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
uint16_t nrf24l01p_rxticks_get(void){
  return nrf24l01p.config.rxticks;
}

void nrf24l01p_rx_timeout_set(uint16_t val){
  nrf24l01p.config.rxtimeout=val;
     b7c:	f0 92 14 01 	sts	0x0114, r15
     b80:	e0 92 13 01 	sts	0x0113, r14
      }
    }
  }
  nrf24l01p_rx_timeout_set(timeout_mem);
  return sts;
}
     b84:	a0 96       	adiw	r28, 0x20	; 32
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <nrf24l01p_rx_with_ack>:

uint8_t nrf24l01p_rx_with_ack(uint8_t *buf){
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	a0 97       	sbiw	r28, 0x20	; 32
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	8c 01       	movw	r16, r24
  uint8_t sts=0, ack_buf[32]="~^~";
     bb8:	8e e7       	ldi	r24, 0x7E	; 126
     bba:	9e e5       	ldi	r25, 0x5E	; 94
     bbc:	ae e7       	ldi	r26, 0x7E	; 126
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	ab 83       	std	Y+3, r26	; 0x03
     bc6:	bc 83       	std	Y+4, r27	; 0x04
     bc8:	fe 01       	movw	r30, r28
     bca:	35 96       	adiw	r30, 0x05	; 5
     bcc:	8c e1       	ldi	r24, 0x1C	; 28
     bce:	df 01       	movw	r26, r30
     bd0:	1d 92       	st	X+, r1
     bd2:	8a 95       	dec	r24
     bd4:	e9 f7       	brne	.-6      	; 0xbd0 <nrf24l01p_rx_with_ack+0x32>
  if( nrf24l01p_rx_basic(buf) ){
     bd6:	c8 01       	movw	r24, r16
     bd8:	0e 94 25 05 	call	0xa4a	; 0xa4a <nrf24l01p_rx_basic>
     bdc:	88 23       	and	r24, r24
     bde:	a9 f1       	breq	.+106    	; 0xc4a <nrf24l01p_rx_with_ack+0xac>
    if( ((buf[nrf24l01p.spacealloc.ack] & 1)==1) && ( nrf24l01p_own_addr_get() == buf[nrf24l01p.spacealloc.dest]) ){ //check ack type
     be0:	80 91 27 01 	lds	r24, 0x0127
     be4:	f8 01       	movw	r30, r16
     be6:	e8 0f       	add	r30, r24
     be8:	f1 1d       	adc	r31, r1
     bea:	80 81       	ld	r24, Z
     bec:	80 ff       	sbrs	r24, 0
     bee:	2d c0       	rjmp	.+90     	; 0xc4a <nrf24l01p_rx_with_ack+0xac>
     bf0:	80 91 25 01 	lds	r24, 0x0125
     bf4:	f8 01       	movw	r30, r16
     bf6:	e8 0f       	add	r30, r24
     bf8:	f1 1d       	adc	r31, r1
     bfa:	90 91 11 01 	lds	r25, 0x0111
     bfe:	80 81       	ld	r24, Z
     c00:	98 17       	cp	r25, r24
     c02:	19 f5       	brne	.+70     	; 0xc4a <nrf24l01p_rx_with_ack+0xac>
     c04:	8c ed       	ldi	r24, 0xDC	; 220
     c06:	95 e0       	ldi	r25, 0x05	; 5
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <nrf24l01p_rx_with_ack+0x6a>
uint8_t nrf24l01p_own_addr_get(void){
  return nrf24l01p.address.own;
}

void nrf24l01p_dest_addr_set(uint8_t addr){
  nrf24l01p.address.dest=addr;
     c0c:	80 91 26 01 	lds	r24, 0x0126
     c10:	f8 01       	movw	r30, r16
     c12:	e8 0f       	add	r30, r24
     c14:	f1 1d       	adc	r31, r1
     c16:	80 81       	ld	r24, Z
     c18:	80 93 12 01 	sts	0x0112, r24
  uint8_t sts=0, ack_buf[32]="~^~";
  if( nrf24l01p_rx_basic(buf) ){
    if( ((buf[nrf24l01p.spacealloc.ack] & 1)==1) && ( nrf24l01p_own_addr_get() == buf[nrf24l01p.spacealloc.dest]) ){ //check ack type
      _delay_us(nRF24L01P_RX_ACK_SEND_DELAY);                                                                                               //check delay
	  nrf24l01p_dest_addr_set(buf[nrf24l01p.spacealloc.own]);
	  nrf24l01p.packet.txpid = buf[nrf24l01p.spacealloc.pid];
     c1c:	80 91 28 01 	lds	r24, 0x0128
     c20:	f8 01       	movw	r30, r16
     c22:	e8 0f       	add	r30, r24
     c24:	f1 1d       	adc	r31, r1
     c26:	80 81       	ld	r24, Z
     c28:	80 93 1c 01 	sts	0x011C, r24
	  nrf24l01p.blocks.remaining = buf[nrf24l01p.spacealloc.blocks];
     c2c:	80 91 2a 01 	lds	r24, 0x012A
     c30:	08 0f       	add	r16, r24
     c32:	11 1d       	adc	r17, r1
     c34:	f8 01       	movw	r30, r16
     c36:	80 81       	ld	r24, Z
     c38:	80 93 20 01 	sts	0x0120, r24
      nrf24l01p_tx_basic(ack_buf, 3);
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	63 e0       	ldi	r22, 0x03	; 3
     c42:	0e 94 ce 04 	call	0x99c	; 0x99c <nrf24l01p_tx_basic>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <nrf24l01p_rx_with_ack+0xae>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
      sts=1;
    }
  }
  return sts;
}
     c4c:	a0 96       	adiw	r28, 0x20	; 32
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <nrf24l01p_init>:

void nrf24l01p_init(void){
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
  nrf24l01p_struct_init();
     c68:	0e 94 0c 01 	call	0x218	; 0x218 <nrf24l01p_struct_init>
  nrf24l01p_enable();
     c6c:	0e 94 b5 01 	call	0x36a	; 0x36a <nrf24l01p_enable>
  nrf24l01p.tempbuf[0] = 0x00;  nrf24l01p_readwrite_register( 0x00, 0, nrf24l01p.tempbuf, 1 );
     c70:	0f e0       	ldi	r16, 0x0F	; 15
     c72:	11 e0       	ldi	r17, 0x01	; 1
     c74:	10 92 0f 01 	sts	0x010F, r1
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	a8 01       	movw	r20, r16
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = 0x00;  nrf24l01p_readwrite_register( 0x01, 0, nrf24l01p.tempbuf, 1 );
     c84:	10 92 0f 01 	sts	0x010F, r1
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	a8 01       	movw	r20, r16
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = 0x03;  nrf24l01p_readwrite_register( 0x02, 0, nrf24l01p.tempbuf, 1 );
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	80 93 0f 01 	sts	0x010F, r24
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	a8 01       	movw	r20, r16
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = 0x01;  nrf24l01p_readwrite_register( 0x03, 0, nrf24l01p.tempbuf, 1 );
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 0f 01 	sts	0x010F, r24
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	a8 01       	movw	r20, r16
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = 0x00;  nrf24l01p_readwrite_register( 0x04, 0, nrf24l01p.tempbuf, 1 );
     cb8:	10 92 0f 01 	sts	0x010F, r1
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	a8 01       	movw	r20, r16
     cc2:	21 e0       	ldi	r18, 0x01	; 1
     cc4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = 0x02;  nrf24l01p_readwrite_register( 0x05, 0, nrf24l01p.tempbuf, 1 );
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	80 93 0f 01 	sts	0x010F, r24
     cce:	85 e0       	ldi	r24, 0x05	; 5
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	a8 01       	movw	r20, r16
     cd4:	21 e0       	ldi	r18, 0x01	; 1
     cd6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = 0x26;  nrf24l01p_readwrite_register( 0x06, 0, nrf24l01p.tempbuf, 1 ); 
     cda:	86 e2       	ldi	r24, 0x26	; 38
     cdc:	80 93 0f 01 	sts	0x010F, r24
     ce0:	86 e0       	ldi	r24, 0x06	; 6
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	a8 01       	movw	r20, r16
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = 0x70;  nrf24l01p_readwrite_register( 0x07, 0, nrf24l01p.tempbuf, 1 );
     cec:	80 e7       	ldi	r24, 0x70	; 112
     cee:	80 93 0f 01 	sts	0x010F, r24
     cf2:	87 e0       	ldi	r24, 0x07	; 7
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	a8 01       	movw	r20, r16
     cf8:	21 e0       	ldi	r18, 0x01	; 1
     cfa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = nRF24L01P_PACKET_LEN;  
     cfe:	e0 e2       	ldi	r30, 0x20	; 32
     d00:	fe 2e       	mov	r15, r30
     d02:	f0 92 0f 01 	sts	0x010F, r15
  nrf24l01p_readwrite_register( 0x11, 0, nrf24l01p.tempbuf, 1 );
     d06:	81 e1       	ldi	r24, 0x11	; 17
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	a8 01       	movw	r20, r16
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = nRF24L01P_PACKET_LEN;  
     d12:	f0 92 0f 01 	sts	0x010F, r15
  nrf24l01p_readwrite_register( 0x12, 0, nrf24l01p.tempbuf, 1 );
     d16:	82 e1       	ldi	r24, 0x12	; 18
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	a8 01       	movw	r20, r16
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = 0x00;  nrf24l01p_readwrite_register( 0x1C, 0, nrf24l01p.tempbuf, 1 );
     d22:	10 92 0f 01 	sts	0x010F, r1
     d26:	8c e1       	ldi	r24, 0x1C	; 28
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	a8 01       	movw	r20, r16
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p.tempbuf[0] = 0x00;  nrf24l01p_readwrite_register( 0x1D, 0, nrf24l01p.tempbuf, 1 );
     d32:	10 92 0f 01 	sts	0x010F, r1
     d36:	8d e1       	ldi	r24, 0x1D	; 29
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	a8 01       	movw	r20, r16
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p_readwrite_register( 0x10, 0, (uint8_t*)"ACK00", 5 );
     d42:	00 e0       	ldi	r16, 0x00	; 0
     d44:	11 e0       	ldi	r17, 0x01	; 1
     d46:	80 e1       	ldi	r24, 0x10	; 16
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	a8 01       	movw	r20, r16
     d4c:	25 e0       	ldi	r18, 0x05	; 5
     d4e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p_readwrite_register( 0x0A, 0, (uint8_t*)"ACK00", 5 );
     d52:	8a e0       	ldi	r24, 0x0A	; 10
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	a8 01       	movw	r20, r16
     d58:	25 e0       	ldi	r18, 0x05	; 5
     d5a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nrf24l01p_readwrite_register>
  nrf24l01p_mode_set(2);
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	0e 94 b7 03 	call	0x76e	; 0x76e <nrf24l01p_mode_set>
}
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	08 95       	ret

00000d6c <Vsns_ADC_Reference_Internal>:
#define  VSNS_AVG_SMPL   0x08

uint16_t vsns_cal_val=0;

void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
     d6c:	ec e7       	ldi	r30, 0x7C	; 124
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 6c       	ori	r24, 0xC0	; 192
     d74:	80 83       	st	Z, r24
}
     d76:	08 95       	ret

00000d78 <Vsns_ADC_Reference_Avcc>:

void Vsns_ADC_Reference_Avcc(void){
  ADMUX&=~(1<<REFS1);
     d78:	ec e7       	ldi	r30, 0x7C	; 124
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 77       	andi	r24, 0x7F	; 127
     d80:	80 83       	st	Z, r24
  ADMUX|=(1<<REFS0);
     d82:	80 81       	ld	r24, Z
     d84:	80 64       	ori	r24, 0x40	; 64
     d86:	80 83       	st	Z, r24
}
     d88:	08 95       	ret

00000d8a <Vsns_ADC_Enable>:

void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
     d8a:	ea e7       	ldi	r30, 0x7A	; 122
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 68       	ori	r24, 0x80	; 128
     d92:	80 83       	st	Z, r24
}
     d94:	08 95       	ret

00000d96 <Vsns_ADC_Disable>:

void Vsns_ADC_Disable(void){
  ADCSRA&=~(1<<ADEN);
     d96:	ea e7       	ldi	r30, 0x7A	; 122
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 77       	andi	r24, 0x7F	; 127
     d9e:	80 83       	st	Z, r24
  ACSR|=(1<<ACD);
     da0:	80 b7       	in	r24, 0x30	; 48
     da2:	80 68       	ori	r24, 0x80	; 128
     da4:	80 bf       	out	0x30, r24	; 48
}
     da6:	08 95       	ret

00000da8 <Vsns_ADC_Init>:

void Vsns_ADC_Init(void){
  ADCSRA =(1<<ADPS1)|(1<<ADPS2);
     da8:	ea e7       	ldi	r30, 0x7A	; 122
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	86 e0       	ldi	r24, 0x06	; 6
     dae:	80 83       	st	Z, r24
  ADCSRA|=(1<<ADEN);
     db0:	80 81       	ld	r24, Z
     db2:	80 68       	ori	r24, 0x80	; 128
     db4:	80 83       	st	Z, r24
}
     db6:	08 95       	ret

00000db8 <Vsns_ADC_Read>:

uint16_t Vsns_ADC_Read(uint8_t channel){
  uint8_t admux=(ADMUX & 0xC0);
     db8:	90 91 7c 00 	lds	r25, 0x007C
     dbc:	90 7c       	andi	r25, 0xC0	; 192
  admux|=channel;
     dbe:	98 2b       	or	r25, r24
  if(ADMUX!=admux){ADMUX=admux;}
     dc0:	80 91 7c 00 	lds	r24, 0x007C
     dc4:	89 17       	cp	r24, r25
     dc6:	11 f0       	breq	.+4      	; 0xdcc <Vsns_ADC_Read+0x14>
     dc8:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA|=(1<<ADSC);
     dcc:	80 91 7a 00 	lds	r24, 0x007A
     dd0:	80 64       	ori	r24, 0x40	; 64
     dd2:	80 93 7a 00 	sts	0x007A, r24
  while(!(ADCSRA &(1<<ADIF)));
     dd6:	80 91 7a 00 	lds	r24, 0x007A
     dda:	84 ff       	sbrs	r24, 4
     ddc:	fc cf       	rjmp	.-8      	; 0xdd6 <Vsns_ADC_Read+0x1e>
  ADCSRA|=(1<<ADIF);
     dde:	80 91 7a 00 	lds	r24, 0x007A
     de2:	80 61       	ori	r24, 0x10	; 16
     de4:	80 93 7a 00 	sts	0x007A, r24
  return ADCW;
     de8:	20 91 78 00 	lds	r18, 0x0078
     dec:	30 91 79 00 	lds	r19, 0x0079
}
     df0:	c9 01       	movw	r24, r18
     df2:	08 95       	ret

00000df4 <Vsns_PMOS_Enable>:



void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
     df4:	41 9a       	sbi	0x08, 1	; 8
}
     df6:	08 95       	ret

00000df8 <Vsns_PMOS_Disable>:

void Vsns_PMOS_Disable(void){
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
     df8:	41 98       	cbi	0x08, 1	; 8
}
     dfa:	08 95       	ret

00000dfc <Vsns_V_Read>:

uint16_t Vsns_V_Read(void){
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
}



void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
     e06:	41 9a       	sbi	0x08, 1	; 8
#define  VSNS_AVG_SMPL   0x08

uint16_t vsns_cal_val=0;

void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
     e08:	80 91 7c 00 	lds	r24, 0x007C
     e0c:	80 6c       	ori	r24, 0xC0	; 192
     e0e:	80 93 7c 00 	sts	0x007C, r24
  ADMUX&=~(1<<REFS1);
  ADMUX|=(1<<REFS0);
}

void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
     e12:	80 91 7a 00 	lds	r24, 0x007A
     e16:	80 68       	ori	r24, 0x80	; 128
     e18:	80 93 7a 00 	sts	0x007A, r24
     e1c:	10 e0       	ldi	r17, 0x00	; 0
  Vsns_PMOS_Enable();
  Vsns_ADC_Reference_Internal();
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<VSNS_DUMMY_SMPL;i++){
    Vsns_ADC_Read(0x06);
     e1e:	86 e0       	ldi	r24, 0x06	; 6
     e20:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <Vsns_ADC_Read>
uint16_t Vsns_V_Read(void){
  Vsns_PMOS_Enable();
  Vsns_ADC_Reference_Internal();
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<VSNS_DUMMY_SMPL;i++){
     e24:	1f 5f       	subi	r17, 0xFF	; 255
     e26:	14 30       	cpi	r17, 0x04	; 4
     e28:	d1 f7       	brne	.-12     	; 0xe1e <Vsns_V_Read+0x22>
     e2a:	dd 24       	eor	r13, r13
     e2c:	ee 24       	eor	r14, r14
     e2e:	ff 24       	eor	r15, r15
     e30:	87 01       	movw	r16, r14
    Vsns_ADC_Read(0x06);
  }
  for(uint8_t i=0;i<VSNS_AVG_SMPL;i++){
    temp+=Vsns_ADC_Read(0x06);
     e32:	86 e0       	ldi	r24, 0x06	; 6
     e34:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <Vsns_ADC_Read>
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e8 0e       	add	r14, r24
     e3e:	f9 1e       	adc	r15, r25
     e40:	0a 1f       	adc	r16, r26
     e42:	1b 1f       	adc	r17, r27
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<VSNS_DUMMY_SMPL;i++){
    Vsns_ADC_Read(0x06);
  }
  for(uint8_t i=0;i<VSNS_AVG_SMPL;i++){
     e44:	d3 94       	inc	r13
     e46:	88 e0       	ldi	r24, 0x08	; 8
     e48:	d8 16       	cp	r13, r24
     e4a:	99 f7       	brne	.-26     	; 0xe32 <Vsns_V_Read+0x36>
void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
}

void Vsns_ADC_Disable(void){
  ADCSRA&=~(1<<ADEN);
     e4c:	80 91 7a 00 	lds	r24, 0x007A
     e50:	8f 77       	andi	r24, 0x7F	; 127
     e52:	80 93 7a 00 	sts	0x007A, r24
  ACSR|=(1<<ACD);
     e56:	80 b7       	in	r24, 0x30	; 48
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	80 bf       	out	0x30, r24	; 48
void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
}

void Vsns_PMOS_Disable(void){
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
     e5c:	41 98       	cbi	0x08, 1	; 8
  for(uint8_t i=0;i<VSNS_AVG_SMPL;i++){
    temp+=Vsns_ADC_Read(0x06);
  }
  Vsns_ADC_Disable();
  Vsns_PMOS_Disable();
  temp/=VSNS_AVG_SMPL;
     e5e:	33 e0       	ldi	r19, 0x03	; 3
     e60:	16 95       	lsr	r17
     e62:	07 95       	ror	r16
     e64:	f7 94       	ror	r15
     e66:	e7 94       	ror	r14
     e68:	3a 95       	dec	r19
     e6a:	d1 f7       	brne	.-12     	; 0xe60 <Vsns_V_Read+0x64>
  temp*=16;
     e6c:	60 91 0a 01 	lds	r22, 0x010A
     e70:	70 91 0b 01 	lds	r23, 0x010B
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	24 e0       	ldi	r18, 0x04	; 4
     e7a:	66 0f       	add	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	88 1f       	adc	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	2a 95       	dec	r18
     e84:	d1 f7       	brne	.-12     	; 0xe7a <Vsns_V_Read+0x7e>
  temp*=Vsns_Get_Cal_Val();
     e86:	a8 01       	movw	r20, r16
     e88:	97 01       	movw	r18, r14
     e8a:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsi3>
     e8e:	9b 01       	movw	r18, r22
     e90:	ac 01       	movw	r20, r24
     e92:	8a e0       	ldi	r24, 0x0A	; 10
     e94:	56 95       	lsr	r21
     e96:	47 95       	ror	r20
     e98:	37 95       	ror	r19
     e9a:	27 95       	ror	r18
     e9c:	8a 95       	dec	r24
     e9e:	d1 f7       	brne	.-12     	; 0xe94 <Vsns_V_Read+0x98>
  temp/=1024;
  return (uint16_t)temp;
}
     ea0:	c9 01       	movw	r24, r18
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	08 95       	ret

00000eae <Vsns_Calibrate_Iref>:

uint16_t Vsns_Calibrate_Iref(void){
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
}

void Vsns_ADC_Reference_Avcc(void){
  ADMUX&=~(1<<REFS1);
     eb8:	80 91 7c 00 	lds	r24, 0x007C
     ebc:	8f 77       	andi	r24, 0x7F	; 127
     ebe:	80 93 7c 00 	sts	0x007C, r24
  ADMUX|=(1<<REFS0);
     ec2:	80 91 7c 00 	lds	r24, 0x007C
     ec6:	80 64       	ori	r24, 0x40	; 64
     ec8:	80 93 7c 00 	sts	0x007C, r24
}



void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
     ecc:	41 9a       	sbi	0x08, 1	; 8
  ADMUX&=~(1<<REFS1);
  ADMUX|=(1<<REFS0);
}

void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
     ece:	80 91 7a 00 	lds	r24, 0x007A
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	80 93 7a 00 	sts	0x007A, r24
     ed8:	10 e0       	ldi	r17, 0x00	; 0
  Vsns_ADC_Reference_Avcc();
  Vsns_PMOS_Enable();
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<16;i++){
    Vsns_ADC_Read(0x0E);
     eda:	8e e0       	ldi	r24, 0x0E	; 14
     edc:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <Vsns_ADC_Read>
uint16_t Vsns_Calibrate_Iref(void){
  Vsns_ADC_Reference_Avcc();
  Vsns_PMOS_Enable();
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<16;i++){
     ee0:	1f 5f       	subi	r17, 0xFF	; 255
     ee2:	10 31       	cpi	r17, 0x10	; 16
     ee4:	d1 f7       	brne	.-12     	; 0xeda <Vsns_Calibrate_Iref+0x2c>
     ee6:	ee 24       	eor	r14, r14
     ee8:	ff 24       	eor	r15, r15
     eea:	87 01       	movw	r16, r14
     eec:	dd 24       	eor	r13, r13
    Vsns_ADC_Read(0x0E);
  }
  for(uint8_t i=0;i<32;i++){
    temp+=Vsns_ADC_Read(0x0E);
     eee:	8e e0       	ldi	r24, 0x0E	; 14
     ef0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <Vsns_ADC_Read>
     ef4:	a0 e0       	ldi	r26, 0x00	; 0
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 0e       	add	r14, r24
     efa:	f9 1e       	adc	r15, r25
     efc:	0a 1f       	adc	r16, r26
     efe:	1b 1f       	adc	r17, r27
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<16;i++){
    Vsns_ADC_Read(0x0E);
  }
  for(uint8_t i=0;i<32;i++){
     f00:	d3 94       	inc	r13
     f02:	80 e2       	ldi	r24, 0x20	; 32
     f04:	d8 16       	cp	r13, r24
     f06:	99 f7       	brne	.-26     	; 0xeee <Vsns_Calibrate_Iref+0x40>
void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
}

void Vsns_ADC_Disable(void){
  ADCSRA&=~(1<<ADEN);
     f08:	80 91 7a 00 	lds	r24, 0x007A
     f0c:	8f 77       	andi	r24, 0x7F	; 127
     f0e:	80 93 7a 00 	sts	0x007A, r24
  ACSR|=(1<<ACD);
     f12:	80 b7       	in	r24, 0x30	; 48
     f14:	80 68       	ori	r24, 0x80	; 128
     f16:	80 bf       	out	0x30, r24	; 48
void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
}

void Vsns_PMOS_Disable(void){
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
     f18:	41 98       	cbi	0x08, 1	; 8
  for(uint8_t i=0;i<32;i++){
    temp+=Vsns_ADC_Read(0x0E);
  }
  Vsns_ADC_Disable();
  Vsns_PMOS_Disable();
  temp/=32;
     f1a:	75 e0       	ldi	r23, 0x05	; 5
     f1c:	16 95       	lsr	r17
     f1e:	07 95       	ror	r16
     f20:	f7 94       	ror	r15
     f22:	e7 94       	ror	r14
     f24:	7a 95       	dec	r23
     f26:	d1 f7       	brne	.-12     	; 0xf1c <Vsns_Calibrate_Iref+0x6e>
  temp*=3300;
     f28:	c8 01       	movw	r24, r16
     f2a:	b7 01       	movw	r22, r14
     f2c:	24 ee       	ldi	r18, 0xE4	; 228
     f2e:	3c e0       	ldi	r19, 0x0C	; 12
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsi3>
     f38:	9b 01       	movw	r18, r22
     f3a:	ac 01       	movw	r20, r24
     f3c:	6a e0       	ldi	r22, 0x0A	; 10
     f3e:	56 95       	lsr	r21
     f40:	47 95       	ror	r20
     f42:	37 95       	ror	r19
     f44:	27 95       	ror	r18
     f46:	6a 95       	dec	r22
     f48:	d1 f7       	brne	.-12     	; 0xf3e <Vsns_Calibrate_Iref+0x90>
  temp/=1024;
  return (uint16_t)temp;
}
     f4a:	c9 01       	movw	r24, r18
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	08 95       	ret

00000f58 <Vsns_Get_Cal_Val>:
  return vsns_cal_val;
}

uint16_t Vsns_Get_Cal_Val(void){
  return vsns_cal_val;
}
     f58:	80 91 0a 01 	lds	r24, 0x010A
     f5c:	90 91 0b 01 	lds	r25, 0x010B
     f60:	08 95       	ret

00000f62 <Vsns_Calibrate>:
  temp/=1024;
  return (uint16_t)temp;
}

uint16_t Vsns_Calibrate(void){
  if( EEPROM_Read_Dword(1020) != 0x01020304 ){
     f62:	8c ef       	ldi	r24, 0xFC	; 252
     f64:	93 e0       	ldi	r25, 0x03	; 3
     f66:	0e 94 3b 09 	call	0x1276	; 0x1276 <EEPROM_Read_Dword>
     f6a:	64 50       	subi	r22, 0x04	; 4
     f6c:	73 40       	sbci	r23, 0x03	; 3
     f6e:	82 40       	sbci	r24, 0x02	; 2
     f70:	91 40       	sbci	r25, 0x01	; 1
     f72:	a9 f0       	breq	.+42     	; 0xf9e <Vsns_Calibrate+0x3c>
    EEPROM_Erase_Region(1018,1019);
     f74:	8a ef       	ldi	r24, 0xFA	; 250
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	6b ef       	ldi	r22, 0xFB	; 251
     f7a:	73 e0       	ldi	r23, 0x03	; 3
     f7c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <EEPROM_Erase_Region>
	uint16_t temp = Vsns_Calibrate_Iref();
     f80:	0e 94 57 07 	call	0xeae	; 0xeae <Vsns_Calibrate_Iref>
     f84:	bc 01       	movw	r22, r24
	EEPROM_Write_Word(1018, temp);
     f86:	8a ef       	ldi	r24, 0xFA	; 250
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	0e 94 2a 09 	call	0x1254	; 0x1254 <EEPROM_Write_Word>
	EEPROM_Write_Dword(1020, 0x01020304);
     f8e:	8c ef       	ldi	r24, 0xFC	; 252
     f90:	93 e0       	ldi	r25, 0x03	; 3
     f92:	44 e0       	ldi	r20, 0x04	; 4
     f94:	53 e0       	ldi	r21, 0x03	; 3
     f96:	62 e0       	ldi	r22, 0x02	; 2
     f98:	71 e0       	ldi	r23, 0x01	; 1
     f9a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <EEPROM_Write_Dword>
  }
  vsns_cal_val=EEPROM_Read_Word(1018);
     f9e:	8a ef       	ldi	r24, 0xFA	; 250
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	0e 94 13 09 	call	0x1226	; 0x1226 <EEPROM_Read_Word>
     fa6:	80 93 0a 01 	sts	0x010A, r24
     faa:	90 93 0b 01 	sts	0x010B, r25
  return vsns_cal_val;
}
     fae:	08 95       	ret

00000fb0 <Vsns_Init>:
uint16_t Vsns_Get_Cal_Val(void){
  return vsns_cal_val;
}

void Vsns_Init(void){
  VSNS_EN_DDR |= (1<<VSNS_EN_bp);
     fb0:	39 9a       	sbi	0x07, 1	; 7
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
     fb2:	41 98       	cbi	0x08, 1	; 8
#define  VSNS_AVG_SMPL   0x08

uint16_t vsns_cal_val=0;

void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
     fb4:	ec e7       	ldi	r30, 0x7C	; 124
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	80 6c       	ori	r24, 0xC0	; 192
     fbc:	80 83       	st	Z, r24
  ADCSRA&=~(1<<ADEN);
  ACSR|=(1<<ACD);
}

void Vsns_ADC_Init(void){
  ADCSRA =(1<<ADPS1)|(1<<ADPS2);
     fbe:	ea e7       	ldi	r30, 0x7A	; 122
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	86 e0       	ldi	r24, 0x06	; 6
     fc4:	80 83       	st	Z, r24
  ADCSRA|=(1<<ADEN);
     fc6:	80 81       	ld	r24, Z
     fc8:	80 68       	ori	r24, 0x80	; 128
     fca:	80 83       	st	Z, r24
void Vsns_Init(void){
  VSNS_EN_DDR |= (1<<VSNS_EN_bp);
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
  Vsns_ADC_Reference_Internal();
  Vsns_ADC_Init();
  Vsns_Calibrate();
     fcc:	0e 94 b1 07 	call	0xf62	; 0xf62 <Vsns_Calibrate>
  Vsns_V_Read();
     fd0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Vsns_V_Read>
     fd4:	08 95       	ret

00000fd6 <dataconv_nibble_to_hex_char>:
#include <avr/io.h>
#include <util/delay.h>

uint8_t dataconv_data_len=0;

uint8_t dataconv_nibble_to_hex_char(uint8_t val){
     fd6:	98 2f       	mov	r25, r24
  uint8_t hex=0;
  if(val<=9){
     fd8:	8a 30       	cpi	r24, 0x0A	; 10
     fda:	10 f4       	brcc	.+4      	; 0xfe0 <dataconv_nibble_to_hex_char+0xa>
    hex = val+48;
     fdc:	80 5d       	subi	r24, 0xD0	; 208
     fde:	08 95       	ret
  }else if(val>=10 && val<=15){
     fe0:	8a 50       	subi	r24, 0x0A	; 10
     fe2:	86 30       	cpi	r24, 0x06	; 6
     fe4:	10 f0       	brcs	.+4      	; 0xfea <dataconv_nibble_to_hex_char+0x14>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	08 95       	ret
    hex = val+55;
     fea:	89 2f       	mov	r24, r25
     fec:	89 5c       	subi	r24, 0xC9	; 201
  }
  return hex;
}
     fee:	08 95       	ret

00000ff0 <dataconv_byte_to_hex_char>:

void dataconv_byte_to_hex_char(uint8_t val, uint8_t *array, uint8_t start){
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	d8 2e       	mov	r13, r24
     ffc:	7b 01       	movw	r14, r22
  array[start]= dataconv_nibble_to_hex_char((val & 0xF0)>>4);
     ffe:	04 2f       	mov	r16, r20
    1000:	10 e0       	ldi	r17, 0x00	; 0
    1002:	82 95       	swap	r24
    1004:	8f 70       	andi	r24, 0x0F	; 15
    1006:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <dataconv_nibble_to_hex_char>
    100a:	e0 0e       	add	r14, r16
    100c:	f1 1e       	adc	r15, r17
    100e:	f7 01       	movw	r30, r14
    1010:	80 83       	st	Z, r24
  array[start+1]= dataconv_nibble_to_hex_char(val & 0x0F);
    1012:	8d 2d       	mov	r24, r13
    1014:	8f 70       	andi	r24, 0x0F	; 15
    1016:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <dataconv_nibble_to_hex_char>
    101a:	f7 01       	movw	r30, r14
    101c:	81 83       	std	Z+1, r24	; 0x01
}
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	08 95       	ret

0000102a <dataconv_word_to_hex_char>:

void dataconv_word_to_hex_char(uint16_t val, uint8_t *array, uint8_t start){
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	08 2f       	mov	r16, r24
    1034:	7b 01       	movw	r14, r22
    1036:	14 2f       	mov	r17, r20
  uint8_t msb = val >> 8;
  uint8_t lsb = val & 0xFF;
  dataconv_byte_to_hex_char(msb, array, start);
    1038:	89 2f       	mov	r24, r25
    103a:	0e 94 f8 07 	call	0xff0	; 0xff0 <dataconv_byte_to_hex_char>
  dataconv_byte_to_hex_char(lsb, array, start+2);
    103e:	1e 5f       	subi	r17, 0xFE	; 254
    1040:	80 2f       	mov	r24, r16
    1042:	b7 01       	movw	r22, r14
    1044:	41 2f       	mov	r20, r17
    1046:	0e 94 f8 07 	call	0xff0	; 0xff0 <dataconv_byte_to_hex_char>
}
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	08 95       	ret

00001054 <dataconv_dword_to_hex_char>:

void dataconv_dword_to_hex_char(uint32_t val, uint8_t *array, uint8_t start){
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	7b 01       	movw	r14, r22
    1064:	8c 01       	movw	r16, r24
    1066:	5a 01       	movw	r10, r20
    1068:	d2 2e       	mov	r13, r18
  uint16_t msword = val >> 16;
  uint16_t lsword = val & 0xFFFF;
  dataconv_word_to_hex_char(msword, array, start);
    106a:	c8 01       	movw	r24, r16
    106c:	aa 27       	eor	r26, r26
    106e:	bb 27       	eor	r27, r27
    1070:	ba 01       	movw	r22, r20
    1072:	42 2f       	mov	r20, r18
    1074:	0e 94 15 08 	call	0x102a	; 0x102a <dataconv_word_to_hex_char>
  dataconv_word_to_hex_char(lsword, array, start+4);
    1078:	84 e0       	ldi	r24, 0x04	; 4
    107a:	d8 0e       	add	r13, r24
    107c:	c7 01       	movw	r24, r14
    107e:	b5 01       	movw	r22, r10
    1080:	4d 2d       	mov	r20, r13
    1082:	0e 94 15 08 	call	0x102a	; 0x102a <dataconv_word_to_hex_char>
}
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	df 90       	pop	r13
    1090:	bf 90       	pop	r11
    1092:	af 90       	pop	r10
    1094:	08 95       	ret

00001096 <dataconv_dword_to_char>:

void dataconv_dword_to_char(uint32_t val, uint8_t *array, uint8_t start){
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	fa 01       	movw	r30, r20
  uint16_t msword = (val >> 16);
    10a0:	7c 01       	movw	r14, r24
    10a2:	00 27       	eor	r16, r16
    10a4:	11 27       	eor	r17, r17
  uint16_t lsword = (val & 0xFFFF);
  array[start]    = (msword >> 8);
    10a6:	e2 0f       	add	r30, r18
    10a8:	f1 1d       	adc	r31, r1
    10aa:	f0 82       	st	Z, r15
  array[start+1]  = (msword & 0xFF);
    10ac:	e1 82       	std	Z+1, r14	; 0x01
  array[start+2]  = (lsword >> 8);
    10ae:	72 83       	std	Z+2, r23	; 0x02
  array[start+3]  = (lsword & 0xFF);
    10b0:	63 83       	std	Z+3, r22	; 0x03
}
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	08 95       	ret

000010bc <dataconv_dword_to_num>:

void dataconv_dword_to_num(int32_t val, uint8_t *array, uint8_t start){
    10bc:	7f 92       	push	r7
    10be:	8f 92       	push	r8
    10c0:	9f 92       	push	r9
    10c2:	af 92       	push	r10
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	2a 97       	sbiw	r28, 0x0a	; 10
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	6b 01       	movw	r12, r22
    10e8:	7c 01       	movw	r14, r24
    10ea:	5a 01       	movw	r10, r20
    10ec:	72 2e       	mov	r7, r18
  uint8_t i=0, digits[8], total_digits=0, array_index=0;;

  if(val<0){
    10ee:	97 ff       	sbrs	r25, 7
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <dataconv_dword_to_num+0x54>
    val=-val;
    10f2:	f0 94       	com	r15
    10f4:	e0 94       	com	r14
    10f6:	d0 94       	com	r13
    10f8:	c0 94       	com	r12
    10fa:	c1 1c       	adc	r12, r1
    10fc:	d1 1c       	adc	r13, r1
    10fe:	e1 1c       	adc	r14, r1
    1100:	f1 1c       	adc	r15, r1
	array[start]='-';
    1102:	fa 01       	movw	r30, r20
    1104:	e2 0f       	add	r30, r18
    1106:	f1 1d       	adc	r31, r1
    1108:	8d e2       	ldi	r24, 0x2D	; 45
    110a:	80 83       	st	Z, r24
    110c:	11 e0       	ldi	r17, 0x01	; 1
    110e:	06 c0       	rjmp	.+12     	; 0x111c <dataconv_dword_to_num+0x60>
	array_index++;
  }
  
  if(val==0){
    1110:	61 15       	cp	r22, r1
    1112:	71 05       	cpc	r23, r1
    1114:	81 05       	cpc	r24, r1
    1116:	91 05       	cpc	r25, r1
    1118:	39 f0       	breq	.+14     	; 0x1128 <dataconv_dword_to_num+0x6c>
    111a:	10 e0       	ldi	r17, 0x00	; 0
    111c:	00 e0       	ldi	r16, 0x00	; 0
    digits[0]=0;
    total_digits=1;
  }else{
    while(val!=0){
      digits[i]=val%10;
    111e:	4e 01       	movw	r8, r28
    1120:	08 94       	sec
    1122:	81 1c       	adc	r8, r1
    1124:	91 1c       	adc	r9, r1
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <dataconv_dword_to_num+0x74>
	array[start]='-';
	array_index++;
  }
  
  if(val==0){
    digits[0]=0;
    1128:	19 82       	std	Y+1, r1	; 0x01
    112a:	31 e0       	ldi	r19, 0x01	; 1
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	23 c0       	rjmp	.+70     	; 0x1176 <dataconv_dword_to_num+0xba>
    total_digits=1;
  }else{
    while(val!=0){
      digits[i]=val%10;
    1130:	c4 01       	movw	r24, r8
    1132:	80 0f       	add	r24, r16
    1134:	91 1d       	adc	r25, r1
    1136:	9a 87       	std	Y+10, r25	; 0x0a
    1138:	89 87       	std	Y+9, r24	; 0x09
    113a:	c7 01       	movw	r24, r14
    113c:	b6 01       	movw	r22, r12
    113e:	2a e0       	ldi	r18, 0x0A	; 10
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	0e 94 ce 09 	call	0x139c	; 0x139c <__divmodsi4>
    114a:	e9 85       	ldd	r30, Y+9	; 0x09
    114c:	fa 85       	ldd	r31, Y+10	; 0x0a
    114e:	60 83       	st	Z, r22
      val/=10;
    1150:	c7 01       	movw	r24, r14
    1152:	b6 01       	movw	r22, r12
    1154:	2a e0       	ldi	r18, 0x0A	; 10
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	0e 94 ce 09 	call	0x139c	; 0x139c <__divmodsi4>
    1160:	c9 01       	movw	r24, r18
    1162:	da 01       	movw	r26, r20
    1164:	6c 01       	movw	r12, r24
    1166:	7d 01       	movw	r14, r26
      i++;
    1168:	0f 5f       	subi	r16, 0xFF	; 255
  
  if(val==0){
    digits[0]=0;
    total_digits=1;
  }else{
    while(val!=0){
    116a:	c1 14       	cp	r12, r1
    116c:	d1 04       	cpc	r13, r1
    116e:	e1 04       	cpc	r14, r1
    1170:	f1 04       	cpc	r15, r1
    1172:	f1 f6       	brne	.-68     	; 0x1130 <dataconv_dword_to_num+0x74>
    1174:	30 2f       	mov	r19, r16
    1176:	43 2f       	mov	r20, r19
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	91 2f       	mov	r25, r17
  
  
  for(int k=total_digits; k>0; k--){
    uint8_t temp=k;
    temp-=1;
    temp=digits[temp];
    117c:	de 01       	movw	r26, r28
    117e:	11 96       	adiw	r26, 0x01	; 1
    temp+=48;
	array[start+array_index]=temp;
    1180:	67 2d       	mov	r22, r7
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	0c c0       	rjmp	.+24     	; 0x119e <dataconv_dword_to_num+0xe2>
  
  
  for(int k=total_digits; k>0; k--){
    uint8_t temp=k;
    temp-=1;
    temp=digits[temp];
    1186:	fd 01       	movw	r30, r26
    1188:	e4 0f       	add	r30, r20
    118a:	f1 1d       	adc	r31, r1
    118c:	80 81       	ld	r24, Z
    temp+=48;
	array[start+array_index]=temp;
    118e:	f5 01       	movw	r30, r10
    1190:	e9 0f       	add	r30, r25
    1192:	f1 1d       	adc	r31, r1
    1194:	e6 0f       	add	r30, r22
    1196:	f7 1f       	adc	r31, r23
    1198:	80 5d       	subi	r24, 0xD0	; 208
    119a:	80 83       	st	Z, r24
	array_index++;
    119c:	9f 5f       	subi	r25, 0xFF	; 255
    119e:	41 50       	subi	r20, 0x01	; 1
    11a0:	50 40       	sbci	r21, 0x00	; 0
    }
	total_digits=i;
  }
  
  
  for(int k=total_digits; k>0; k--){
    11a2:	ff ef       	ldi	r31, 0xFF	; 255
    11a4:	4f 3f       	cpi	r20, 0xFF	; 255
    11a6:	5f 07       	cpc	r21, r31
    11a8:	71 f7       	brne	.-36     	; 0x1186 <dataconv_dword_to_num+0xca>
    temp=digits[temp];
    temp+=48;
	array[start+array_index]=temp;
	array_index++;
  }
  dataconv_data_len=array_index;
    11aa:	13 0f       	add	r17, r19
    11ac:	10 93 0c 01 	sts	0x010C, r17
}
    11b0:	2a 96       	adiw	r28, 0x0a	; 10
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	7f 90       	pop	r7
    11d6:	08 95       	ret

000011d8 <dataconv_dword_to_num_len>:

uint8_t dataconv_dword_to_num_len(void){
  return dataconv_data_len;
}
    11d8:	80 91 0c 01 	lds	r24, 0x010C
    11dc:	08 95       	ret

000011de <EEPROM_Read>:

#include <avr/io.h>
#include <avr/interrupt.h>

uint8_t EEPROM_Read(uint16_t addr){
  cli();
    11de:	f8 94       	cli
  EEAR=addr;
    11e0:	92 bd       	out	0x22, r25	; 34
    11e2:	81 bd       	out	0x21, r24	; 33
  EECR|=(1<<EERE);
    11e4:	f8 9a       	sbi	0x1f, 0	; 31
  while(EECR & (1<<EEPE));
    11e6:	f9 99       	sbic	0x1f, 1	; 31
    11e8:	fe cf       	rjmp	.-4      	; 0x11e6 <EEPROM_Read+0x8>
  sei();
    11ea:	78 94       	sei
  return EEDR;
    11ec:	80 b5       	in	r24, 0x20	; 32
}
    11ee:	08 95       	ret

000011f0 <EEPROM_Write>:

void EEPROM_Write(uint16_t addr, uint8_t data){
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    11f8:	16 2f       	mov	r17, r22
  if(EEPROM_Read(addr)!=data){
    11fa:	0e 94 ef 08 	call	0x11de	; 0x11de <EEPROM_Read>
    11fe:	81 17       	cp	r24, r17
    1200:	51 f0       	breq	.+20     	; 0x1216 <EEPROM_Write+0x26>
    cli();
    1202:	f8 94       	cli
    EEAR=addr;
    1204:	d2 bd       	out	0x22, r29	; 34
    1206:	c1 bd       	out	0x21, r28	; 33
    EEDR=data;
    1208:	10 bd       	out	0x20, r17	; 32
    EECR=(1<<EEMPE);
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	8f bb       	out	0x1f, r24	; 31
    EECR|=(1<<EEPE);
    120e:	f9 9a       	sbi	0x1f, 1	; 31
    while(EECR & (1<<EEPE));
    1210:	f9 99       	sbic	0x1f, 1	; 31
    1212:	fe cf       	rjmp	.-4      	; 0x1210 <EEPROM_Write+0x20>
    sei();
    1214:	78 94       	sei
  }
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	08 95       	ret

0000121e <EEPROM_Erase>:

void EEPROM_Erase(uint16_t addr){
  EEPROM_Write(addr, 0xFF);
    121e:	6f ef       	ldi	r22, 0xFF	; 255
    1220:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <EEPROM_Write>
}
    1224:	08 95       	ret

00001226 <EEPROM_Read_Word>:


uint16_t EEPROM_Read_Word(uint16_t addr){
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	7c 01       	movw	r14, r24
  uint16_t temp=EEPROM_Read(addr);
    1230:	0e 94 ef 08 	call	0x11de	; 0x11de <EEPROM_Read>
  temp<<=8;
    1234:	18 2f       	mov	r17, r24
    1236:	00 e0       	ldi	r16, 0x00	; 0
  temp|=EEPROM_Read(addr+1);
    1238:	c7 01       	movw	r24, r14
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0e 94 ef 08 	call	0x11de	; 0x11de <EEPROM_Read>
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	20 2b       	or	r18, r16
    1246:	31 2b       	or	r19, r17
  return temp;
}
    1248:	c9 01       	movw	r24, r18
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	08 95       	ret

00001254 <EEPROM_Write_Word>:

void EEPROM_Write_Word(uint16_t addr, uint16_t data){
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	8c 01       	movw	r16, r24
    125c:	f6 2e       	mov	r15, r22
    125e:	67 2f       	mov	r22, r23
  EEPROM_Write( addr, (data>>8) & 0xFF );
    1260:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <EEPROM_Write>
  EEPROM_Write( addr+1, data & 0xFF );
    1264:	c8 01       	movw	r24, r16
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	6f 2d       	mov	r22, r15
    126a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <EEPROM_Write>
}
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	08 95       	ret

00001276 <EEPROM_Read_Dword>:

uint32_t EEPROM_Read_Dword(uint16_t addr){
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	6c 01       	movw	r12, r24
  uint32_t temp=EEPROM_Read_Word( addr );
    1284:	0e 94 13 09 	call	0x1226	; 0x1226 <EEPROM_Read_Word>
    1288:	7c 01       	movw	r14, r24
    128a:	00 e0       	ldi	r16, 0x00	; 0
    128c:	10 e0       	ldi	r17, 0x00	; 0
  temp<<=16;
    128e:	87 01       	movw	r16, r14
    1290:	ff 24       	eor	r15, r15
    1292:	ee 24       	eor	r14, r14
  temp|=EEPROM_Read_Word( addr+2 );
    1294:	c6 01       	movw	r24, r12
    1296:	02 96       	adiw	r24, 0x02	; 2
    1298:	0e 94 13 09 	call	0x1226	; 0x1226 <EEPROM_Read_Word>
    129c:	9c 01       	movw	r18, r24
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	2e 29       	or	r18, r14
    12a4:	3f 29       	or	r19, r15
    12a6:	40 2b       	or	r20, r16
    12a8:	51 2b       	or	r21, r17
  return temp;
}
    12aa:	b9 01       	movw	r22, r18
    12ac:	ca 01       	movw	r24, r20
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	08 95       	ret

000012bc <EEPROM_Write_Dword>:

void EEPROM_Write_Dword(uint16_t addr, uint32_t data){
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	6c 01       	movw	r12, r24
    12ca:	7a 01       	movw	r14, r20
    12cc:	8b 01       	movw	r16, r22
  EEPROM_Write_Word( addr, (data>>16) & 0xFFFF);
    12ce:	9b 01       	movw	r18, r22
    12d0:	44 27       	eor	r20, r20
    12d2:	55 27       	eor	r21, r21
    12d4:	c6 01       	movw	r24, r12
    12d6:	b9 01       	movw	r22, r18
    12d8:	0e 94 2a 09 	call	0x1254	; 0x1254 <EEPROM_Write_Word>
  EEPROM_Write_Word( addr+2, (data & 0xFFFF));
    12dc:	c6 01       	movw	r24, r12
    12de:	02 96       	adiw	r24, 0x02	; 2
    12e0:	b7 01       	movw	r22, r14
    12e2:	0e 94 2a 09 	call	0x1254	; 0x1254 <EEPROM_Write_Word>
}
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	08 95       	ret

000012f4 <EEPROM_Erase_Region>:

void EEPROM_Erase_Region(uint16_t start_addr, uint16_t stop_addr){
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	8b 01       	movw	r16, r22
    12fe:	ec 01       	movw	r28, r24
    1300:	04 c0       	rjmp	.+8      	; 0x130a <EEPROM_Erase_Region+0x16>
  for(uint16_t i=start_addr;i<=stop_addr;i++){
	EEPROM_Erase( i );
    1302:	ce 01       	movw	r24, r28
    1304:	0e 94 0f 09 	call	0x121e	; 0x121e <EEPROM_Erase>
  EEPROM_Write_Word( addr, (data>>16) & 0xFFFF);
  EEPROM_Write_Word( addr+2, (data & 0xFFFF));
}

void EEPROM_Erase_Region(uint16_t start_addr, uint16_t stop_addr){
  for(uint16_t i=start_addr;i<=stop_addr;i++){
    1308:	21 96       	adiw	r28, 0x01	; 1
    130a:	0c 17       	cp	r16, r28
    130c:	1d 07       	cpc	r17, r29
    130e:	c8 f7       	brcc	.-14     	; 0x1302 <EEPROM_Erase_Region+0xe>
	EEPROM_Erase( i );
  }
}
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	08 95       	ret

0000131a <EEPROM_Clear_Data_Space>:

void EEPROM_Clear_Data_Space(void){
  if( EEPROM_Read_Dword(1020) != 0x01020304 ){
    131a:	8c ef       	ldi	r24, 0xFC	; 252
    131c:	93 e0       	ldi	r25, 0x03	; 3
    131e:	0e 94 3b 09 	call	0x1276	; 0x1276 <EEPROM_Read_Dword>
    1322:	64 50       	subi	r22, 0x04	; 4
    1324:	73 40       	sbci	r23, 0x03	; 3
    1326:	82 40       	sbci	r24, 0x02	; 2
    1328:	91 40       	sbci	r25, 0x01	; 1
    132a:	71 f0       	breq	.+28     	; 0x1348 <EEPROM_Clear_Data_Space+0x2e>
    EEPROM_Erase_Region(1018,1019);
    132c:	8a ef       	ldi	r24, 0xFA	; 250
    132e:	93 e0       	ldi	r25, 0x03	; 3
    1330:	6b ef       	ldi	r22, 0xFB	; 251
    1332:	73 e0       	ldi	r23, 0x03	; 3
    1334:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <EEPROM_Erase_Region>
	EEPROM_Write_Dword(1020, 0x01020304);
    1338:	8c ef       	ldi	r24, 0xFC	; 252
    133a:	93 e0       	ldi	r25, 0x03	; 3
    133c:	44 e0       	ldi	r20, 0x04	; 4
    133e:	53 e0       	ldi	r21, 0x03	; 3
    1340:	62 e0       	ldi	r22, 0x02	; 2
    1342:	71 e0       	ldi	r23, 0x01	; 1
    1344:	0e 94 5e 09 	call	0x12bc	; 0x12bc <EEPROM_Write_Dword>
    1348:	08 95       	ret

0000134a <EEPROM_Init>:
  }
}

void EEPROM_Init(void){
  EEPROM_Clear_Data_Space();
    134a:	0e 94 8d 09 	call	0x131a	; 0x131a <EEPROM_Clear_Data_Space>
}
    134e:	08 95       	ret

00001350 <led_init>:
#define  LED_bp   0x04



void led_init(void){
  LED_DDR|=(1<<LED_bp);
    1350:	54 9a       	sbi	0x0a, 4	; 10
  LED_PORT&=~(1<<LED_bp);
    1352:	5c 98       	cbi	0x0b, 4	; 11
}
    1354:	08 95       	ret

00001356 <led_on>:

void led_on(void){
  LED_PORT|=(1<<LED_bp);
    1356:	5c 9a       	sbi	0x0b, 4	; 11
}
    1358:	08 95       	ret

0000135a <led_off>:

void led_off(void){
  LED_PORT&=~(1<<LED_bp);
    135a:	5c 98       	cbi	0x0b, 4	; 11
    135c:	08 95       	ret

0000135e <__mulsi3>:
    135e:	62 9f       	mul	r22, r18
    1360:	d0 01       	movw	r26, r0
    1362:	73 9f       	mul	r23, r19
    1364:	f0 01       	movw	r30, r0
    1366:	82 9f       	mul	r24, r18
    1368:	e0 0d       	add	r30, r0
    136a:	f1 1d       	adc	r31, r1
    136c:	64 9f       	mul	r22, r20
    136e:	e0 0d       	add	r30, r0
    1370:	f1 1d       	adc	r31, r1
    1372:	92 9f       	mul	r25, r18
    1374:	f0 0d       	add	r31, r0
    1376:	83 9f       	mul	r24, r19
    1378:	f0 0d       	add	r31, r0
    137a:	74 9f       	mul	r23, r20
    137c:	f0 0d       	add	r31, r0
    137e:	65 9f       	mul	r22, r21
    1380:	f0 0d       	add	r31, r0
    1382:	99 27       	eor	r25, r25
    1384:	72 9f       	mul	r23, r18
    1386:	b0 0d       	add	r27, r0
    1388:	e1 1d       	adc	r30, r1
    138a:	f9 1f       	adc	r31, r25
    138c:	63 9f       	mul	r22, r19
    138e:	b0 0d       	add	r27, r0
    1390:	e1 1d       	adc	r30, r1
    1392:	f9 1f       	adc	r31, r25
    1394:	bd 01       	movw	r22, r26
    1396:	cf 01       	movw	r24, r30
    1398:	11 24       	eor	r1, r1
    139a:	08 95       	ret

0000139c <__divmodsi4>:
    139c:	97 fb       	bst	r25, 7
    139e:	09 2e       	mov	r0, r25
    13a0:	05 26       	eor	r0, r21
    13a2:	0e d0       	rcall	.+28     	; 0x13c0 <__divmodsi4_neg1>
    13a4:	57 fd       	sbrc	r21, 7
    13a6:	04 d0       	rcall	.+8      	; 0x13b0 <__divmodsi4_neg2>
    13a8:	14 d0       	rcall	.+40     	; 0x13d2 <__udivmodsi4>
    13aa:	0a d0       	rcall	.+20     	; 0x13c0 <__divmodsi4_neg1>
    13ac:	00 1c       	adc	r0, r0
    13ae:	38 f4       	brcc	.+14     	; 0x13be <__divmodsi4_exit>

000013b0 <__divmodsi4_neg2>:
    13b0:	50 95       	com	r21
    13b2:	40 95       	com	r20
    13b4:	30 95       	com	r19
    13b6:	21 95       	neg	r18
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	4f 4f       	sbci	r20, 0xFF	; 255
    13bc:	5f 4f       	sbci	r21, 0xFF	; 255

000013be <__divmodsi4_exit>:
    13be:	08 95       	ret

000013c0 <__divmodsi4_neg1>:
    13c0:	f6 f7       	brtc	.-4      	; 0x13be <__divmodsi4_exit>
    13c2:	90 95       	com	r25
    13c4:	80 95       	com	r24
    13c6:	70 95       	com	r23
    13c8:	61 95       	neg	r22
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <__udivmodsi4>:
    13d2:	a1 e2       	ldi	r26, 0x21	; 33
    13d4:	1a 2e       	mov	r1, r26
    13d6:	aa 1b       	sub	r26, r26
    13d8:	bb 1b       	sub	r27, r27
    13da:	fd 01       	movw	r30, r26
    13dc:	0d c0       	rjmp	.+26     	; 0x13f8 <__udivmodsi4_ep>

000013de <__udivmodsi4_loop>:
    13de:	aa 1f       	adc	r26, r26
    13e0:	bb 1f       	adc	r27, r27
    13e2:	ee 1f       	adc	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	a2 17       	cp	r26, r18
    13e8:	b3 07       	cpc	r27, r19
    13ea:	e4 07       	cpc	r30, r20
    13ec:	f5 07       	cpc	r31, r21
    13ee:	20 f0       	brcs	.+8      	; 0x13f8 <__udivmodsi4_ep>
    13f0:	a2 1b       	sub	r26, r18
    13f2:	b3 0b       	sbc	r27, r19
    13f4:	e4 0b       	sbc	r30, r20
    13f6:	f5 0b       	sbc	r31, r21

000013f8 <__udivmodsi4_ep>:
    13f8:	66 1f       	adc	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	1a 94       	dec	r1
    1402:	69 f7       	brne	.-38     	; 0x13de <__udivmodsi4_loop>
    1404:	60 95       	com	r22
    1406:	70 95       	com	r23
    1408:	80 95       	com	r24
    140a:	90 95       	com	r25
    140c:	9b 01       	movw	r18, r22
    140e:	ac 01       	movw	r20, r24
    1410:	bd 01       	movw	r22, r26
    1412:	cf 01       	movw	r24, r30
    1414:	08 95       	ret

00001416 <_exit>:
    1416:	f8 94       	cli

00001418 <__stop_program>:
    1418:	ff cf       	rjmp	.-2      	; 0x1418 <__stop_program>
