
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001468  000014fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800106  00800106  00001502  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ac8  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002180  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f8  00000000  00000000  0000422a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001956  00000000  00000000  00004a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000700  00000000  00000000  00006378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000baa  00000000  00000000  00006a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bf6  00000000  00000000  00007622  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00008218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e6       	ldi	r30, 0x68	; 104
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 30       	cpi	r26, 0x06	; 6
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a6 e0       	ldi	r26, 0x06	; 6
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 33       	cpi	r26, 0x38	; 56
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "eeprom.h"
#include "vsns.h"
#include "led.h"


int main(void){
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	df 93       	push	r29
      b4:	cf 93       	push	r28
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	a0 97       	sbiw	r28, 0x20	; 32
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61

  DDRD  |= (1<<4);
      c6:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      c8:	5c 98       	cbi	0x0b, 4	; 11
  
  DDRD&=~((1<<3)|(1<<2));
      ca:	8a b1       	in	r24, 0x0a	; 10
      cc:	83 7f       	andi	r24, 0xF3	; 243
      ce:	8a b9       	out	0x0a, r24	; 10
  PORTD|=(1<<3)|(1<<2);
      d0:	8b b1       	in	r24, 0x0b	; 11
      d2:	8c 60       	ori	r24, 0x0C	; 12
      d4:	8b b9       	out	0x0b, r24	; 11
  
  nRF24L01P_Init();
      d6:	0e 94 31 06 	call	0xc62	; 0xc62 <nRF24L01P_Init>
  Sleep_Init();
      da:	0e 94 c9 00 	call	0x192	; 0x192 <Sleep_Init>
  Vsns_Init();
      de:	0e 94 ff 07 	call	0xffe	; 0xffe <Vsns_Init>
  led_init();
      e2:	0e 94 cf 09 	call	0x139e	; 0x139e <led_init>
  while(1){
	    
	    led_on();
		uint8_t buf[32];
		uint16_t val=Vsns_V_Read();
		dataconv_dword_to_num(val, buf, 0);
      e6:	8e 01       	movw	r16, r28
      e8:	0f 5f       	subi	r16, 0xFF	; 255
      ea:	1f 4f       	sbci	r17, 0xFF	; 255
		buf[dataconv_dword_to_num_len()]='\r';
      ec:	2d e0       	ldi	r18, 0x0D	; 13
      ee:	c2 2e       	mov	r12, r18
		buf[dataconv_dword_to_num_len()+1]='\n';
      f0:	92 e0       	ldi	r25, 0x02	; 2
      f2:	e9 2e       	mov	r14, r25
      f4:	f1 2c       	mov	r15, r1
      f6:	ec 0e       	add	r14, r28
      f8:	fd 1e       	adc	r15, r29
      fa:	8a e0       	ldi	r24, 0x0A	; 10
      fc:	d8 2e       	mov	r13, r24
  CLKPR = (1<<CLKPS0);
  sei();*/
  
  while(1){
	    
	    led_on();
      fe:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <led_on>
		uint8_t buf[32];
		uint16_t val=Vsns_V_Read();
     102:	0e 94 01 07 	call	0xe02	; 0xe02 <Vsns_V_Read>
		dataconv_dword_to_num(val, buf, 0);
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	bc 01       	movw	r22, r24
     10c:	cd 01       	movw	r24, r26
     10e:	a8 01       	movw	r20, r16
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	0e 94 85 08 	call	0x110a	; 0x110a <dataconv_dword_to_num>
		buf[dataconv_dword_to_num_len()]='\r';
     116:	0e 94 13 09 	call	0x1226	; 0x1226 <dataconv_dword_to_num_len>
     11a:	f8 01       	movw	r30, r16
     11c:	e8 0f       	add	r30, r24
     11e:	f1 1d       	adc	r31, r1
     120:	c0 82       	st	Z, r12
		buf[dataconv_dword_to_num_len()+1]='\n';
     122:	0e 94 13 09 	call	0x1226	; 0x1226 <dataconv_dword_to_num_len>
     126:	f7 01       	movw	r30, r14
     128:	e8 0f       	add	r30, r24
     12a:	f1 1d       	adc	r31, r1
     12c:	d0 82       	st	Z, r13
	    nRF24L01P_Tx_Basic(buf,dataconv_dword_to_num_len()+2);
     12e:	0e 94 13 09 	call	0x1226	; 0x1226 <dataconv_dword_to_num_len>
     132:	68 2f       	mov	r22, r24
     134:	6e 5f       	subi	r22, 0xFE	; 254
     136:	c8 01       	movw	r24, r16
     138:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <nRF24L01P_Tx_Basic>
	    nRF24L01P_Mode_Set(0);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 ba 03 	call	0x774	; 0x774 <nRF24L01P_Mode_Set>
	    led_off();
     142:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <led_off>
	    Deep_Sleep();
     146:	0e 94 a6 00 	call	0x14c	; 0x14c <Deep_Sleep>
     14a:	d9 cf       	rjmp	.-78     	; 0xfe <main+0x58>

0000014c <Deep_Sleep>:
#include <avr/sleep.h>

volatile uint32_t WDT_Ticks=0;

void Deep_Sleep(void){
  sleep_enable();
     14c:	83 b7       	in	r24, 0x33	; 51
     14e:	81 60       	ori	r24, 0x01	; 1
     150:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
     152:	85 b7       	in	r24, 0x35	; 53
     154:	80 66       	ori	r24, 0x60	; 96
     156:	85 bf       	out	0x35, r24	; 53
     158:	8f 7d       	andi	r24, 0xDF	; 223
     15a:	85 bf       	out	0x35, r24	; 53
  sei();
     15c:	78 94       	sei
  sleep_cpu();
     15e:	88 95       	sleep
  sleep_disable();
     160:	83 b7       	in	r24, 0x33	; 51
     162:	8e 7f       	andi	r24, 0xFE	; 254
     164:	83 bf       	out	0x33, r24	; 51
}
     166:	08 95       	ret

00000168 <ADC_Disable>:

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
     168:	ea e7       	ldi	r30, 0x7A	; 122
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	8f 77       	andi	r24, 0x7F	; 127
     170:	80 83       	st	Z, r24
}
     172:	08 95       	ret

00000174 <Analog_Comparator_Disable>:

void Analog_Comparator_Disable(void){
  ACSR   |= (1<<ACD) ;
     174:	80 b7       	in	r24, 0x30	; 48
     176:	80 68       	ori	r24, 0x80	; 128
     178:	80 bf       	out	0x30, r24	; 48
}
     17a:	08 95       	ret

0000017c <WDT_Get_Ticks>:

uint32_t WDT_Get_Ticks(void){
  return WDT_Ticks;
     17c:	20 91 06 01 	lds	r18, 0x0106
     180:	30 91 07 01 	lds	r19, 0x0107
     184:	40 91 08 01 	lds	r20, 0x0108
     188:	50 91 09 01 	lds	r21, 0x0109
}
     18c:	b9 01       	movw	r22, r18
     18e:	ca 01       	movw	r24, r20
     190:	08 95       	ret

00000192 <Sleep_Init>:


void Sleep_Init(void){
  cli();
     192:	f8 94       	cli
  WDTCSR=(1<<WDCE)|(1<<WDE);
     194:	e0 e6       	ldi	r30, 0x60	; 96
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	88 e1       	ldi	r24, 0x18	; 24
     19a:	80 83       	st	Z, r24
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
     19c:	86 e4       	ldi	r24, 0x46	; 70
     19e:	80 83       	st	Z, r24
  sei();
     1a0:	78 94       	sei
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     1a2:	83 b7       	in	r24, 0x33	; 51
     1a4:	81 7f       	andi	r24, 0xF1	; 241
     1a6:	84 60       	ori	r24, 0x04	; 4
     1a8:	83 bf       	out	0x33, r24	; 51
  sleep_cpu();
  sleep_disable();
}

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
     1aa:	ea e7       	ldi	r30, 0x7A	; 122
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	8f 77       	andi	r24, 0x7F	; 127
     1b2:	80 83       	st	Z, r24
}

void Analog_Comparator_Disable(void){
  ACSR   |= (1<<ACD) ;
     1b4:	80 b7       	in	r24, 0x30	; 48
     1b6:	80 68       	ori	r24, 0x80	; 128
     1b8:	80 bf       	out	0x30, r24	; 48
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
  sei();
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ADC_Disable();
  Analog_Comparator_Disable();
}
     1ba:	08 95       	ret

000001bc <__vector_6>:

ISR(WDT_vect){
     1bc:	1f 92       	push	r1
     1be:	0f 92       	push	r0
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	0f 92       	push	r0
     1c4:	11 24       	eor	r1, r1
     1c6:	8f 93       	push	r24
     1c8:	9f 93       	push	r25
     1ca:	af 93       	push	r26
     1cc:	bf 93       	push	r27
     1ce:	ef 93       	push	r30
     1d0:	ff 93       	push	r31
  WDTCSR|=(1<<WDIE);
     1d2:	e0 e6       	ldi	r30, 0x60	; 96
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
  WDT_Ticks++;
     1dc:	80 91 06 01 	lds	r24, 0x0106
     1e0:	90 91 07 01 	lds	r25, 0x0107
     1e4:	a0 91 08 01 	lds	r26, 0x0108
     1e8:	b0 91 09 01 	lds	r27, 0x0109
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	a1 1d       	adc	r26, r1
     1f0:	b1 1d       	adc	r27, r1
     1f2:	80 93 06 01 	sts	0x0106, r24
     1f6:	90 93 07 01 	sts	0x0107, r25
     1fa:	a0 93 08 01 	sts	0x0108, r26
     1fe:	b0 93 09 01 	sts	0x0109, r27
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <nRF24L01P_Struct_Init>:


/* initialize structure of the driver */

void nRF24L01P_Struct_Init(void){
  nRF24L01P.Mode = 0x00;
     218:	10 92 0d 01 	sts	0x010D, r1
  nRF24L01P.Enable = 0x01;
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	90 93 0e 01 	sts	0x010E, r25
  nRF24L01P.TempBuf[0] = 0x00;
     222:	10 92 0f 01 	sts	0x010F, r1
  nRF24L01P.TempBuf[1] = 0x00;
     226:	10 92 10 01 	sts	0x0110, r1
  nRF24L01P.Address.Own = 0x01;
     22a:	90 93 11 01 	sts	0x0111, r25
  nRF24L01P.Address.Dest = 0x02;
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	80 93 12 01 	sts	0x0112, r24
  nRF24L01P.Config.RxTicks = 0;
     234:	10 92 16 01 	sts	0x0116, r1
     238:	10 92 15 01 	sts	0x0115, r1
  nRF24L01P.Config.RxTimeout = 10;
     23c:	2a e0       	ldi	r18, 0x0A	; 10
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	30 93 14 01 	sts	0x0114, r19
     244:	20 93 13 01 	sts	0x0113, r18
  nRF24L01P.Config.MaxDataLen = 20;
     248:	84 e1       	ldi	r24, 0x14	; 20
     24a:	80 93 17 01 	sts	0x0117, r24
  nRF24L01P.Config.MaxRetry = 10;
     24e:	30 93 19 01 	sts	0x0119, r19
     252:	20 93 18 01 	sts	0x0118, r18
  nRF24L01P.Config.RetryOccured = 0;
     256:	10 92 1b 01 	sts	0x011B, r1
     25a:	10 92 1a 01 	sts	0x011A, r1
  nRF24L01P.Packet.TxPID = 0x01;
     25e:	90 93 1c 01 	sts	0x011C, r25
  nRF24L01P.Packet.RxPID = 0x00;
     262:	10 92 1d 01 	sts	0x011D, r1
  nRF24L01P.Packet.LastRxPID = 0x00;
     266:	10 92 1e 01 	sts	0x011E, r1
  nRF24L01P.Packet.AckReq = 1;
     26a:	90 93 1f 01 	sts	0x011F, r25
  nRF24L01P.Blocks.Remaining = 0;
     26e:	10 92 20 01 	sts	0x0120, r1
  nRF24L01P.Blocks.FailedPos = 0;
     272:	10 92 21 01 	sts	0x0121, r1
  nRF24L01P.SpaceAlloc.CRCLSB = nRF24L01P_PACKET_LEN-1;
     276:	8f e1       	ldi	r24, 0x1F	; 31
     278:	80 93 23 01 	sts	0x0123, r24
  nRF24L01P.SpaceAlloc.CRCMSB = nRF24L01P_PACKET_LEN-2;
     27c:	8e e1       	ldi	r24, 0x1E	; 30
     27e:	80 93 22 01 	sts	0x0122, r24
  nRF24L01P.SpaceAlloc.CRCLen = nRF24L01P_PACKET_LEN-2;
     282:	80 93 29 01 	sts	0x0129, r24
  nRF24L01P.SpaceAlloc.Len = nRF24L01P_PACKET_LEN-3;
     286:	8d e1       	ldi	r24, 0x1D	; 29
     288:	80 93 24 01 	sts	0x0124, r24
  nRF24L01P.SpaceAlloc.Dest = nRF24L01P_PACKET_LEN-4;
     28c:	8c e1       	ldi	r24, 0x1C	; 28
     28e:	80 93 25 01 	sts	0x0125, r24
  nRF24L01P.SpaceAlloc.Own = nRF24L01P_PACKET_LEN-5;
     292:	8b e1       	ldi	r24, 0x1B	; 27
     294:	80 93 26 01 	sts	0x0126, r24
  nRF24L01P.SpaceAlloc.Ack = nRF24L01P_PACKET_LEN-6;
     298:	8a e1       	ldi	r24, 0x1A	; 26
     29a:	80 93 27 01 	sts	0x0127, r24
  nRF24L01P.SpaceAlloc.PID = nRF24L01P_PACKET_LEN-7;
     29e:	89 e1       	ldi	r24, 0x19	; 25
     2a0:	80 93 28 01 	sts	0x0128, r24
  nRF24L01P.SpaceAlloc.Blocks = nRF24L01P_PACKET_LEN-8;
     2a4:	88 e1       	ldi	r24, 0x18	; 24
     2a6:	80 93 2a 01 	sts	0x012A, r24
  nRF24L01P.ErrorTicks = 0;
     2aa:	10 92 2c 01 	sts	0x012C, r1
     2ae:	10 92 2b 01 	sts	0x012B, r1
  nRF24L01P.Error = 0;
     2b2:	10 92 2d 01 	sts	0x012D, r1
     2b6:	10 92 2e 01 	sts	0x012E, r1
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
    nRF24L01P.Errors[0] = 0;
  }
}
     2ba:	08 95       	ret

000002bc <nRF24L01P_Set_SCK_DD>:


/* set data direction of associated gpio */

void nRF24L01P_Set_SCK_DD(uint8_t state){
  if(state){
     2bc:	88 23       	and	r24, r24
     2be:	11 f0       	breq	.+4      	; 0x2c4 <nRF24L01P_Set_SCK_DD+0x8>
    nRF24L01P_SCK_DDR |= (1<<nRF24L01P_SCK_bp);
     2c0:	25 9a       	sbi	0x04, 5	; 4
     2c2:	08 95       	ret
  }else{
    nRF24L01P_SCK_DDR &=~(1<<nRF24L01P_SCK_bp);
     2c4:	25 98       	cbi	0x04, 5	; 4
     2c6:	08 95       	ret

000002c8 <nRF24L01P_Set_MISO_DD>:
  }
}

void nRF24L01P_Set_MISO_DD(uint8_t state){
  if(state){
     2c8:	88 23       	and	r24, r24
     2ca:	11 f0       	breq	.+4      	; 0x2d0 <nRF24L01P_Set_MISO_DD+0x8>
    nRF24L01P_MISO_DDR |= (1<<nRF24L01P_MISO_bp);
     2cc:	24 9a       	sbi	0x04, 4	; 4
     2ce:	08 95       	ret
  }else{
    nRF24L01P_MISO_DDR &=~(1<<nRF24L01P_MISO_bp);
     2d0:	24 98       	cbi	0x04, 4	; 4
     2d2:	08 95       	ret

000002d4 <nRF24L01P_Set_MOSI_DD>:
  }
}

void nRF24L01P_Set_MOSI_DD(uint8_t state){
  if(state){
     2d4:	88 23       	and	r24, r24
     2d6:	11 f0       	breq	.+4      	; 0x2dc <nRF24L01P_Set_MOSI_DD+0x8>
    nRF24L01P_MOSI_DDR |= (1<<nRF24L01P_MOSI_bp);
     2d8:	23 9a       	sbi	0x04, 3	; 4
     2da:	08 95       	ret
  }else{
    nRF24L01P_MOSI_DDR &=~(1<<nRF24L01P_MOSI_bp);
     2dc:	23 98       	cbi	0x04, 3	; 4
     2de:	08 95       	ret

000002e0 <nRF24L01P_Set_CSN_DD>:
  }
}


void nRF24L01P_Set_CSN_DD(uint8_t state){
  if(state){
     2e0:	88 23       	and	r24, r24
     2e2:	11 f0       	breq	.+4      	; 0x2e8 <nRF24L01P_Set_CSN_DD+0x8>
    nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
     2e4:	22 9a       	sbi	0x04, 2	; 4
     2e6:	08 95       	ret
  }else{
    nRF24L01P_CSN_DDR &=~(1<<nRF24L01P_CSN_bp);
     2e8:	22 98       	cbi	0x04, 2	; 4
     2ea:	08 95       	ret

000002ec <nRF24L01P_Set_CE_DD>:
  }
}

void nRF24L01P_Set_CE_DD(uint8_t state){
  if(state){
     2ec:	88 23       	and	r24, r24
     2ee:	11 f0       	breq	.+4      	; 0x2f4 <nRF24L01P_Set_CE_DD+0x8>
    nRF24L01P_CE_DDR |= (1<<nRF24L01P_CE_bp);
     2f0:	38 9a       	sbi	0x07, 0	; 7
     2f2:	08 95       	ret
  }else{
    nRF24L01P_CE_DDR &=~(1<<nRF24L01P_CE_bp);
     2f4:	38 98       	cbi	0x07, 0	; 7
     2f6:	08 95       	ret

000002f8 <nRF24L01P_Set_SCK>:


/* set output state of associated gpio */

void nRF24L01P_Set_SCK(uint8_t state){
  if(state){
     2f8:	88 23       	and	r24, r24
     2fa:	11 f0       	breq	.+4      	; 0x300 <nRF24L01P_Set_SCK+0x8>
    nRF24L01P_SCK_PORT |= (1<<nRF24L01P_SCK_bp);
     2fc:	2d 9a       	sbi	0x05, 5	; 5
     2fe:	08 95       	ret
  }else{
    nRF24L01P_SCK_PORT &=~(1<<nRF24L01P_SCK_bp);
     300:	2d 98       	cbi	0x05, 5	; 5
     302:	08 95       	ret

00000304 <nRF24L01P_Set_MISO>:
  }
}

void nRF24L01P_Set_MISO(uint8_t state){
  if(state){
     304:	88 23       	and	r24, r24
     306:	11 f0       	breq	.+4      	; 0x30c <nRF24L01P_Set_MISO+0x8>
    nRF24L01P_MISO_PORT |= (1<<nRF24L01P_MISO_bp);
     308:	2c 9a       	sbi	0x05, 4	; 5
     30a:	08 95       	ret
  }else{
    nRF24L01P_MISO_PORT &=~(1<<nRF24L01P_MISO_bp);
     30c:	2c 98       	cbi	0x05, 4	; 5
     30e:	08 95       	ret

00000310 <nRF24L01P_Set_MOSI>:
  }
}

void nRF24L01P_Set_MOSI(uint8_t state){
  if(state){
     310:	88 23       	and	r24, r24
     312:	11 f0       	breq	.+4      	; 0x318 <nRF24L01P_Set_MOSI+0x8>
    nRF24L01P_MOSI_PORT |= (1<<nRF24L01P_MOSI_bp);
     314:	2b 9a       	sbi	0x05, 3	; 5
     316:	08 95       	ret
  }else{
    nRF24L01P_MOSI_PORT &=~(1<<nRF24L01P_MOSI_bp);
     318:	2b 98       	cbi	0x05, 3	; 5
     31a:	08 95       	ret

0000031c <nRF24L01P_Set_CSN>:
  }
}

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
     31c:	88 23       	and	r24, r24
     31e:	11 f0       	breq	.+4      	; 0x324 <nRF24L01P_Set_CSN+0x8>
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     320:	2a 9a       	sbi	0x05, 2	; 5
     322:	08 95       	ret
  }else{
    nRF24L01P_CSN_PORT &=~(1<<nRF24L01P_CSN_bp);
     324:	2a 98       	cbi	0x05, 2	; 5
     326:	08 95       	ret

00000328 <nRF24L01P_Set_CE>:
  }
}

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
     328:	88 23       	and	r24, r24
     32a:	11 f0       	breq	.+4      	; 0x330 <nRF24L01P_Set_CE+0x8>
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
     32c:	40 9a       	sbi	0x08, 0	; 8
     32e:	08 95       	ret
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     330:	40 98       	cbi	0x08, 0	; 8
     332:	08 95       	ret

00000334 <nRF24L01P_GPIO_Enable>:

/* set data direction of associated gpio */

void nRF24L01P_Set_SCK_DD(uint8_t state){
  if(state){
    nRF24L01P_SCK_DDR |= (1<<nRF24L01P_SCK_bp);
     334:	25 9a       	sbi	0x04, 5	; 4

void nRF24L01P_Set_MISO_DD(uint8_t state){
  if(state){
    nRF24L01P_MISO_DDR |= (1<<nRF24L01P_MISO_bp);
  }else{
    nRF24L01P_MISO_DDR &=~(1<<nRF24L01P_MISO_bp);
     336:	24 98       	cbi	0x04, 4	; 4
  }
}

void nRF24L01P_Set_MOSI_DD(uint8_t state){
  if(state){
    nRF24L01P_MOSI_DDR |= (1<<nRF24L01P_MOSI_bp);
     338:	23 9a       	sbi	0x04, 3	; 4
}


void nRF24L01P_Set_CSN_DD(uint8_t state){
  if(state){
    nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
     33a:	22 9a       	sbi	0x04, 2	; 4
  }
}

void nRF24L01P_Set_CE_DD(uint8_t state){
  if(state){
    nRF24L01P_CE_DDR |= (1<<nRF24L01P_CE_bp);
     33c:	38 9a       	sbi	0x07, 0	; 7
  }
}

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     33e:	2a 9a       	sbi	0x05, 2	; 5

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     340:	40 98       	cbi	0x08, 0	; 8
  nRF24L01P_Set_CSN_DD(1);
  nRF24L01P_Set_CE_DD(1);
  nRF24L01P_Set_CSN(1);
  nRF24L01P_Set_CE(0);
  #ifdef nRF24L01P_USE_HW_SPI
  DDRB |= (1<<2);
     342:	22 9a       	sbi	0x04, 2	; 4
  #endif
}
     344:	08 95       	ret

00000346 <nRF24L01P_GPIO_Disable>:

/* set data direction of associated gpio */

void nRF24L01P_Set_SCK_DD(uint8_t state){
  if(state){
    nRF24L01P_SCK_DDR |= (1<<nRF24L01P_SCK_bp);
     346:	25 9a       	sbi	0x04, 5	; 4
  }
}

void nRF24L01P_Set_MISO_DD(uint8_t state){
  if(state){
    nRF24L01P_MISO_DDR |= (1<<nRF24L01P_MISO_bp);
     348:	24 9a       	sbi	0x04, 4	; 4
  }
}

void nRF24L01P_Set_MOSI_DD(uint8_t state){
  if(state){
    nRF24L01P_MOSI_DDR |= (1<<nRF24L01P_MOSI_bp);
     34a:	23 9a       	sbi	0x04, 3	; 4
}


void nRF24L01P_Set_CSN_DD(uint8_t state){
  if(state){
    nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
     34c:	22 9a       	sbi	0x04, 2	; 4
  }
}

void nRF24L01P_Set_CE_DD(uint8_t state){
  if(state){
    nRF24L01P_CE_DDR |= (1<<nRF24L01P_CE_bp);
     34e:	38 9a       	sbi	0x07, 0	; 7

void nRF24L01P_Set_SCK(uint8_t state){
  if(state){
    nRF24L01P_SCK_PORT |= (1<<nRF24L01P_SCK_bp);
  }else{
    nRF24L01P_SCK_PORT &=~(1<<nRF24L01P_SCK_bp);
     350:	2d 98       	cbi	0x05, 5	; 5

void nRF24L01P_Set_MISO(uint8_t state){
  if(state){
    nRF24L01P_MISO_PORT |= (1<<nRF24L01P_MISO_bp);
  }else{
    nRF24L01P_MISO_PORT &=~(1<<nRF24L01P_MISO_bp);
     352:	2c 98       	cbi	0x05, 4	; 5

void nRF24L01P_Set_MOSI(uint8_t state){
  if(state){
    nRF24L01P_MOSI_PORT |= (1<<nRF24L01P_MOSI_bp);
  }else{
    nRF24L01P_MOSI_PORT &=~(1<<nRF24L01P_MOSI_bp);
     354:	2b 98       	cbi	0x05, 3	; 5
  }
}

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     356:	2a 9a       	sbi	0x05, 2	; 5

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     358:	40 98       	cbi	0x08, 0	; 8
  nRF24L01P_Set_SCK(0);
  nRF24L01P_Set_MISO(0);
  nRF24L01P_Set_MOSI(0);
  nRF24L01P_Set_CSN(1);
  nRF24L01P_Set_CE(0);
}
     35a:	08 95       	ret

0000035c <nRF24L01P_SPI_Enable>:

/* configuration of spi for different states */

void nRF24L01P_SPI_Enable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = (1<<SPE)|(1<<MSTR);                     
     35c:	80 e5       	ldi	r24, 0x50	; 80
     35e:	8c bd       	out	0x2c, r24	; 44
  SPSR = (1<<SPI2X);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	8d bd       	out	0x2d, r24	; 45
  SPSR = 0;
     364:	1d bc       	out	0x2d, r1	; 45
  #endif
}
     366:	08 95       	ret

00000368 <nRF24L01P_SPI_Disable>:

void nRF24L01P_SPI_Disable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = 0x00;                     
     368:	1c bc       	out	0x2c, r1	; 44
  SPSR = 0x00;
     36a:	1d bc       	out	0x2d, r1	; 45
  #endif
}
     36c:	08 95       	ret

0000036e <nRF24L01P_Enable>:


/* configuration of gpio & spi for different states */

void nRF24L01P_Enable(void){
  nRF24L01P_GPIO_Enable();
     36e:	0e 94 9a 01 	call	0x334	; 0x334 <nRF24L01P_GPIO_Enable>

/* configuration of spi for different states */

void nRF24L01P_SPI_Enable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = (1<<SPE)|(1<<MSTR);                     
     372:	80 e5       	ldi	r24, 0x50	; 80
     374:	8c bd       	out	0x2c, r24	; 44
  SPSR = (1<<SPI2X);
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	8d bd       	out	0x2d, r24	; 45
  SPSR = 0;
     37a:	1d bc       	out	0x2d, r1	; 45
/* configuration of gpio & spi for different states */

void nRF24L01P_Enable(void){
  nRF24L01P_GPIO_Enable();
  nRF24L01P_SPI_Enable();
  nRF24L01P.Enable = 1;
     37c:	80 93 0e 01 	sts	0x010E, r24
}
     380:	08 95       	ret

00000382 <nRF24L01P_Disable>:
  #endif
}

void nRF24L01P_SPI_Disable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = 0x00;                     
     382:	1c bc       	out	0x2c, r1	; 44
  SPSR = 0x00;
     384:	1d bc       	out	0x2d, r1	; 45
  nRF24L01P.Enable = 1;
}

void nRF24L01P_Disable(void){
  nRF24L01P_SPI_Disable();
  nRF24L01P_GPIO_Disable();
     386:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01P_GPIO_Disable>
  nRF24L01P.Enable = 0;
     38a:	10 92 0e 01 	sts	0x010E, r1
}
     38e:	08 95       	ret

00000390 <nRF24L01P_Error_Clear>:


/* error handling */

void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
     390:	10 92 2d 01 	sts	0x012D, r1
}
     394:	08 95       	ret

00000396 <nRF24L01P_Error_Clear_Ticks>:

void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
     396:	10 92 2c 01 	sts	0x012C, r1
     39a:	10 92 2b 01 	sts	0x012B, r1
}
     39e:	08 95       	ret

000003a0 <nRF24L01P_Error_Clear_Buf>:

void nRF24L01P_Error_Clear_Buf(void){
     3a0:	ee e2       	ldi	r30, 0x2E	; 46
     3a2:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
    nRF24L01P.Errors[i] = 0;
     3a4:	11 92       	st	Z+, r1
void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
}

void nRF24L01P_Error_Clear_Buf(void){
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	e8 33       	cpi	r30, 0x38	; 56
     3aa:	f8 07       	cpc	r31, r24
     3ac:	d9 f7       	brne	.-10     	; 0x3a4 <nRF24L01P_Error_Clear_Buf+0x4>
    nRF24L01P.Errors[i] = 0;
  }
}
     3ae:	08 95       	ret

000003b0 <nRF24L01P_Error_Clear_All>:


/* error handling */

void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
     3b0:	10 92 2d 01 	sts	0x012D, r1
}

void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
     3b4:	10 92 2c 01 	sts	0x012C, r1
     3b8:	10 92 2b 01 	sts	0x012B, r1
     3bc:	ee e2       	ldi	r30, 0x2E	; 46
     3be:	f1 e0       	ldi	r31, 0x01	; 1
}

void nRF24L01P_Error_Clear_Buf(void){
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
    nRF24L01P.Errors[i] = 0;
     3c0:	11 92       	st	Z+, r1
void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
}

void nRF24L01P_Error_Clear_Buf(void){
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	e8 33       	cpi	r30, 0x38	; 56
     3c6:	f8 07       	cpc	r31, r24
     3c8:	d9 f7       	brne	.-10     	; 0x3c0 <nRF24L01P_Error_Clear_All+0x10>

void nRF24L01P_Error_Clear_All(void){
  nRF24L01P_Error_Clear();
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}
     3ca:	08 95       	ret

000003cc <nRF24L01P_Error_Set>:

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     3cc:	80 93 2d 01 	sts	0x012D, r24
}
     3d0:	08 95       	ret

000003d2 <nRF24L01P_Error_Get>:

uint8_t nRF24L01P_Error_Get(void){
  return nRF24L01P.Error;
}
     3d2:	80 91 2d 01 	lds	r24, 0x012D
     3d6:	08 95       	ret

000003d8 <nRF24L01P_Error_Get_Index>:

uint8_t nRF24L01P_Error_Get_Index(uint8_t index){
     3d8:	ed e0       	ldi	r30, 0x0D	; 13
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	e8 0f       	add	r30, r24
     3de:	f1 1d       	adc	r31, r1
  return nRF24L01P.Errors[index];
}
     3e0:	81 a1       	ldd	r24, Z+33	; 0x21
     3e2:	08 95       	ret

000003e4 <nRF24L01P_Error_Timeout>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3e4:	ec e2       	ldi	r30, 0x2C	; 44
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	31 97       	sbiw	r30, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <nRF24L01P_Error_Timeout+0x4>

uint8_t nRF24L01P_Error_Timeout(uint16_t ticks){
  _delay_us(100);
  nRF24L01P.ErrorTicks++;
     3ec:	20 91 2b 01 	lds	r18, 0x012B
     3f0:	30 91 2c 01 	lds	r19, 0x012C
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	30 93 2c 01 	sts	0x012C, r19
     3fc:	20 93 2b 01 	sts	0x012B, r18
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	82 17       	cp	r24, r18
     404:	93 07       	cpc	r25, r19
     406:	08 f4       	brcc	.+2      	; 0x40a <nRF24L01P_Error_Timeout+0x26>
     408:	41 e0       	ldi	r20, 0x01	; 1
	return 1;
  }
  else{
    return 0;
  }
}
     40a:	84 2f       	mov	r24, r20
     40c:	08 95       	ret

0000040e <nRF24L01P_Error_Free>:

uint8_t nRF24L01P_Error_Free(void){
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	80 91 2d 01 	lds	r24, 0x012D
     414:	88 23       	and	r24, r24
     416:	09 f4       	brne	.+2      	; 0x41a <nRF24L01P_Error_Free+0xc>
     418:	91 e0       	ldi	r25, 0x01	; 1
    return 1;
  }
  else{
    return 0;
  }
}
     41a:	89 2f       	mov	r24, r25
     41c:	08 95       	ret

0000041e <nRF24L01P_CRC>:


/* crc calcultions and validation */

uint16_t nRF24L01P_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
     41e:	36 2f       	mov	r19, r22
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	28 27       	eor	r18, r24
     424:	39 27       	eor	r19, r25
     426:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
     428:	61 e2       	ldi	r22, 0x21	; 33
     42a:	70 e1       	ldi	r23, 0x10	; 16
     42c:	c9 01       	movw	r24, r18
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
/* crc calcultions and validation */

uint16_t nRF24L01P_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
     432:	37 ff       	sbrs	r19, 7
     434:	04 c0       	rjmp	.+8      	; 0x43e <nRF24L01P_CRC+0x20>
	  crc = (crc<<1)^0x1021;
     436:	9c 01       	movw	r18, r24
     438:	26 27       	eor	r18, r22
     43a:	37 27       	eor	r19, r23
     43c:	01 c0       	rjmp	.+2      	; 0x440 <nRF24L01P_CRC+0x22>
	}
    else{
	  crc <<= 1;
     43e:	9c 01       	movw	r18, r24

/* crc calcultions and validation */

uint16_t nRF24L01P_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
     440:	4f 5f       	subi	r20, 0xFF	; 255
     442:	48 30       	cpi	r20, 0x08	; 8
     444:	99 f7       	brne	.-26     	; 0x42c <nRF24L01P_CRC+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
     446:	c9 01       	movw	r24, r18
     448:	08 95       	ret

0000044a <nRF24L01P_CRC_Block>:

uint16_t nRF24L01P_CRC_Block(uint8_t *buf, uint8_t len){
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	06 2f       	mov	r16, r22
     454:	ec 01       	movw	r28, r24
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	10 e0       	ldi	r17, 0x00	; 0
     45c:	06 c0       	rjmp	.+12     	; 0x46a <nRF24L01P_CRC_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = nRF24L01P_CRC(crc,buf[i]);
     45e:	c9 01       	movw	r24, r18
     460:	69 91       	ld	r22, Y+
     462:	0e 94 0f 02 	call	0x41e	; 0x41e <nRF24L01P_CRC>
     466:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t nRF24L01P_CRC_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
     468:	1f 5f       	subi	r17, 0xFF	; 255
     46a:	10 17       	cp	r17, r16
     46c:	c0 f3       	brcs	.-16     	; 0x45e <nRF24L01P_CRC_Block+0x14>
    crc = nRF24L01P_CRC(crc,buf[i]);
  }
  return crc;
}
     46e:	c9 01       	movw	r24, r18
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	08 95       	ret

0000047a <nRF24L01P_SPI_Transfer>:



/* spi transfer */

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
     47a:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     47c:	80 91 2d 01 	lds	r24, 0x012D
     480:	88 23       	and	r24, r24
     482:	69 f4       	brne	.+26     	; 0x49e <nRF24L01P_SPI_Transfer+0x24>

/* spi transfer */

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  if(nRF24L01P_Error_Free()){
    SPDR = data;
     484:	9e bd       	out	0x2e, r25	; 46
     486:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     488:	28 e2       	ldi	r18, 0x28	; 40
     48a:	0b c0       	rjmp	.+22     	; 0x4a2 <nRF24L01P_SPI_Transfer+0x28>
     48c:	82 2f       	mov	r24, r18
     48e:	8a 95       	dec	r24
     490:	f1 f7       	brne	.-4      	; 0x48e <nRF24L01P_SPI_Transfer+0x14>
    uint8_t i = 0;
    while(!(SPSR & (1 << SPIF))){
	  _delay_us(10);
	  i++;
     492:	9f 5f       	subi	r25, 0xFF	; 255
	  if(i > 200){
     494:	99 3c       	cpi	r25, 0xC9	; 201
     496:	29 f4       	brne	.+10     	; 0x4a2 <nRF24L01P_SPI_Transfer+0x28>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 2d 01 	sts	0x012D, r24
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	08 95       	ret

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  if(nRF24L01P_Error_Free()){
    SPDR = data;
    uint8_t i = 0;
    while(!(SPSR & (1 << SPIF))){
     4a2:	0d b4       	in	r0, 0x2d	; 45
     4a4:	07 fe       	sbrs	r0, 7
     4a6:	f2 cf       	rjmp	.-28     	; 0x48c <nRF24L01P_SPI_Transfer+0x12>
	  if(i > 200){
	    nRF24L01P_Error_Set(0x01);
	    return 0;
	  }
    }
	return SPDR;
     4a8:	8e b5       	in	r24, 0x2e	; 46
  }else{
    return 0;
  }
}
     4aa:	08 95       	ret

000004ac <nRF24L01P_ReadWrite_Register>:


/* register read write */

void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
     4ac:	df 92       	push	r13
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	18 2f       	mov	r17, r24
     4bc:	06 2f       	mov	r16, r22
     4be:	f4 2e       	mov	r15, r20
     4c0:	e5 2e       	mov	r14, r21
     4c2:	d2 2e       	mov	r13, r18
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     4c4:	80 91 2d 01 	lds	r24, 0x012D
     4c8:	88 23       	and	r24, r24
     4ca:	59 f5       	brne	.+86     	; 0x522 <nRF24L01P_ReadWrite_Register+0x76>

/* register read write */

void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
  if(nRF24L01P_Error_Free()){
    if(nRF24L01P.Enable == 0){
     4cc:	80 91 0e 01 	lds	r24, 0x010E
     4d0:	88 23       	and	r24, r24
     4d2:	11 f4       	brne	.+4      	; 0x4d8 <nRF24L01P_ReadWrite_Register+0x2c>
      nRF24L01P_Enable();
     4d4:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01P_Enable>

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
  }else{
    nRF24L01P_CSN_PORT &=~(1<<nRF24L01P_CSN_bp);
     4d8:	2a 98       	cbi	0x05, 2	; 5
  if(nRF24L01P_Error_Free()){
    if(nRF24L01P.Enable == 0){
      nRF24L01P_Enable();
    }
    nRF24L01P_Set_CSN(0);
    if(rw == 0){
     4da:	00 23       	and	r16, r16
     4dc:	89 f4       	brne	.+34     	; 0x500 <nRF24L01P_ReadWrite_Register+0x54>
      reg |= 0x20;
	  nRF24L01P_SPI_Transfer(reg);
     4de:	81 2f       	mov	r24, r17
     4e0:	80 62       	ori	r24, 0x20	; 32
     4e2:	0e 94 3d 02 	call	0x47a	; 0x47a <nRF24L01P_SPI_Transfer>
     4e6:	8f 2d       	mov	r24, r15
     4e8:	9e 2d       	mov	r25, r14
     4ea:	9c 01       	movw	r18, r24
     4ec:	e9 01       	movw	r28, r18
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <nRF24L01P_ReadWrite_Register+0x4e>
	  for(uint8_t i = 0; i < len; i++){
	    nRF24L01P_SPI_Transfer(data[i]);
     4f2:	89 91       	ld	r24, Y+
     4f4:	0e 94 3d 02 	call	0x47a	; 0x47a <nRF24L01P_SPI_Transfer>
    }
    nRF24L01P_Set_CSN(0);
    if(rw == 0){
      reg |= 0x20;
	  nRF24L01P_SPI_Transfer(reg);
	  for(uint8_t i = 0; i < len; i++){
     4f8:	1f 5f       	subi	r17, 0xFF	; 255
     4fa:	1d 15       	cp	r17, r13
     4fc:	d0 f3       	brcs	.-12     	; 0x4f2 <nRF24L01P_ReadWrite_Register+0x46>
     4fe:	10 c0       	rjmp	.+32     	; 0x520 <nRF24L01P_ReadWrite_Register+0x74>
	    nRF24L01P_SPI_Transfer(data[i]);
	  }
    }else{
      nRF24L01P_SPI_Transfer(reg);
     500:	81 2f       	mov	r24, r17
     502:	0e 94 3d 02 	call	0x47a	; 0x47a <nRF24L01P_SPI_Transfer>
     506:	8f 2d       	mov	r24, r15
     508:	9e 2d       	mov	r25, r14
     50a:	9c 01       	movw	r18, r24
     50c:	e9 01       	movw	r28, r18
     50e:	10 e0       	ldi	r17, 0x00	; 0
     510:	05 c0       	rjmp	.+10     	; 0x51c <nRF24L01P_ReadWrite_Register+0x70>
      for(uint8_t i = 0; i < len; i++){
        data[i] = nRF24L01P_SPI_Transfer(0xFF);
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	0e 94 3d 02 	call	0x47a	; 0x47a <nRF24L01P_SPI_Transfer>
     518:	89 93       	st	Y+, r24
	  for(uint8_t i = 0; i < len; i++){
	    nRF24L01P_SPI_Transfer(data[i]);
	  }
    }else{
      nRF24L01P_SPI_Transfer(reg);
      for(uint8_t i = 0; i < len; i++){
     51a:	1f 5f       	subi	r17, 0xFF	; 255
     51c:	1d 15       	cp	r17, r13
     51e:	c8 f3       	brcs	.-14     	; 0x512 <nRF24L01P_ReadWrite_Register+0x66>
  }
}

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     520:	2a 9a       	sbi	0x05, 2	; 5
        data[i] = nRF24L01P_SPI_Transfer(0xFF);
      }
    }
    nRF24L01P_Set_CSN(1);
  }
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	df 90       	pop	r13
     530:	08 95       	ret

00000532 <nRF24L01P_ReadModifyWrite_Register>:

void nRF24L01P_ReadModifyWrite_Register( uint8_t reg, uint8_t bit_pos, uint8_t bit_val ){
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	f8 2e       	mov	r15, r24
     53a:	06 2f       	mov	r16, r22
     53c:	14 2f       	mov	r17, r20
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     53e:	80 91 2d 01 	lds	r24, 0x012D
     542:	88 23       	and	r24, r24
     544:	41 f5       	brne	.+80     	; 0x596 <nRF24L01P_ReadModifyWrite_Register+0x64>
  }
}

void nRF24L01P_ReadModifyWrite_Register( uint8_t reg, uint8_t bit_pos, uint8_t bit_val ){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( reg, 1, nRF24L01P.TempBuf, 1);
     546:	8f 2d       	mov	r24, r15
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	4f e0       	ldi	r20, 0x0F	; 15
     54c:	51 e0       	ldi	r21, 0x01	; 1
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
     554:	20 91 0f 01 	lds	r18, 0x010F
    if(bit_val){
     558:	11 23       	and	r17, r17
     55a:	59 f0       	breq	.+22     	; 0x572 <nRF24L01P_ReadModifyWrite_Register+0x40>
      nRF24L01P.TempBuf[0]|=(1<<bit_pos);
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	02 c0       	rjmp	.+4      	; 0x566 <nRF24L01P_ReadModifyWrite_Register+0x34>
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	0a 95       	dec	r16
     568:	e2 f7       	brpl	.-8      	; 0x562 <nRF24L01P_ReadModifyWrite_Register+0x30>
     56a:	28 2b       	or	r18, r24
     56c:	20 93 0f 01 	sts	0x010F, r18
     570:	0b c0       	rjmp	.+22     	; 0x588 <nRF24L01P_ReadModifyWrite_Register+0x56>
    }else{
      nRF24L01P.TempBuf[0]&=~(1<<bit_pos);
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	02 c0       	rjmp	.+4      	; 0x57c <nRF24L01P_ReadModifyWrite_Register+0x4a>
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	0a 95       	dec	r16
     57e:	e2 f7       	brpl	.-8      	; 0x578 <nRF24L01P_ReadModifyWrite_Register+0x46>
     580:	80 95       	com	r24
     582:	82 23       	and	r24, r18
     584:	80 93 0f 01 	sts	0x010F, r24
    }
    nRF24L01P_ReadWrite_Register( reg, 0, nRF24L01P.TempBuf, 1 );
     588:	8f 2d       	mov	r24, r15
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	4f e0       	ldi	r20, 0x0F	; 15
     58e:	51 e0       	ldi	r21, 0x01	; 1
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  }
}
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	08 95       	ret

0000059e <nRF24L01P_Flush_Tx_Buf>:


/* tx and rx buffer flush */

void nRF24L01P_Flush_Tx_Buf(void){
  nRF24L01P_ReadWrite_Register( 0xE1, 0, nRF24L01P.TempBuf, 0 );
     59e:	81 ee       	ldi	r24, 0xE1	; 225
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	4f e0       	ldi	r20, 0x0F	; 15
     5a4:	51 e0       	ldi	r21, 0x01	; 1
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     5ac:	80 91 2d 01 	lds	r24, 0x012D
     5b0:	88 23       	and	r24, r24
     5b2:	19 f0       	breq	.+6      	; 0x5ba <nRF24L01P_Flush_Tx_Buf+0x1c>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	80 93 2d 01 	sts	0x012D, r24
     5ba:	08 95       	ret

000005bc <nRF24L01P_Flush_Rx_Buf>:
    nRF24L01P_Error_Set(0x02);
  }
}

void nRF24L01P_Flush_Rx_Buf(void){
  nRF24L01P_ReadWrite_Register( 0xE2, 0, nRF24L01P.TempBuf, 0 );
     5bc:	82 ee       	ldi	r24, 0xE2	; 226
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	4f e0       	ldi	r20, 0x0F	; 15
     5c2:	51 e0       	ldi	r21, 0x01	; 1
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     5ca:	80 91 2d 01 	lds	r24, 0x012D
     5ce:	88 23       	and	r24, r24
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <nRF24L01P_Flush_Rx_Buf+0x1c>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	80 93 2d 01 	sts	0x012D, r24
     5d8:	08 95       	ret

000005da <nRF24L01P_Write_Data_Tx_Buf>:



/* read and write in tx and rx fifo */

void nRF24L01P_Write_Data_Tx_Buf(uint8_t *data){
     5da:	ac 01       	movw	r20, r24
  nRF24L01P_ReadWrite_Register( 0xA0, 0, data, nRF24L01P_PACKET_LEN );
     5dc:	80 ea       	ldi	r24, 0xA0	; 160
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	20 e2       	ldi	r18, 0x20	; 32
     5e2:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     5e6:	80 91 2d 01 	lds	r24, 0x012D
     5ea:	88 23       	and	r24, r24
     5ec:	19 f0       	breq	.+6      	; 0x5f4 <nRF24L01P_Write_Data_Tx_Buf+0x1a>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	80 93 2d 01 	sts	0x012D, r24
     5f4:	08 95       	ret

000005f6 <nRF24L01P_Read_Data_Rx_Buf>:
  if( !nRF24L01P_Error_Free() ){
    nRF24L01P_Error_Set(0x04);
  }
}

void nRF24L01P_Read_Data_Rx_Buf(uint8_t *data){
     5f6:	ac 01       	movw	r20, r24
  nRF24L01P_ReadWrite_Register( 0x61, 1, data, nRF24L01P_PACKET_LEN );
     5f8:	81 e6       	ldi	r24, 0x61	; 97
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	20 e2       	ldi	r18, 0x20	; 32
     5fe:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     602:	80 91 2d 01 	lds	r24, 0x012D
     606:	88 23       	and	r24, r24
     608:	19 f0       	breq	.+6      	; 0x610 <nRF24L01P_Read_Data_Rx_Buf+0x1a>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     60a:	85 e0       	ldi	r24, 0x05	; 5
     60c:	80 93 2d 01 	sts	0x012D, r24
     610:	08 95       	ret

00000612 <nRF24L01P_Tx_Buf_Empty>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     612:	80 91 2d 01 	lds	r24, 0x012D
     616:	88 23       	and	r24, r24
     618:	11 f0       	breq	.+4      	; 0x61e <nRF24L01P_Tx_Buf_Empty+0xc>
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	08 95       	ret

/* read tx and rx fifo status */

uint8_t nRF24L01P_Tx_Buf_Empty(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0;
     61e:	10 92 0f 01 	sts	0x010F, r1
    nRF24L01P_ReadWrite_Register( 0x17, 1, nRF24L01P.TempBuf, 1);
     622:	87 e1       	ldi	r24, 0x17	; 23
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	4f e0       	ldi	r20, 0x0F	; 15
     628:	51 e0       	ldi	r21, 0x01	; 1
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
     630:	80 91 0f 01 	lds	r24, 0x010F
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	64 e0       	ldi	r22, 0x04	; 4
     638:	96 95       	lsr	r25
     63a:	87 95       	ror	r24
     63c:	6a 95       	dec	r22
     63e:	e1 f7       	brne	.-8      	; 0x638 <nRF24L01P_Tx_Buf_Empty+0x26>
     640:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
     642:	08 95       	ret

00000644 <nRF24L01P_Rx_Buf_Not_Empty>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     644:	80 91 2d 01 	lds	r24, 0x012D
     648:	88 23       	and	r24, r24
     64a:	11 f0       	breq	.+4      	; 0x650 <nRF24L01P_Rx_Buf_Not_Empty+0xc>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	08 95       	ret
}


uint8_t nRF24L01P_Rx_Buf_Not_Empty(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0;
     650:	10 92 0f 01 	sts	0x010F, r1
    nRF24L01P_ReadWrite_Register( 0x17, 1, nRF24L01P.TempBuf, 1);
     654:	87 e1       	ldi	r24, 0x17	; 23
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	4f e0       	ldi	r20, 0x0F	; 15
     65a:	51 e0       	ldi	r21, 0x01	; 1
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
     662:	80 91 0f 01 	lds	r24, 0x010F
     666:	80 95       	com	r24
     668:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
     66a:	08 95       	ret

0000066c <nRF24L01P_Wait_Tx_Complete>:


uint8_t nRF24L01P_Wait_Tx_Complete(void){
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     670:	80 91 2d 01 	lds	r24, 0x012D
     674:	88 23       	and	r24, r24
     676:	c9 f4       	brne	.+50     	; 0x6aa <nRF24L01P_Wait_Tx_Complete+0x3e>
void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
}

void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
     678:	10 92 2c 01 	sts	0x012C, r1
     67c:	10 92 2b 01 	sts	0x012B, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     680:	cc e2       	ldi	r28, 0x2C	; 44
     682:	d1 e0       	ldi	r29, 0x01	; 1
     684:	14 c0       	rjmp	.+40     	; 0x6ae <nRF24L01P_Wait_Tx_Complete+0x42>
     686:	ce 01       	movw	r24, r28
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <nRF24L01P_Wait_Tx_Complete+0x1c>
  return nRF24L01P.Errors[index];
}

uint8_t nRF24L01P_Error_Timeout(uint16_t ticks){
  _delay_us(100);
  nRF24L01P.ErrorTicks++;
     68c:	80 91 2b 01 	lds	r24, 0x012B
     690:	90 91 2c 01 	lds	r25, 0x012C
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	90 93 2c 01 	sts	0x012C, r25
     69a:	80 93 2b 01 	sts	0x012B, r24
  if(nRF24L01P.ErrorTicks>ticks){
     69e:	85 36       	cpi	r24, 0x65	; 101
     6a0:	91 05       	cpc	r25, r1
     6a2:	28 f0       	brcs	.+10     	; 0x6ae <nRF24L01P_Wait_Tx_Complete+0x42>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     6a4:	86 e0       	ldi	r24, 0x06	; 6
     6a6:	80 93 2d 01 	sts	0x012D, r24
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <nRF24L01P_Wait_Tx_Complete+0x4c>


uint8_t nRF24L01P_Wait_Tx_Complete(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_Error_Clear_Ticks();
    while( !nRF24L01P_Tx_Buf_Empty() ){
     6ae:	0e 94 09 03 	call	0x612	; 0x612 <nRF24L01P_Tx_Buf_Empty>
     6b2:	88 23       	and	r24, r24
     6b4:	41 f3       	breq	.-48     	; 0x686 <nRF24L01P_Wait_Tx_Complete+0x1a>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
    }
	return 1;
  }else{
    return 0;
  }
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <nRF24L01P_Mode_Set_DeepSleep>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     6be:	80 91 2d 01 	lds	r24, 0x012D
     6c2:	88 23       	and	r24, r24
     6c4:	51 f4       	brne	.+20     	; 0x6da <nRF24L01P_Mode_Set_DeepSleep+0x1c>

/* set Modes */

void nRF24L01P_Mode_Set_DeepSleep(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x00;
     6c6:	10 92 0f 01 	sts	0x010F, r1
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	4f e0       	ldi	r20, 0x0F	; 15
     6ce:	51 e0       	ldi	r21, 0x01	; 1
     6d0:	21 e0       	ldi	r18, 0x01	; 1
     6d2:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    nRF24L01P.Mode = 0x00;
     6d6:	10 92 0d 01 	sts	0x010D, r1
  }
  nRF24L01P_Disable();
     6da:	0e 94 c1 01 	call	0x382	; 0x382 <nRF24L01P_Disable>
}
     6de:	08 95       	ret

000006e0 <nRF24L01P_Mode_Set_Sleep>:

void nRF24L01P_Mode_Set_Sleep(void){
  if(nRF24L01P.Enable == 0){
     6e0:	80 91 0e 01 	lds	r24, 0x010E
     6e4:	88 23       	and	r24, r24
     6e6:	11 f4       	brne	.+4      	; 0x6ec <nRF24L01P_Mode_Set_Sleep+0xc>
    nRF24L01P_Enable();
     6e8:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01P_Enable>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     6ec:	80 91 2d 01 	lds	r24, 0x012D
     6f0:	88 23       	and	r24, r24
     6f2:	61 f4       	brne	.+24     	; 0x70c <nRF24L01P_Mode_Set_Sleep+0x2c>
void nRF24L01P_Mode_Set_Sleep(void){
  if(nRF24L01P.Enable == 0){
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x00;
     6f4:	10 92 0f 01 	sts	0x010F, r1

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     6f8:	40 98       	cbi	0x08, 0	; 8
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x00;
	nRF24L01P_Set_CE(0);
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	4f e0       	ldi	r20, 0x0F	; 15
     6fe:	51 e0       	ldi	r21, 0x01	; 1
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    nRF24L01P.Mode = 0x01;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	80 93 0d 01 	sts	0x010D, r24
     70c:	08 95       	ret

0000070e <nRF24L01P_Mode_Set_Rx>:
  }
}

void nRF24L01P_Mode_Set_Rx(void){
  if(nRF24L01P.Enable == 0){
     70e:	80 91 0e 01 	lds	r24, 0x010E
     712:	88 23       	and	r24, r24
     714:	11 f4       	brne	.+4      	; 0x71a <nRF24L01P_Mode_Set_Rx+0xc>
    nRF24L01P_Enable();
     716:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01P_Enable>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     71a:	80 91 2d 01 	lds	r24, 0x012D
     71e:	88 23       	and	r24, r24
     720:	71 f4       	brne	.+28     	; 0x73e <nRF24L01P_Mode_Set_Rx+0x30>
void nRF24L01P_Mode_Set_Rx(void){
  if(nRF24L01P.Enable == 0){
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x73;
     722:	83 e7       	ldi	r24, 0x73	; 115
     724:	80 93 0f 01 	sts	0x010F, r24
  }
}

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
     728:	40 9a       	sbi	0x08, 0	; 8
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x73;
    nRF24L01P_Set_CE(1);
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	4f e0       	ldi	r20, 0x0F	; 15
     730:	51 e0       	ldi	r21, 0x01	; 1
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
	nRF24L01P.Mode = 0x02;
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	80 93 0d 01 	sts	0x010D, r24
     73e:	08 95       	ret

00000740 <nRF24L01P_Mode_Set_Tx>:
  }
}

void nRF24L01P_Mode_Set_Tx(void){
  if(nRF24L01P.Enable == 0){
     740:	80 91 0e 01 	lds	r24, 0x010E
     744:	88 23       	and	r24, r24
     746:	11 f4       	brne	.+4      	; 0x74c <nRF24L01P_Mode_Set_Tx+0xc>
    nRF24L01P_Enable();
     748:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01P_Enable>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     74c:	80 91 2d 01 	lds	r24, 0x012D
     750:	88 23       	and	r24, r24
     752:	79 f4       	brne	.+30     	; 0x772 <nRF24L01P_Mode_Set_Tx+0x32>
void nRF24L01P_Mode_Set_Tx(void){
  if(nRF24L01P.Enable == 0){
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x72;
     754:	82 e7       	ldi	r24, 0x72	; 114
     756:	80 93 0f 01 	sts	0x010F, r24

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     75a:	40 98       	cbi	0x08, 0	; 8
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x72;
    nRF24L01P_Set_CE(0);
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	4f e0       	ldi	r20, 0x0F	; 15
     762:	51 e0       	ldi	r21, 0x01	; 1
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  }
}

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
     76a:	40 9a       	sbi	0x08, 0	; 8
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x72;
    nRF24L01P_Set_CE(0);
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
	nRF24L01P_Set_CE(1);
	nRF24L01P.Mode = 0x03;
     76c:	83 e0       	ldi	r24, 0x03	; 3
     76e:	80 93 0d 01 	sts	0x010D, r24
     772:	08 95       	ret

00000774 <nRF24L01P_Mode_Set>:
  }
}

void nRF24L01P_Mode_Set(uint8_t Mode){
     774:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     776:	80 91 2d 01 	lds	r24, 0x012D
     77a:	88 23       	and	r24, r24
     77c:	b1 f4       	brne	.+44     	; 0x7aa <nRF24L01P_Mode_Set+0x36>
  }
}

void nRF24L01P_Mode_Set(uint8_t Mode){
  if(nRF24L01P_Error_Free()){
    if(Mode == 0){
     77e:	99 23       	and	r25, r25
     780:	19 f4       	brne	.+6      	; 0x788 <nRF24L01P_Mode_Set+0x14>
	  nRF24L01P_Mode_Set_DeepSleep();
     782:	0e 94 5f 03 	call	0x6be	; 0x6be <nRF24L01P_Mode_Set_DeepSleep>
     786:	08 95       	ret
	}else if(Mode == 1){
     788:	91 30       	cpi	r25, 0x01	; 1
     78a:	19 f4       	brne	.+6      	; 0x792 <nRF24L01P_Mode_Set+0x1e>
	  nRF24L01P_Mode_Set_Sleep();
     78c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nRF24L01P_Mode_Set_Sleep>
     790:	08 95       	ret
	}else if(Mode == 2){
     792:	92 30       	cpi	r25, 0x02	; 2
     794:	19 f4       	brne	.+6      	; 0x79c <nRF24L01P_Mode_Set+0x28>
	  nRF24L01P_Mode_Set_Rx();
     796:	0e 94 87 03 	call	0x70e	; 0x70e <nRF24L01P_Mode_Set_Rx>
     79a:	08 95       	ret
	}else if(Mode == 3){
     79c:	93 30       	cpi	r25, 0x03	; 3
     79e:	19 f4       	brne	.+6      	; 0x7a6 <nRF24L01P_Mode_Set+0x32>
	  nRF24L01P_Mode_Set_Tx();
     7a0:	0e 94 a0 03 	call	0x740	; 0x740 <nRF24L01P_Mode_Set_Tx>
     7a4:	08 95       	ret
	}else{
	  nRF24L01P_Mode_Set_Rx();
     7a6:	0e 94 87 03 	call	0x70e	; 0x70e <nRF24L01P_Mode_Set_Rx>
     7aa:	08 95       	ret

000007ac <nRF24L01P_Mode_Get>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     7ac:	80 91 2d 01 	lds	r24, 0x012D
     7b0:	88 23       	and	r24, r24
     7b2:	11 f0       	breq	.+4      	; 0x7b8 <nRF24L01P_Mode_Get+0xc>
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	08 95       	ret
  }
}

uint8_t nRF24L01P_Mode_Get(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( 0x00, 1, nRF24L01P.TempBuf, 1 );
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	4f e0       	ldi	r20, 0x0F	; 15
     7be:	51 e0       	ldi	r21, 0x01	; 1
     7c0:	21 e0       	ldi	r18, 0x01	; 1
     7c2:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    if(nRF24L01P.TempBuf[0] & (1<<1)){
     7c6:	80 91 0f 01 	lds	r24, 0x010F
     7ca:	81 ff       	sbrs	r24, 1
     7cc:	08 c0       	rjmp	.+16     	; 0x7de <nRF24L01P_Mode_Get+0x32>
      if(nRF24L01P.TempBuf[0] & (1<<0)){
     7ce:	80 ff       	sbrs	r24, 0
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <nRF24L01P_Mode_Get+0x2a>
	    nRF24L01P.Mode = 0x02;
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <nRF24L01P_Mode_Get+0x2c>
	    return 2; //rx Mode
	  }else{
	    nRF24L01P.Mode = 0x03;
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	80 93 0d 01 	sts	0x010D, r24
     7dc:	08 95       	ret
	    return 3; //tx Mode
	  }
    }else{
      nRF24L01P.Mode = 0x01;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 0d 01 	sts	0x010D, r24
      return 1;   //pwr down
    }
  }else{
    return 0;
  }
}
     7e4:	08 95       	ret

000007e6 <nRF24L01P_Channel_Set>:



void nRF24L01P_Channel_Set(uint8_t channel){
     7e6:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     7e8:	80 91 2d 01 	lds	r24, 0x012D
     7ec:	88 23       	and	r24, r24
     7ee:	69 f4       	brne	.+26     	; 0x80a <nRF24L01P_Channel_Set+0x24>
void nRF24L01P_Channel_Set(uint8_t channel){
  if(nRF24L01P_Error_Free()){
    if(channel > 120){
      channel = 120;
    }
    nRF24L01P.TempBuf[0] = channel;
     7f0:	89 2f       	mov	r24, r25
     7f2:	99 37       	cpi	r25, 0x79	; 121
     7f4:	08 f0       	brcs	.+2      	; 0x7f8 <nRF24L01P_Channel_Set+0x12>
     7f6:	88 e7       	ldi	r24, 0x78	; 120
     7f8:	80 93 0f 01 	sts	0x010F, r24
    nRF24L01P_ReadWrite_Register( 0x05, 0, nRF24L01P.TempBuf, 1 );
     7fc:	85 e0       	ldi	r24, 0x05	; 5
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	4f e0       	ldi	r20, 0x0F	; 15
     802:	51 e0       	ldi	r21, 0x01	; 1
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
     80a:	08 95       	ret

0000080c <nRF24L01P_Channel_Get>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     80c:	80 91 2d 01 	lds	r24, 0x012D
     810:	88 23       	and	r24, r24
     812:	11 f0       	breq	.+4      	; 0x818 <nRF24L01P_Channel_Get+0xc>
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	08 95       	ret
  }
}

uint8_t nRF24L01P_Channel_Get(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( 0x05, 1, nRF24L01P.TempBuf, 1 );
     818:	85 e0       	ldi	r24, 0x05	; 5
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	4f e0       	ldi	r20, 0x0F	; 15
     81e:	51 e0       	ldi	r21, 0x01	; 1
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    return nRF24L01P.TempBuf[0];
     826:	80 91 0f 01 	lds	r24, 0x010F
  }else{
    return 0;
  }
}
     82a:	08 95       	ret

0000082c <nRF24L01P_Speed_Set>:



void nRF24L01P_Speed_Set(uint8_t index){
  if(index == 0){       //250kbps
     82c:	88 23       	and	r24, r24
     82e:	21 f4       	brne	.+8      	; 0x838 <nRF24L01P_Speed_Set+0xc>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 5, 1 );
     830:	86 e0       	ldi	r24, 0x06	; 6
     832:	65 e0       	ldi	r22, 0x05	; 5
     834:	41 e0       	ldi	r20, 0x01	; 1
     836:	05 c0       	rjmp	.+10     	; 0x842 <nRF24L01P_Speed_Set+0x16>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 3, 0 );
  }
  else if(index == 1){  //1Mbps
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	49 f4       	brne	.+18     	; 0x84e <nRF24L01P_Speed_Set+0x22>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 5, 0 );
     83c:	86 e0       	ldi	r24, 0x06	; 6
     83e:	65 e0       	ldi	r22, 0x05	; 5
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	0e 94 99 02 	call	0x532	; 0x532 <nRF24L01P_ReadModifyWrite_Register>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 3, 0 );
     846:	86 e0       	ldi	r24, 0x06	; 6
     848:	63 e0       	ldi	r22, 0x03	; 3
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	08 c0       	rjmp	.+16     	; 0x85e <nRF24L01P_Speed_Set+0x32>
  }
  else if(index == 2){  //2Mbps
    nRF24L01P_ReadModifyWrite_Register( 0x06, 5, 0 );
    nRF24L01P_ReadModifyWrite_Register( 0x06, 3, 1 );
  }else{                //2Mbps
    nRF24L01P_ReadModifyWrite_Register( 0x06, 5, 0 );
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	65 e0       	ldi	r22, 0x05	; 5
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	0e 94 99 02 	call	0x532	; 0x532 <nRF24L01P_ReadModifyWrite_Register>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 3, 1 );
     858:	86 e0       	ldi	r24, 0x06	; 6
     85a:	63 e0       	ldi	r22, 0x03	; 3
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	0e 94 99 02 	call	0x532	; 0x532 <nRF24L01P_ReadModifyWrite_Register>
     862:	08 95       	ret

00000864 <nRF24L01P_Speed_Get>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     864:	80 91 2d 01 	lds	r24, 0x012D
     868:	88 23       	and	r24, r24
     86a:	11 f0       	breq	.+4      	; 0x870 <nRF24L01P_Speed_Get+0xc>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	08 95       	ret
  }
}

uint8_t nRF24L01P_Speed_Get(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( 0x06, 1, nRF24L01P.TempBuf, 1 );
     870:	86 e0       	ldi	r24, 0x06	; 6
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	4f e0       	ldi	r20, 0x0F	; 15
     876:	51 e0       	ldi	r21, 0x01	; 1
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    nRF24L01P.TempBuf[1] = (nRF24L01P.TempBuf[0] >> 3) & 0x01;
     87e:	90 91 0f 01 	lds	r25, 0x010F
    nRF24L01P.TempBuf[0] >>= 4;
    nRF24L01P.TempBuf[0] &= 0x02;
     882:	89 2f       	mov	r24, r25
     884:	82 95       	swap	r24
     886:	82 70       	andi	r24, 0x02	; 2
     888:	80 93 0f 01 	sts	0x010F, r24
    nRF24L01P.TempBuf[1] |= nRF24L01P.TempBuf[0];
     88c:	96 95       	lsr	r25
     88e:	96 95       	lsr	r25
     890:	96 95       	lsr	r25
     892:	91 70       	andi	r25, 0x01	; 1
     894:	98 2b       	or	r25, r24
     896:	90 93 10 01 	sts	0x0110, r25
    if      (nRF24L01P.TempBuf[1] == 0x02){
     89a:	92 30       	cpi	r25, 0x02	; 2
     89c:	19 f4       	brne	.+6      	; 0x8a4 <nRF24L01P_Speed_Get+0x40>
      nRF24L01P.TempBuf[0] = 0;
     89e:	10 92 0f 01 	sts	0x010F, r1
     8a2:	0a c0       	rjmp	.+20     	; 0x8b8 <nRF24L01P_Speed_Get+0x54>
    }else if(nRF24L01P.TempBuf[1] == 0x01){
     8a4:	91 30       	cpi	r25, 0x01	; 1
     8a6:	19 f4       	brne	.+6      	; 0x8ae <nRF24L01P_Speed_Get+0x4a>
      nRF24L01P.TempBuf[0] = 1;
     8a8:	90 93 0f 01 	sts	0x010F, r25
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <nRF24L01P_Speed_Get+0x54>
    }else if(nRF24L01P.TempBuf[1] == 0x00){
     8ae:	99 23       	and	r25, r25
     8b0:	19 f4       	brne	.+6      	; 0x8b8 <nRF24L01P_Speed_Get+0x54>
      nRF24L01P.TempBuf[0] = 2;
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	80 93 0f 01 	sts	0x010F, r24
    }
    return nRF24L01P.TempBuf[0];
     8b8:	80 91 0f 01 	lds	r24, 0x010F
  }else{
    return 0;
  }
}
     8bc:	08 95       	ret

000008be <nRF24L01P_Tx_Power_Set>:



void nRF24L01P_Tx_Power_Set(uint8_t index){
     8be:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     8c0:	80 91 2d 01 	lds	r24, 0x012D
     8c4:	88 23       	and	r24, r24
     8c6:	71 f5       	brne	.+92     	; 0x924 <__stack+0x25>



void nRF24L01P_Tx_Power_Set(uint8_t index){
  if(nRF24L01P_Error_Free()){
    if(index == 0){
     8c8:	99 23       	and	r25, r25
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <nRF24L01P_Tx_Power_Set+0x16>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 0 );
     8cc:	86 e0       	ldi	r24, 0x06	; 6
     8ce:	62 e0       	ldi	r22, 0x02	; 2
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <nRF24L01P_Tx_Power_Set+0x2c>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 0 );
    }
    else if(index == 1){
     8d4:	91 30       	cpi	r25, 0x01	; 1
     8d6:	21 f4       	brne	.+8      	; 0x8e0 <nRF24L01P_Tx_Power_Set+0x22>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 0 );
     8d8:	86 e0       	ldi	r24, 0x06	; 6
     8da:	62 e0       	ldi	r22, 0x02	; 2
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	10 c0       	rjmp	.+32     	; 0x900 <__stack+0x1>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 1 );
    }
    else if(index == 2){
     8e0:	92 30       	cpi	r25, 0x02	; 2
     8e2:	49 f4       	brne	.+18     	; 0x8f6 <nRF24L01P_Tx_Power_Set+0x38>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 1 );
     8e4:	86 e0       	ldi	r24, 0x06	; 6
     8e6:	62 e0       	ldi	r22, 0x02	; 2
     8e8:	41 e0       	ldi	r20, 0x01	; 1
     8ea:	0e 94 99 02 	call	0x532	; 0x532 <nRF24L01P_ReadModifyWrite_Register>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 0 );
     8ee:	86 e0       	ldi	r24, 0x06	; 6
     8f0:	61 e0       	ldi	r22, 0x01	; 1
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	0a c0       	rjmp	.+20     	; 0x90a <__stack+0xb>
    }
    else if(index == 3){
     8f6:	93 30       	cpi	r25, 0x03	; 3
     8f8:	59 f4       	brne	.+22     	; 0x910 <__stack+0x11>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 1 );
     8fa:	86 e0       	ldi	r24, 0x06	; 6
     8fc:	62 e0       	ldi	r22, 0x02	; 2
     8fe:	41 e0       	ldi	r20, 0x01	; 1
     900:	0e 94 99 02 	call	0x532	; 0x532 <nRF24L01P_ReadModifyWrite_Register>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 1 );
     904:	86 e0       	ldi	r24, 0x06	; 6
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	41 e0       	ldi	r20, 0x01	; 1
     90a:	0e 94 99 02 	call	0x532	; 0x532 <nRF24L01P_ReadModifyWrite_Register>
     90e:	08 95       	ret
    }else{
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 1 );
     910:	86 e0       	ldi	r24, 0x06	; 6
     912:	62 e0       	ldi	r22, 0x02	; 2
     914:	41 e0       	ldi	r20, 0x01	; 1
     916:	0e 94 99 02 	call	0x532	; 0x532 <nRF24L01P_ReadModifyWrite_Register>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 1 );
     91a:	86 e0       	ldi	r24, 0x06	; 6
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	41 e0       	ldi	r20, 0x01	; 1
     920:	0e 94 99 02 	call	0x532	; 0x532 <nRF24L01P_ReadModifyWrite_Register>
     924:	08 95       	ret

00000926 <nRF24L01P_Tx_Power_Get>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     926:	80 91 2d 01 	lds	r24, 0x012D
     92a:	88 23       	and	r24, r24
     92c:	11 f0       	breq	.+4      	; 0x932 <nRF24L01P_Tx_Power_Get+0xc>
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	08 95       	ret
  }
}

uint8_t nRF24L01P_Tx_Power_Get(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( 0x06, 1, nRF24L01P.TempBuf, 1 );
     932:	86 e0       	ldi	r24, 0x06	; 6
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	4f e0       	ldi	r20, 0x0F	; 15
     938:	51 e0       	ldi	r21, 0x01	; 1
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
    nRF24L01P.TempBuf[0] >>= 1;
    nRF24L01P.TempBuf[0] &= 0x03;
     940:	80 91 0f 01 	lds	r24, 0x010F
     944:	86 95       	lsr	r24
     946:	83 70       	andi	r24, 0x03	; 3
     948:	80 93 0f 01 	sts	0x010F, r24
    return nRF24L01P.TempBuf[0];
  }else{
    return 0;
  }
}  
     94c:	08 95       	ret

0000094e <nRF24L01P_Own_Addr_Set>:

void nRF24L01P_Own_Addr_Set(uint8_t addr){
  nRF24L01P.Address.Own=addr;
     94e:	80 93 11 01 	sts	0x0111, r24
}
     952:	08 95       	ret

00000954 <nRF24L01P_Own_Addr_Get>:

uint8_t nRF24L01P_Own_Addr_Get(void){
  return nRF24L01P.Address.Own;
}
     954:	80 91 11 01 	lds	r24, 0x0111
     958:	08 95       	ret

0000095a <nRF24L01P_Dest_Addr_Set>:

void nRF24L01P_Dest_Addr_Set(uint8_t addr){
  nRF24L01P.Address.Dest=addr;
     95a:	80 93 12 01 	sts	0x0112, r24
}
     95e:	08 95       	ret

00000960 <nRF24L01P_Dest_Addr_Get>:

uint8_t nRF24L01P_Dest_Addr_Get(void){
  return nRF24L01P.Address.Dest;
}
     960:	80 91 12 01 	lds	r24, 0x0112
     964:	08 95       	ret

00000966 <nRF24L01P_RxTicks_Set>:

void nRF24L01P_RxTicks_Set(uint16_t val){
  nRF24L01P.Config.RxTicks=val;
     966:	90 93 16 01 	sts	0x0116, r25
     96a:	80 93 15 01 	sts	0x0115, r24
}
     96e:	08 95       	ret

00000970 <nRF24L01P_RxTicks_Get>:

uint16_t nRF24L01P_RxTicks_Get(void){
  return nRF24L01P.Config.RxTicks;
}
     970:	80 91 15 01 	lds	r24, 0x0115
     974:	90 91 16 01 	lds	r25, 0x0116
     978:	08 95       	ret

0000097a <nRF24L01P_RxTimeout_Set>:

void nRF24L01P_RxTimeout_Set(uint16_t val){
  nRF24L01P.Config.RxTimeout=val;
     97a:	90 93 14 01 	sts	0x0114, r25
     97e:	80 93 13 01 	sts	0x0113, r24
}
     982:	08 95       	ret

00000984 <nRF24L01P_RxTimeout_Get>:

uint16_t nRF24L01P_RxTimeout_Get(void){
  return nRF24L01P.Config.RxTimeout;
}
     984:	80 91 13 01 	lds	r24, 0x0113
     988:	90 91 14 01 	lds	r25, 0x0114
     98c:	08 95       	ret

0000098e <nRF24L01P_MaxRetransmission_Set>:

void nRF24L01P_MaxRetransmission_Set(uint16_t val){
  nRF24L01P.Config.MaxRetry=val;
     98e:	90 93 19 01 	sts	0x0119, r25
     992:	80 93 18 01 	sts	0x0118, r24
}
     996:	08 95       	ret

00000998 <nRF24L01P_MaxRetransmission_Get>:

uint16_t nRF24L01P_MaxRetransmission_Get(void){
  return nRF24L01P.Config.MaxRetry;
}
     998:	80 91 18 01 	lds	r24, 0x0118
     99c:	90 91 19 01 	lds	r25, 0x0119
     9a0:	08 95       	ret

000009a2 <nRF24L01P_Tx_Basic>:

void nRF24L01P_Tx_Basic(uint8_t *buf, uint8_t len){
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	8c 01       	movw	r16, r24
     9aa:	f6 2e       	mov	r15, r22


/* error handling */

void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
     9ac:	10 92 2d 01 	sts	0x012D, r1
  return nRF24L01P.Config.MaxRetry;
}

void nRF24L01P_Tx_Basic(uint8_t *buf, uint8_t len){
  nRF24L01P_Error_Clear();
  nRF24L01P_Flush_Tx_Buf();
     9b0:	0e 94 cf 02 	call	0x59e	; 0x59e <nRF24L01P_Flush_Tx_Buf>
  buf[nRF24L01P.SpaceAlloc.Blocks] = nRF24L01P.Blocks.Remaining;      //24
     9b4:	80 91 2a 01 	lds	r24, 0x012A
     9b8:	f8 01       	movw	r30, r16
     9ba:	e8 0f       	add	r30, r24
     9bc:	f1 1d       	adc	r31, r1
     9be:	80 91 20 01 	lds	r24, 0x0120
     9c2:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.PID   ] = nRF24L01P.Packet.TxPID;          //25
     9c4:	80 91 28 01 	lds	r24, 0x0128
     9c8:	f8 01       	movw	r30, r16
     9ca:	e8 0f       	add	r30, r24
     9cc:	f1 1d       	adc	r31, r1
     9ce:	80 91 1c 01 	lds	r24, 0x011C
     9d2:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.Ack   ] = nRF24L01P.Packet.AckReq;         //26
     9d4:	80 91 27 01 	lds	r24, 0x0127
     9d8:	f8 01       	movw	r30, r16
     9da:	e8 0f       	add	r30, r24
     9dc:	f1 1d       	adc	r31, r1
     9de:	80 91 1f 01 	lds	r24, 0x011F
     9e2:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.Own   ] = nRF24L01P.Address.Own;           //27
     9e4:	80 91 26 01 	lds	r24, 0x0126
     9e8:	f8 01       	movw	r30, r16
     9ea:	e8 0f       	add	r30, r24
     9ec:	f1 1d       	adc	r31, r1
     9ee:	80 91 11 01 	lds	r24, 0x0111
     9f2:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.Dest  ] = nRF24L01P.Address.Dest;          //28
     9f4:	80 91 25 01 	lds	r24, 0x0125
     9f8:	f8 01       	movw	r30, r16
     9fa:	e8 0f       	add	r30, r24
     9fc:	f1 1d       	adc	r31, r1
     9fe:	80 91 12 01 	lds	r24, 0x0112
     a02:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.Len   ] = len;                             //29
     a04:	80 91 24 01 	lds	r24, 0x0124
     a08:	f8 01       	movw	r30, r16
     a0a:	e8 0f       	add	r30, r24
     a0c:	f1 1d       	adc	r31, r1
     a0e:	f0 82       	st	Z, r15
  uint16_t temp = nRF24L01P_CRC_Block( buf, nRF24L01P.SpaceAlloc.CRCLen );
     a10:	c8 01       	movw	r24, r16
     a12:	60 91 29 01 	lds	r22, 0x0129
     a16:	0e 94 25 02 	call	0x44a	; 0x44a <nRF24L01P_CRC_Block>
  buf[nRF24L01P.SpaceAlloc.CRCMSB] = (temp & 0xFF00)>>8;              //30
     a1a:	20 91 22 01 	lds	r18, 0x0122
     a1e:	f8 01       	movw	r30, r16
     a20:	e2 0f       	add	r30, r18
     a22:	f1 1d       	adc	r31, r1
     a24:	90 83       	st	Z, r25
  buf[nRF24L01P.SpaceAlloc.CRCLSB] = (temp & 0x00FF);                 //31
     a26:	90 91 23 01 	lds	r25, 0x0123
     a2a:	f8 01       	movw	r30, r16
     a2c:	e9 0f       	add	r30, r25
     a2e:	f1 1d       	adc	r31, r1
     a30:	80 83       	st	Z, r24
  nRF24L01P_Write_Data_Tx_Buf(buf);
     a32:	c8 01       	movw	r24, r16
     a34:	0e 94 ed 02 	call	0x5da	; 0x5da <nRF24L01P_Write_Data_Tx_Buf>
  nRF24L01P_Mode_Set(3);                                               //tx
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	0e 94 ba 03 	call	0x774	; 0x774 <nRF24L01P_Mode_Set>
  nRF24L01P_Wait_Tx_Complete(); 
     a3e:	0e 94 36 03 	call	0x66c	; 0x66c <nRF24L01P_Wait_Tx_Complete>
  //nRF24L01P_Mode_Set(2);                                               //rx
}
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	08 95       	ret

00000a4a <nRF24L01P_Rx_Basic>:


uint8_t nRF24L01P_Rx_Basic(uint8_t *buf){
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	ec 01       	movw	r28, r24


/* error handling */

void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
     a5c:	10 92 2d 01 	sts	0x012D, r1
uint8_t nRF24L01P_Dest_Addr_Get(void){
  return nRF24L01P.Address.Dest;
}

void nRF24L01P_RxTicks_Set(uint16_t val){
  nRF24L01P.Config.RxTicks=val;
     a60:	10 92 16 01 	sts	0x0116, r1
     a64:	10 92 15 01 	sts	0x0115, r1
     a68:	7c e2       	ldi	r23, 0x2C	; 44
     a6a:	c7 2e       	mov	r12, r23
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	d7 2e       	mov	r13, r23
     a70:	3c c0       	rjmp	.+120    	; 0xaea <nRF24L01P_Rx_Basic+0xa0>
uint8_t nRF24L01P_Rx_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P_Error_Clear();
  nRF24L01P_RxTicks_Set(0);
  while(nRF24L01P_RxTicks_Get() < nRF24L01P_RxTimeout_Get()){
    if(nRF24L01P_Rx_Buf_Not_Empty()){
     a72:	0e 94 22 03 	call	0x644	; 0x644 <nRF24L01P_Rx_Buf_Not_Empty>
     a76:	88 23       	and	r24, r24
     a78:	61 f1       	breq	.+88     	; 0xad2 <nRF24L01P_Rx_Basic+0x88>
      nRF24L01P_Read_Data_Rx_Buf(buf);
     a7a:	ce 01       	movw	r24, r28
     a7c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <nRF24L01P_Read_Data_Rx_Buf>
	  uint16_t rec_crc=buf[nRF24L01P.SpaceAlloc.CRCMSB];               //30
     a80:	80 91 22 01 	lds	r24, 0x0122
     a84:	fe 01       	movw	r30, r28
     a86:	e8 0f       	add	r30, r24
     a88:	f1 1d       	adc	r31, r1
	  rec_crc<<=8;
     a8a:	f0 80       	ld	r15, Z
     a8c:	ee 24       	eor	r14, r14
	  rec_crc|=buf[nRF24L01P.SpaceAlloc.CRCLSB];                       //31
     a8e:	80 91 23 01 	lds	r24, 0x0123
     a92:	fe 01       	movw	r30, r28
     a94:	e8 0f       	add	r30, r24
     a96:	f1 1d       	adc	r31, r1
     a98:	00 81       	ld	r16, Z
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	0e 29       	or	r16, r14
     a9e:	1f 29       	or	r17, r15
      uint16_t calc_crc=nRF24L01P_CRC_Block(buf, nRF24L01P.SpaceAlloc.CRCLen);
     aa0:	ce 01       	movw	r24, r28
     aa2:	60 91 29 01 	lds	r22, 0x0129
     aa6:	0e 94 25 02 	call	0x44a	; 0x44a <nRF24L01P_CRC_Block>
      if(rec_crc == calc_crc){
     aaa:	08 17       	cp	r16, r24
     aac:	19 07       	cpc	r17, r25
     aae:	e9 f4       	brne	.+58     	; 0xaea <nRF24L01P_Rx_Basic+0xa0>
	    nRF24L01P.Packet.RxPID = buf[nRF24L01P.SpaceAlloc.PID];        //25
     ab0:	80 91 28 01 	lds	r24, 0x0128
     ab4:	fe 01       	movw	r30, r28
     ab6:	e8 0f       	add	r30, r24
     ab8:	f1 1d       	adc	r31, r1
     aba:	80 81       	ld	r24, Z
     abc:	80 93 1d 01 	sts	0x011D, r24
	    nRF24L01P.Blocks.Remaining = buf[nRF24L01P.SpaceAlloc.Blocks]; //24
     ac0:	80 91 2a 01 	lds	r24, 0x012A
     ac4:	c8 0f       	add	r28, r24
     ac6:	d1 1d       	adc	r29, r1
     ac8:	88 81       	ld	r24, Y
     aca:	80 93 20 01 	sts	0x0120, r24
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	19 c0       	rjmp	.+50     	; 0xb04 <nRF24L01P_Rx_Basic+0xba>
     ad2:	c6 01       	movw	r24, r12
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <nRF24L01P_Rx_Basic+0x8a>
		sts=1;
		break;
	  }
    }else{
      _delay_us(100);
      nRF24L01P.Config.RxTicks++;
     ad8:	80 91 15 01 	lds	r24, 0x0115
     adc:	90 91 16 01 	lds	r25, 0x0116
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	90 93 16 01 	sts	0x0116, r25
     ae6:	80 93 15 01 	sts	0x0115, r24

uint8_t nRF24L01P_Rx_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P_Error_Clear();
  nRF24L01P_RxTicks_Set(0);
  while(nRF24L01P_RxTicks_Get() < nRF24L01P_RxTimeout_Get()){
     aea:	20 91 15 01 	lds	r18, 0x0115
     aee:	30 91 16 01 	lds	r19, 0x0116
     af2:	80 91 13 01 	lds	r24, 0x0113
     af6:	90 91 14 01 	lds	r25, 0x0114
     afa:	28 17       	cp	r18, r24
     afc:	39 07       	cpc	r19, r25
     afe:	08 f4       	brcc	.+2      	; 0xb02 <nRF24L01P_Rx_Basic+0xb8>
     b00:	b8 cf       	rjmp	.-144    	; 0xa72 <nRF24L01P_Rx_Basic+0x28>
     b02:	80 e0       	ldi	r24, 0x00	; 0
      _delay_us(100);
      nRF24L01P.Config.RxTicks++;
	}
  }
  return sts;
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	08 95       	ret

00000b16 <nRF24L01P_Tx_With_Ack>:


uint8_t nRF24L01P_Tx_With_Ack(uint8_t *buf, uint8_t len){
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	df 93       	push	r29
     b20:	cf 93       	push	r28
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	a0 97       	sbiw	r28, 0x20	; 32
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
void nRF24L01P_RxTimeout_Set(uint16_t val){
  nRF24L01P.Config.RxTimeout=val;
}

uint16_t nRF24L01P_RxTimeout_Get(void){
  return nRF24L01P.Config.RxTimeout;
     b32:	e0 90 13 01 	lds	r14, 0x0113
     b36:	f0 90 14 01 	lds	r15, 0x0114
uint16_t nRF24L01P_RxTicks_Get(void){
  return nRF24L01P.Config.RxTicks;
}

void nRF24L01P_RxTimeout_Set(uint16_t val){
  nRF24L01P.Config.RxTimeout=val;
     b3a:	25 e0       	ldi	r18, 0x05	; 5
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	30 93 14 01 	sts	0x0114, r19
     b42:	20 93 13 01 	sts	0x0113, r18

uint8_t nRF24L01P_Tx_With_Ack(uint8_t *buf, uint8_t len){
  uint8_t  sts = 0, ack_buf[32];
  uint16_t timeout_mem = nRF24L01P_RxTimeout_Get();
  nRF24L01P_RxTimeout_Set(nRF24L01P_TX_ACK_RCV_TIMEOUT);
  nRF24L01P_Tx_Basic(buf, len);
     b46:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <nRF24L01P_Tx_Basic>
  if( nRF24L01P.Packet.AckReq ){                    //need to improve ack type
     b4a:	80 91 1f 01 	lds	r24, 0x011F
     b4e:	88 23       	and	r24, r24
     b50:	a1 f0       	breq	.+40     	; 0xb7a <nRF24L01P_Tx_With_Ack+0x64>
    if( nRF24L01P_Rx_Basic(ack_buf) ){
     b52:	8e 01       	movw	r16, r28
     b54:	0f 5f       	subi	r16, 0xFF	; 255
     b56:	1f 4f       	sbci	r17, 0xFF	; 255
     b58:	c8 01       	movw	r24, r16
     b5a:	0e 94 25 05 	call	0xa4a	; 0xa4a <nRF24L01P_Rx_Basic>
     b5e:	88 23       	and	r24, r24
     b60:	61 f0       	breq	.+24     	; 0xb7a <nRF24L01P_Tx_With_Ack+0x64>
      if( nRF24L01P_Own_Addr_Get() == ack_buf[nRF24L01P.SpaceAlloc.Dest] ){
     b62:	80 91 25 01 	lds	r24, 0x0125
     b66:	08 0f       	add	r16, r24
     b68:	11 1d       	adc	r17, r1
     b6a:	90 91 11 01 	lds	r25, 0x0111
     b6e:	f8 01       	movw	r30, r16
     b70:	80 81       	ld	r24, Z
     b72:	98 17       	cp	r25, r24
     b74:	11 f4       	brne	.+4      	; 0xb7a <nRF24L01P_Tx_With_Ack+0x64>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <nRF24L01P_Tx_With_Ack+0x66>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
uint16_t nRF24L01P_RxTicks_Get(void){
  return nRF24L01P.Config.RxTicks;
}

void nRF24L01P_RxTimeout_Set(uint16_t val){
  nRF24L01P.Config.RxTimeout=val;
     b7c:	f0 92 14 01 	sts	0x0114, r15
     b80:	e0 92 13 01 	sts	0x0113, r14
      }
    }
  }
  nRF24L01P_RxTimeout_Set(timeout_mem);
  return sts;
}
     b84:	a0 96       	adiw	r28, 0x20	; 32
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <nRF24L01P_Rx_With_Ack>:

uint8_t nRF24L01P_Rx_With_Ack(uint8_t *buf){
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	a0 97       	sbiw	r28, 0x20	; 32
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	8c 01       	movw	r16, r24
  uint8_t sts=0, ack_buf[32]="~^~";
     bb8:	8e e7       	ldi	r24, 0x7E	; 126
     bba:	9e e5       	ldi	r25, 0x5E	; 94
     bbc:	ae e7       	ldi	r26, 0x7E	; 126
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	ab 83       	std	Y+3, r26	; 0x03
     bc6:	bc 83       	std	Y+4, r27	; 0x04
     bc8:	fe 01       	movw	r30, r28
     bca:	35 96       	adiw	r30, 0x05	; 5
     bcc:	8c e1       	ldi	r24, 0x1C	; 28
     bce:	df 01       	movw	r26, r30
     bd0:	1d 92       	st	X+, r1
     bd2:	8a 95       	dec	r24
     bd4:	e9 f7       	brne	.-6      	; 0xbd0 <nRF24L01P_Rx_With_Ack+0x32>
  if( nRF24L01P_Rx_Basic(buf) ){
     bd6:	c8 01       	movw	r24, r16
     bd8:	0e 94 25 05 	call	0xa4a	; 0xa4a <nRF24L01P_Rx_Basic>
     bdc:	88 23       	and	r24, r24
     bde:	a9 f1       	breq	.+106    	; 0xc4a <nRF24L01P_Rx_With_Ack+0xac>
    if( ((buf[nRF24L01P.SpaceAlloc.Ack] & 1)==1) && ( nRF24L01P_Own_Addr_Get() == buf[nRF24L01P.SpaceAlloc.Dest]) ){ //check ack type
     be0:	80 91 27 01 	lds	r24, 0x0127
     be4:	f8 01       	movw	r30, r16
     be6:	e8 0f       	add	r30, r24
     be8:	f1 1d       	adc	r31, r1
     bea:	80 81       	ld	r24, Z
     bec:	80 ff       	sbrs	r24, 0
     bee:	2d c0       	rjmp	.+90     	; 0xc4a <nRF24L01P_Rx_With_Ack+0xac>
     bf0:	80 91 25 01 	lds	r24, 0x0125
     bf4:	f8 01       	movw	r30, r16
     bf6:	e8 0f       	add	r30, r24
     bf8:	f1 1d       	adc	r31, r1
     bfa:	90 91 11 01 	lds	r25, 0x0111
     bfe:	80 81       	ld	r24, Z
     c00:	98 17       	cp	r25, r24
     c02:	19 f5       	brne	.+70     	; 0xc4a <nRF24L01P_Rx_With_Ack+0xac>
     c04:	8c ed       	ldi	r24, 0xDC	; 220
     c06:	95 e0       	ldi	r25, 0x05	; 5
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <nRF24L01P_Rx_With_Ack+0x6a>
uint8_t nRF24L01P_Own_Addr_Get(void){
  return nRF24L01P.Address.Own;
}

void nRF24L01P_Dest_Addr_Set(uint8_t addr){
  nRF24L01P.Address.Dest=addr;
     c0c:	80 91 26 01 	lds	r24, 0x0126
     c10:	f8 01       	movw	r30, r16
     c12:	e8 0f       	add	r30, r24
     c14:	f1 1d       	adc	r31, r1
     c16:	80 81       	ld	r24, Z
     c18:	80 93 12 01 	sts	0x0112, r24
  uint8_t sts=0, ack_buf[32]="~^~";
  if( nRF24L01P_Rx_Basic(buf) ){
    if( ((buf[nRF24L01P.SpaceAlloc.Ack] & 1)==1) && ( nRF24L01P_Own_Addr_Get() == buf[nRF24L01P.SpaceAlloc.Dest]) ){ //check ack type
      _delay_us(nRF24L01P_RX_ACK_SEND_DELAY);                                                                                               //check delay
	  nRF24L01P_Dest_Addr_Set(buf[nRF24L01P.SpaceAlloc.Own]);
	  nRF24L01P.Packet.TxPID = buf[nRF24L01P.SpaceAlloc.PID];
     c1c:	80 91 28 01 	lds	r24, 0x0128
     c20:	f8 01       	movw	r30, r16
     c22:	e8 0f       	add	r30, r24
     c24:	f1 1d       	adc	r31, r1
     c26:	80 81       	ld	r24, Z
     c28:	80 93 1c 01 	sts	0x011C, r24
	  nRF24L01P.Blocks.Remaining = buf[nRF24L01P.SpaceAlloc.Blocks];
     c2c:	80 91 2a 01 	lds	r24, 0x012A
     c30:	08 0f       	add	r16, r24
     c32:	11 1d       	adc	r17, r1
     c34:	f8 01       	movw	r30, r16
     c36:	80 81       	ld	r24, Z
     c38:	80 93 20 01 	sts	0x0120, r24
      nRF24L01P_Tx_Basic(ack_buf, 3);
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	63 e0       	ldi	r22, 0x03	; 3
     c42:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <nRF24L01P_Tx_Basic>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <nRF24L01P_Rx_With_Ack+0xae>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
      sts=1;
    }
  }
  return sts;
}
     c4c:	a0 96       	adiw	r28, 0x20	; 32
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <nRF24L01P_Init>:

void nRF24L01P_Init(void){
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
  nRF24L01P_Struct_Init();
     c68:	0e 94 0c 01 	call	0x218	; 0x218 <nRF24L01P_Struct_Init>
  nRF24L01P_Enable();
     c6c:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01P_Enable>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     c70:	0f e0       	ldi	r16, 0x0F	; 15
     c72:	11 e0       	ldi	r17, 0x01	; 1
     c74:	10 92 0f 01 	sts	0x010F, r1
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	a8 01       	movw	r20, r16
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x01, 0, nRF24L01P.TempBuf, 1 );
     c84:	10 92 0f 01 	sts	0x010F, r1
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	a8 01       	movw	r20, r16
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x03;  nRF24L01P_ReadWrite_Register( 0x02, 0, nRF24L01P.TempBuf, 1 );
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	80 93 0f 01 	sts	0x010F, r24
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	a8 01       	movw	r20, r16
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x01;  nRF24L01P_ReadWrite_Register( 0x03, 0, nRF24L01P.TempBuf, 1 );
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 0f 01 	sts	0x010F, r24
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	a8 01       	movw	r20, r16
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x04, 0, nRF24L01P.TempBuf, 1 );
     cb8:	10 92 0f 01 	sts	0x010F, r1
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	a8 01       	movw	r20, r16
     cc2:	21 e0       	ldi	r18, 0x01	; 1
     cc4:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x02;  nRF24L01P_ReadWrite_Register( 0x05, 0, nRF24L01P.TempBuf, 1 );
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	80 93 0f 01 	sts	0x010F, r24
     cce:	85 e0       	ldi	r24, 0x05	; 5
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	a8 01       	movw	r20, r16
     cd4:	21 e0       	ldi	r18, 0x01	; 1
     cd6:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x26;  nRF24L01P_ReadWrite_Register( 0x06, 0, nRF24L01P.TempBuf, 1 ); 
     cda:	86 e2       	ldi	r24, 0x26	; 38
     cdc:	80 93 0f 01 	sts	0x010F, r24
     ce0:	86 e0       	ldi	r24, 0x06	; 6
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	a8 01       	movw	r20, r16
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x70;  nRF24L01P_ReadWrite_Register( 0x07, 0, nRF24L01P.TempBuf, 1 );
     cec:	80 e7       	ldi	r24, 0x70	; 112
     cee:	80 93 0f 01 	sts	0x010F, r24
     cf2:	87 e0       	ldi	r24, 0x07	; 7
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	a8 01       	movw	r20, r16
     cf8:	21 e0       	ldi	r18, 0x01	; 1
     cfa:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = nRF24L01P_PACKET_LEN;  
     cfe:	e0 e2       	ldi	r30, 0x20	; 32
     d00:	fe 2e       	mov	r15, r30
     d02:	f0 92 0f 01 	sts	0x010F, r15
  nRF24L01P_ReadWrite_Register( 0x11, 0, nRF24L01P.TempBuf, 1 );
     d06:	81 e1       	ldi	r24, 0x11	; 17
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	a8 01       	movw	r20, r16
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = nRF24L01P_PACKET_LEN;  
     d12:	f0 92 0f 01 	sts	0x010F, r15
  nRF24L01P_ReadWrite_Register( 0x12, 0, nRF24L01P.TempBuf, 1 );
     d16:	82 e1       	ldi	r24, 0x12	; 18
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	a8 01       	movw	r20, r16
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x1C, 0, nRF24L01P.TempBuf, 1 );
     d22:	10 92 0f 01 	sts	0x010F, r1
     d26:	8c e1       	ldi	r24, 0x1C	; 28
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	a8 01       	movw	r20, r16
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x1D, 0, nRF24L01P.TempBuf, 1 );
     d32:	10 92 0f 01 	sts	0x010F, r1
     d36:	8d e1       	ldi	r24, 0x1D	; 29
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	a8 01       	movw	r20, r16
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register( 0x10, 0, (uint8_t*)"ACK00", 5 );
     d42:	00 e0       	ldi	r16, 0x00	; 0
     d44:	11 e0       	ldi	r17, 0x01	; 1
     d46:	80 e1       	ldi	r24, 0x10	; 16
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	a8 01       	movw	r20, r16
     d4c:	25 e0       	ldi	r18, 0x05	; 5
     d4e:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register( 0x0A, 0, (uint8_t*)"ACK00", 5 );
     d52:	8a e0       	ldi	r24, 0x0A	; 10
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	a8 01       	movw	r20, r16
     d58:	25 e0       	ldi	r18, 0x05	; 5
     d5a:	0e 94 56 02 	call	0x4ac	; 0x4ac <nRF24L01P_ReadWrite_Register>
  nRF24L01P_Speed_Set(0);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	0e 94 16 04 	call	0x82c	; 0x82c <nRF24L01P_Speed_Set>
  nRF24L01P_Mode_Set(2);
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	0e 94 ba 03 	call	0x774	; 0x774 <nRF24L01P_Mode_Set>
}
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	08 95       	ret

00000d72 <Vsns_ADC_Reference_Internal>:
#define  VSNS_AVG_SMPL   0x04

uint16_t vsns_cal_val=0;

void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
     d72:	ec e7       	ldi	r30, 0x7C	; 124
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	80 6c       	ori	r24, 0xC0	; 192
     d7a:	80 83       	st	Z, r24
}
     d7c:	08 95       	ret

00000d7e <Vsns_ADC_Reference_Avcc>:

void Vsns_ADC_Reference_Avcc(void){
  ADMUX&=~(1<<REFS1);
     d7e:	ec e7       	ldi	r30, 0x7C	; 124
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8f 77       	andi	r24, 0x7F	; 127
     d86:	80 83       	st	Z, r24
  ADMUX|=(1<<REFS0);
     d88:	80 81       	ld	r24, Z
     d8a:	80 64       	ori	r24, 0x40	; 64
     d8c:	80 83       	st	Z, r24
}
     d8e:	08 95       	ret

00000d90 <Vsns_ADC_Enable>:

void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
     d90:	ea e7       	ldi	r30, 0x7A	; 122
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 68       	ori	r24, 0x80	; 128
     d98:	80 83       	st	Z, r24
}
     d9a:	08 95       	ret

00000d9c <Vsns_ADC_Disable>:

void Vsns_ADC_Disable(void){
  ADCSRA&=~(1<<ADEN);
     d9c:	ea e7       	ldi	r30, 0x7A	; 122
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 77       	andi	r24, 0x7F	; 127
     da4:	80 83       	st	Z, r24
  ACSR|=(1<<ACD);
     da6:	80 b7       	in	r24, 0x30	; 48
     da8:	80 68       	ori	r24, 0x80	; 128
     daa:	80 bf       	out	0x30, r24	; 48
}
     dac:	08 95       	ret

00000dae <Vsns_ADC_Init>:

void Vsns_ADC_Init(void){
  ADCSRA =(1<<ADPS1)|(1<<ADPS2);
     dae:	ea e7       	ldi	r30, 0x7A	; 122
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	86 e0       	ldi	r24, 0x06	; 6
     db4:	80 83       	st	Z, r24
  ADCSRA|=(1<<ADEN);
     db6:	80 81       	ld	r24, Z
     db8:	80 68       	ori	r24, 0x80	; 128
     dba:	80 83       	st	Z, r24
}
     dbc:	08 95       	ret

00000dbe <Vsns_ADC_Read>:

uint16_t Vsns_ADC_Read(uint8_t channel){
  uint8_t admux=(ADMUX & 0xC0);
     dbe:	90 91 7c 00 	lds	r25, 0x007C
     dc2:	90 7c       	andi	r25, 0xC0	; 192
  admux|=channel;
     dc4:	98 2b       	or	r25, r24
  if(ADMUX!=admux){ADMUX=admux;}
     dc6:	80 91 7c 00 	lds	r24, 0x007C
     dca:	89 17       	cp	r24, r25
     dcc:	11 f0       	breq	.+4      	; 0xdd2 <Vsns_ADC_Read+0x14>
     dce:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA|=(1<<ADSC);
     dd2:	80 91 7a 00 	lds	r24, 0x007A
     dd6:	80 64       	ori	r24, 0x40	; 64
     dd8:	80 93 7a 00 	sts	0x007A, r24
  while(!(ADCSRA &(1<<ADIF)));
     ddc:	80 91 7a 00 	lds	r24, 0x007A
     de0:	84 ff       	sbrs	r24, 4
     de2:	fc cf       	rjmp	.-8      	; 0xddc <Vsns_ADC_Read+0x1e>
  ADCSRA|=(1<<ADIF);
     de4:	80 91 7a 00 	lds	r24, 0x007A
     de8:	80 61       	ori	r24, 0x10	; 16
     dea:	80 93 7a 00 	sts	0x007A, r24
  return ADCW;
     dee:	20 91 78 00 	lds	r18, 0x0078
     df2:	30 91 79 00 	lds	r19, 0x0079
}
     df6:	c9 01       	movw	r24, r18
     df8:	08 95       	ret

00000dfa <Vsns_PMOS_Enable>:



void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
     dfa:	41 9a       	sbi	0x08, 1	; 8
}
     dfc:	08 95       	ret

00000dfe <Vsns_PMOS_Disable>:

void Vsns_PMOS_Disable(void){
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
     dfe:	41 98       	cbi	0x08, 1	; 8
}
     e00:	08 95       	ret

00000e02 <Vsns_V_Read>:

uint16_t Vsns_V_Read(void){
     e02:	4f 92       	push	r4
     e04:	5f 92       	push	r5
     e06:	6f 92       	push	r6
     e08:	7f 92       	push	r7
     e0a:	8f 92       	push	r8
     e0c:	9f 92       	push	r9
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	cf 92       	push	r12
     e14:	df 92       	push	r13
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
}



void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
     e1e:	41 9a       	sbi	0x08, 1	; 8
#define  VSNS_AVG_SMPL   0x04

uint16_t vsns_cal_val=0;

void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
     e20:	ec e7       	ldi	r30, 0x7C	; 124
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 6c       	ori	r24, 0xC0	; 192
     e28:	80 83       	st	Z, r24
  ADMUX&=~(1<<REFS1);
  ADMUX|=(1<<REFS0);
}

void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
     e2a:	4a e7       	ldi	r20, 0x7A	; 122
     e2c:	44 2e       	mov	r4, r20
     e2e:	51 2c       	mov	r5, r1
     e30:	f2 01       	movw	r30, r4
     e32:	80 81       	ld	r24, Z
     e34:	80 68       	ori	r24, 0x80	; 128
     e36:	80 83       	st	Z, r24
  Vsns_PMOS_Enable();
  Vsns_ADC_Reference_Internal();
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<VSNS_DUMMY_SMPL;i++){
    Vsns_ADC_Read(0x06);
     e38:	86 e0       	ldi	r24, 0x06	; 6
     e3a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Vsns_ADC_Read>
     e3e:	86 e0       	ldi	r24, 0x06	; 6
     e40:	0e 94 df 06 	call	0xdbe	; 0xdbe <Vsns_ADC_Read>
  }
  for(uint8_t i=0;i<VSNS_AVG_SMPL;i++){
    temp+=Vsns_ADC_Read(0x06);
     e44:	86 e0       	ldi	r24, 0x06	; 6
     e46:	0e 94 df 06 	call	0xdbe	; 0xdbe <Vsns_ADC_Read>
     e4a:	3c 01       	movw	r6, r24
     e4c:	86 e0       	ldi	r24, 0x06	; 6
     e4e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Vsns_ADC_Read>
     e52:	7c 01       	movw	r14, r24
     e54:	86 e0       	ldi	r24, 0x06	; 6
     e56:	0e 94 df 06 	call	0xdbe	; 0xdbe <Vsns_ADC_Read>
     e5a:	5c 01       	movw	r10, r24
     e5c:	cc 24       	eor	r12, r12
     e5e:	dd 24       	eor	r13, r13
     e60:	00 e0       	ldi	r16, 0x00	; 0
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	ae 0c       	add	r10, r14
     e66:	bf 1c       	adc	r11, r15
     e68:	c0 1e       	adc	r12, r16
     e6a:	d1 1e       	adc	r13, r17
     e6c:	88 24       	eor	r8, r8
     e6e:	99 24       	eor	r9, r9
     e70:	a6 0c       	add	r10, r6
     e72:	b7 1c       	adc	r11, r7
     e74:	c8 1c       	adc	r12, r8
     e76:	d9 1c       	adc	r13, r9
     e78:	86 e0       	ldi	r24, 0x06	; 6
     e7a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Vsns_ADC_Read>
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	a8 0e       	add	r10, r24
     e84:	b9 1e       	adc	r11, r25
     e86:	ca 1e       	adc	r12, r26
     e88:	db 1e       	adc	r13, r27
void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
}

void Vsns_ADC_Disable(void){
  ADCSRA&=~(1<<ADEN);
     e8a:	f2 01       	movw	r30, r4
     e8c:	80 81       	ld	r24, Z
     e8e:	8f 77       	andi	r24, 0x7F	; 127
     e90:	80 83       	st	Z, r24
  ACSR|=(1<<ACD);
     e92:	80 b7       	in	r24, 0x30	; 48
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	80 bf       	out	0x30, r24	; 48
void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
}

void Vsns_PMOS_Disable(void){
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
     e98:	41 98       	cbi	0x08, 1	; 8
  for(uint8_t i=0;i<VSNS_AVG_SMPL;i++){
    temp+=Vsns_ADC_Read(0x06);
  }
  Vsns_ADC_Disable();
  Vsns_PMOS_Disable();
  temp/=VSNS_AVG_SMPL;
     e9a:	32 e0       	ldi	r19, 0x02	; 2
     e9c:	d6 94       	lsr	r13
     e9e:	c7 94       	ror	r12
     ea0:	b7 94       	ror	r11
     ea2:	a7 94       	ror	r10
     ea4:	3a 95       	dec	r19
     ea6:	d1 f7       	brne	.-12     	; 0xe9c <Vsns_V_Read+0x9a>
  temp*=16;
     ea8:	60 91 0a 01 	lds	r22, 0x010A
     eac:	70 91 0b 01 	lds	r23, 0x010B
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	24 e0       	ldi	r18, 0x04	; 4
     eb6:	66 0f       	add	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	88 1f       	adc	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	2a 95       	dec	r18
     ec0:	d1 f7       	brne	.-12     	; 0xeb6 <Vsns_V_Read+0xb4>
  temp*=Vsns_Get_Cal_Val();
     ec2:	a6 01       	movw	r20, r12
     ec4:	95 01       	movw	r18, r10
     ec6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__mulsi3>
     eca:	9b 01       	movw	r18, r22
     ecc:	ac 01       	movw	r20, r24
     ece:	8a e0       	ldi	r24, 0x0A	; 10
     ed0:	56 95       	lsr	r21
     ed2:	47 95       	ror	r20
     ed4:	37 95       	ror	r19
     ed6:	27 95       	ror	r18
     ed8:	8a 95       	dec	r24
     eda:	d1 f7       	brne	.-12     	; 0xed0 <Vsns_V_Read+0xce>
  temp/=1024;
  return (uint16_t)temp;
}
     edc:	c9 01       	movw	r24, r18
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	7f 90       	pop	r7
     ef4:	6f 90       	pop	r6
     ef6:	5f 90       	pop	r5
     ef8:	4f 90       	pop	r4
     efa:	08 95       	ret

00000efc <Vsns_Calibrate_Iref>:

uint16_t Vsns_Calibrate_Iref(void){
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
}

void Vsns_ADC_Reference_Avcc(void){
  ADMUX&=~(1<<REFS1);
     f06:	80 91 7c 00 	lds	r24, 0x007C
     f0a:	8f 77       	andi	r24, 0x7F	; 127
     f0c:	80 93 7c 00 	sts	0x007C, r24
  ADMUX|=(1<<REFS0);
     f10:	80 91 7c 00 	lds	r24, 0x007C
     f14:	80 64       	ori	r24, 0x40	; 64
     f16:	80 93 7c 00 	sts	0x007C, r24
}



void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
     f1a:	41 9a       	sbi	0x08, 1	; 8
  ADMUX&=~(1<<REFS1);
  ADMUX|=(1<<REFS0);
}

void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
     f1c:	80 91 7a 00 	lds	r24, 0x007A
     f20:	80 68       	ori	r24, 0x80	; 128
     f22:	80 93 7a 00 	sts	0x007A, r24
     f26:	10 e0       	ldi	r17, 0x00	; 0
  Vsns_ADC_Reference_Avcc();
  Vsns_PMOS_Enable();
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<16;i++){
    Vsns_ADC_Read(0x0E);
     f28:	8e e0       	ldi	r24, 0x0E	; 14
     f2a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Vsns_ADC_Read>
uint16_t Vsns_Calibrate_Iref(void){
  Vsns_ADC_Reference_Avcc();
  Vsns_PMOS_Enable();
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<16;i++){
     f2e:	1f 5f       	subi	r17, 0xFF	; 255
     f30:	10 31       	cpi	r17, 0x10	; 16
     f32:	d1 f7       	brne	.-12     	; 0xf28 <Vsns_Calibrate_Iref+0x2c>
     f34:	ee 24       	eor	r14, r14
     f36:	ff 24       	eor	r15, r15
     f38:	87 01       	movw	r16, r14
     f3a:	dd 24       	eor	r13, r13
    Vsns_ADC_Read(0x0E);
  }
  for(uint8_t i=0;i<32;i++){
    temp+=Vsns_ADC_Read(0x0E);
     f3c:	8e e0       	ldi	r24, 0x0E	; 14
     f3e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Vsns_ADC_Read>
     f42:	a0 e0       	ldi	r26, 0x00	; 0
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 0e       	add	r14, r24
     f48:	f9 1e       	adc	r15, r25
     f4a:	0a 1f       	adc	r16, r26
     f4c:	1b 1f       	adc	r17, r27
  Vsns_ADC_Enable();
  uint32_t temp=0;
  for(uint8_t i=0;i<16;i++){
    Vsns_ADC_Read(0x0E);
  }
  for(uint8_t i=0;i<32;i++){
     f4e:	d3 94       	inc	r13
     f50:	80 e2       	ldi	r24, 0x20	; 32
     f52:	d8 16       	cp	r13, r24
     f54:	99 f7       	brne	.-26     	; 0xf3c <Vsns_Calibrate_Iref+0x40>
void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
}

void Vsns_ADC_Disable(void){
  ADCSRA&=~(1<<ADEN);
     f56:	80 91 7a 00 	lds	r24, 0x007A
     f5a:	8f 77       	andi	r24, 0x7F	; 127
     f5c:	80 93 7a 00 	sts	0x007A, r24
  ACSR|=(1<<ACD);
     f60:	80 b7       	in	r24, 0x30	; 48
     f62:	80 68       	ori	r24, 0x80	; 128
     f64:	80 bf       	out	0x30, r24	; 48
void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
}

void Vsns_PMOS_Disable(void){
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
     f66:	41 98       	cbi	0x08, 1	; 8
  for(uint8_t i=0;i<32;i++){
    temp+=Vsns_ADC_Read(0x0E);
  }
  Vsns_ADC_Disable();
  Vsns_PMOS_Disable();
  temp/=32;
     f68:	75 e0       	ldi	r23, 0x05	; 5
     f6a:	16 95       	lsr	r17
     f6c:	07 95       	ror	r16
     f6e:	f7 94       	ror	r15
     f70:	e7 94       	ror	r14
     f72:	7a 95       	dec	r23
     f74:	d1 f7       	brne	.-12     	; 0xf6a <Vsns_Calibrate_Iref+0x6e>
  temp*=3300;
     f76:	c8 01       	movw	r24, r16
     f78:	b7 01       	movw	r22, r14
     f7a:	24 ee       	ldi	r18, 0xE4	; 228
     f7c:	3c e0       	ldi	r19, 0x0C	; 12
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__mulsi3>
     f86:	9b 01       	movw	r18, r22
     f88:	ac 01       	movw	r20, r24
     f8a:	6a e0       	ldi	r22, 0x0A	; 10
     f8c:	56 95       	lsr	r21
     f8e:	47 95       	ror	r20
     f90:	37 95       	ror	r19
     f92:	27 95       	ror	r18
     f94:	6a 95       	dec	r22
     f96:	d1 f7       	brne	.-12     	; 0xf8c <Vsns_Calibrate_Iref+0x90>
  temp/=1024;
  return (uint16_t)temp;
}
     f98:	c9 01       	movw	r24, r18
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	08 95       	ret

00000fa6 <Vsns_Get_Cal_Val>:
  return vsns_cal_val;
}

uint16_t Vsns_Get_Cal_Val(void){
  return vsns_cal_val;
}
     fa6:	80 91 0a 01 	lds	r24, 0x010A
     faa:	90 91 0b 01 	lds	r25, 0x010B
     fae:	08 95       	ret

00000fb0 <Vsns_Calibrate>:
  temp/=1024;
  return (uint16_t)temp;
}

uint16_t Vsns_Calibrate(void){
  if( EEPROM_Read_Dword(1020) != 0x01020304 ){
     fb0:	8c ef       	ldi	r24, 0xFC	; 252
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <EEPROM_Read_Dword>
     fb8:	64 50       	subi	r22, 0x04	; 4
     fba:	73 40       	sbci	r23, 0x03	; 3
     fbc:	82 40       	sbci	r24, 0x02	; 2
     fbe:	91 40       	sbci	r25, 0x01	; 1
     fc0:	a9 f0       	breq	.+42     	; 0xfec <Vsns_Calibrate+0x3c>
    EEPROM_Erase_Region(1018,1019);
     fc2:	8a ef       	ldi	r24, 0xFA	; 250
     fc4:	93 e0       	ldi	r25, 0x03	; 3
     fc6:	6b ef       	ldi	r22, 0xFB	; 251
     fc8:	73 e0       	ldi	r23, 0x03	; 3
     fca:	0e 94 a1 09 	call	0x1342	; 0x1342 <EEPROM_Erase_Region>
	uint16_t temp = Vsns_Calibrate_Iref();
     fce:	0e 94 7e 07 	call	0xefc	; 0xefc <Vsns_Calibrate_Iref>
     fd2:	bc 01       	movw	r22, r24
	EEPROM_Write_Word(1018, temp);
     fd4:	8a ef       	ldi	r24, 0xFA	; 250
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <EEPROM_Write_Word>
	EEPROM_Write_Dword(1020, 0x01020304);
     fdc:	8c ef       	ldi	r24, 0xFC	; 252
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	44 e0       	ldi	r20, 0x04	; 4
     fe2:	53 e0       	ldi	r21, 0x03	; 3
     fe4:	62 e0       	ldi	r22, 0x02	; 2
     fe6:	71 e0       	ldi	r23, 0x01	; 1
     fe8:	0e 94 85 09 	call	0x130a	; 0x130a <EEPROM_Write_Dword>
  }
  vsns_cal_val=EEPROM_Read_Word(1018);
     fec:	8a ef       	ldi	r24, 0xFA	; 250
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	0e 94 3a 09 	call	0x1274	; 0x1274 <EEPROM_Read_Word>
     ff4:	80 93 0a 01 	sts	0x010A, r24
     ff8:	90 93 0b 01 	sts	0x010B, r25
  return vsns_cal_val;
}
     ffc:	08 95       	ret

00000ffe <Vsns_Init>:
uint16_t Vsns_Get_Cal_Val(void){
  return vsns_cal_val;
}

void Vsns_Init(void){
  VSNS_EN_DDR |= (1<<VSNS_EN_bp);
     ffe:	39 9a       	sbi	0x07, 1	; 7
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
    1000:	41 98       	cbi	0x08, 1	; 8
#define  VSNS_AVG_SMPL   0x04

uint16_t vsns_cal_val=0;

void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
    1002:	ec e7       	ldi	r30, 0x7C	; 124
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	80 6c       	ori	r24, 0xC0	; 192
    100a:	80 83       	st	Z, r24
  ADCSRA&=~(1<<ADEN);
  ACSR|=(1<<ACD);
}

void Vsns_ADC_Init(void){
  ADCSRA =(1<<ADPS1)|(1<<ADPS2);
    100c:	ea e7       	ldi	r30, 0x7A	; 122
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	80 83       	st	Z, r24
  ADCSRA|=(1<<ADEN);
    1014:	80 81       	ld	r24, Z
    1016:	80 68       	ori	r24, 0x80	; 128
    1018:	80 83       	st	Z, r24
void Vsns_Init(void){
  VSNS_EN_DDR |= (1<<VSNS_EN_bp);
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
  Vsns_ADC_Reference_Internal();
  Vsns_ADC_Init();
  Vsns_Calibrate();
    101a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Vsns_Calibrate>
  Vsns_V_Read();
    101e:	0e 94 01 07 	call	0xe02	; 0xe02 <Vsns_V_Read>
    1022:	08 95       	ret

00001024 <dataconv_nibble_to_hex_char>:
#include <avr/io.h>
#include <util/delay.h>

uint8_t dataconv_data_len=0;

uint8_t dataconv_nibble_to_hex_char(uint8_t val){
    1024:	98 2f       	mov	r25, r24
  uint8_t hex=0;
  if(val<=9){
    1026:	8a 30       	cpi	r24, 0x0A	; 10
    1028:	10 f4       	brcc	.+4      	; 0x102e <dataconv_nibble_to_hex_char+0xa>
    hex = val+48;
    102a:	80 5d       	subi	r24, 0xD0	; 208
    102c:	08 95       	ret
  }else if(val>=10 && val<=15){
    102e:	8a 50       	subi	r24, 0x0A	; 10
    1030:	86 30       	cpi	r24, 0x06	; 6
    1032:	10 f0       	brcs	.+4      	; 0x1038 <dataconv_nibble_to_hex_char+0x14>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	08 95       	ret
    hex = val+55;
    1038:	89 2f       	mov	r24, r25
    103a:	89 5c       	subi	r24, 0xC9	; 201
  }
  return hex;
}
    103c:	08 95       	ret

0000103e <dataconv_byte_to_hex_char>:

void dataconv_byte_to_hex_char(uint8_t val, uint8_t *array, uint8_t start){
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	d8 2e       	mov	r13, r24
    104a:	7b 01       	movw	r14, r22
  array[start]= dataconv_nibble_to_hex_char((val & 0xF0)>>4);
    104c:	04 2f       	mov	r16, r20
    104e:	10 e0       	ldi	r17, 0x00	; 0
    1050:	82 95       	swap	r24
    1052:	8f 70       	andi	r24, 0x0F	; 15
    1054:	0e 94 12 08 	call	0x1024	; 0x1024 <dataconv_nibble_to_hex_char>
    1058:	e0 0e       	add	r14, r16
    105a:	f1 1e       	adc	r15, r17
    105c:	f7 01       	movw	r30, r14
    105e:	80 83       	st	Z, r24
  array[start+1]= dataconv_nibble_to_hex_char(val & 0x0F);
    1060:	8d 2d       	mov	r24, r13
    1062:	8f 70       	andi	r24, 0x0F	; 15
    1064:	0e 94 12 08 	call	0x1024	; 0x1024 <dataconv_nibble_to_hex_char>
    1068:	f7 01       	movw	r30, r14
    106a:	81 83       	std	Z+1, r24	; 0x01
}
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	08 95       	ret

00001078 <dataconv_word_to_hex_char>:

void dataconv_word_to_hex_char(uint16_t val, uint8_t *array, uint8_t start){
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	08 2f       	mov	r16, r24
    1082:	7b 01       	movw	r14, r22
    1084:	14 2f       	mov	r17, r20
  uint8_t msb = val >> 8;
  uint8_t lsb = val & 0xFF;
  dataconv_byte_to_hex_char(msb, array, start);
    1086:	89 2f       	mov	r24, r25
    1088:	0e 94 1f 08 	call	0x103e	; 0x103e <dataconv_byte_to_hex_char>
  dataconv_byte_to_hex_char(lsb, array, start+2);
    108c:	1e 5f       	subi	r17, 0xFE	; 254
    108e:	80 2f       	mov	r24, r16
    1090:	b7 01       	movw	r22, r14
    1092:	41 2f       	mov	r20, r17
    1094:	0e 94 1f 08 	call	0x103e	; 0x103e <dataconv_byte_to_hex_char>
}
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	08 95       	ret

000010a2 <dataconv_dword_to_hex_char>:

void dataconv_dword_to_hex_char(uint32_t val, uint8_t *array, uint8_t start){
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	7b 01       	movw	r14, r22
    10b2:	8c 01       	movw	r16, r24
    10b4:	5a 01       	movw	r10, r20
    10b6:	d2 2e       	mov	r13, r18
  uint16_t msword = val >> 16;
  uint16_t lsword = val & 0xFFFF;
  dataconv_word_to_hex_char(msword, array, start);
    10b8:	c8 01       	movw	r24, r16
    10ba:	aa 27       	eor	r26, r26
    10bc:	bb 27       	eor	r27, r27
    10be:	ba 01       	movw	r22, r20
    10c0:	42 2f       	mov	r20, r18
    10c2:	0e 94 3c 08 	call	0x1078	; 0x1078 <dataconv_word_to_hex_char>
  dataconv_word_to_hex_char(lsword, array, start+4);
    10c6:	84 e0       	ldi	r24, 0x04	; 4
    10c8:	d8 0e       	add	r13, r24
    10ca:	c7 01       	movw	r24, r14
    10cc:	b5 01       	movw	r22, r10
    10ce:	4d 2d       	mov	r20, r13
    10d0:	0e 94 3c 08 	call	0x1078	; 0x1078 <dataconv_word_to_hex_char>
}
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	bf 90       	pop	r11
    10e0:	af 90       	pop	r10
    10e2:	08 95       	ret

000010e4 <dataconv_dword_to_char>:

void dataconv_dword_to_char(uint32_t val, uint8_t *array, uint8_t start){
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	fa 01       	movw	r30, r20
  uint16_t msword = (val >> 16);
    10ee:	7c 01       	movw	r14, r24
    10f0:	00 27       	eor	r16, r16
    10f2:	11 27       	eor	r17, r17
  uint16_t lsword = (val & 0xFFFF);
  array[start]    = (msword >> 8);
    10f4:	e2 0f       	add	r30, r18
    10f6:	f1 1d       	adc	r31, r1
    10f8:	f0 82       	st	Z, r15
  array[start+1]  = (msword & 0xFF);
    10fa:	e1 82       	std	Z+1, r14	; 0x01
  array[start+2]  = (lsword >> 8);
    10fc:	72 83       	std	Z+2, r23	; 0x02
  array[start+3]  = (lsword & 0xFF);
    10fe:	63 83       	std	Z+3, r22	; 0x03
}
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	08 95       	ret

0000110a <dataconv_dword_to_num>:

void dataconv_dword_to_num(int32_t val, uint8_t *array, uint8_t start){
    110a:	7f 92       	push	r7
    110c:	8f 92       	push	r8
    110e:	9f 92       	push	r9
    1110:	af 92       	push	r10
    1112:	bf 92       	push	r11
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	2a 97       	sbiw	r28, 0x0a	; 10
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	6b 01       	movw	r12, r22
    1136:	7c 01       	movw	r14, r24
    1138:	5a 01       	movw	r10, r20
    113a:	72 2e       	mov	r7, r18
  uint8_t i=0, digits[8], total_digits=0, array_index=0;;

  if(val<0){
    113c:	97 ff       	sbrs	r25, 7
    113e:	0f c0       	rjmp	.+30     	; 0x115e <dataconv_dword_to_num+0x54>
    val=-val;
    1140:	f0 94       	com	r15
    1142:	e0 94       	com	r14
    1144:	d0 94       	com	r13
    1146:	c0 94       	com	r12
    1148:	c1 1c       	adc	r12, r1
    114a:	d1 1c       	adc	r13, r1
    114c:	e1 1c       	adc	r14, r1
    114e:	f1 1c       	adc	r15, r1
	array[start]='-';
    1150:	fa 01       	movw	r30, r20
    1152:	e2 0f       	add	r30, r18
    1154:	f1 1d       	adc	r31, r1
    1156:	8d e2       	ldi	r24, 0x2D	; 45
    1158:	80 83       	st	Z, r24
    115a:	11 e0       	ldi	r17, 0x01	; 1
    115c:	06 c0       	rjmp	.+12     	; 0x116a <dataconv_dword_to_num+0x60>
	array_index++;
  }
  
  if(val==0){
    115e:	61 15       	cp	r22, r1
    1160:	71 05       	cpc	r23, r1
    1162:	81 05       	cpc	r24, r1
    1164:	91 05       	cpc	r25, r1
    1166:	39 f0       	breq	.+14     	; 0x1176 <dataconv_dword_to_num+0x6c>
    1168:	10 e0       	ldi	r17, 0x00	; 0
    116a:	00 e0       	ldi	r16, 0x00	; 0
    digits[0]=0;
    total_digits=1;
  }else{
    while(val!=0){
      digits[i]=val%10;
    116c:	4e 01       	movw	r8, r28
    116e:	08 94       	sec
    1170:	81 1c       	adc	r8, r1
    1172:	91 1c       	adc	r9, r1
    1174:	04 c0       	rjmp	.+8      	; 0x117e <dataconv_dword_to_num+0x74>
	array[start]='-';
	array_index++;
  }
  
  if(val==0){
    digits[0]=0;
    1176:	19 82       	std	Y+1, r1	; 0x01
    1178:	31 e0       	ldi	r19, 0x01	; 1
    117a:	10 e0       	ldi	r17, 0x00	; 0
    117c:	23 c0       	rjmp	.+70     	; 0x11c4 <dataconv_dword_to_num+0xba>
    total_digits=1;
  }else{
    while(val!=0){
      digits[i]=val%10;
    117e:	c4 01       	movw	r24, r8
    1180:	80 0f       	add	r24, r16
    1182:	91 1d       	adc	r25, r1
    1184:	9a 87       	std	Y+10, r25	; 0x0a
    1186:	89 87       	std	Y+9, r24	; 0x09
    1188:	c7 01       	movw	r24, r14
    118a:	b6 01       	movw	r22, r12
    118c:	2a e0       	ldi	r18, 0x0A	; 10
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__divmodsi4>
    1198:	e9 85       	ldd	r30, Y+9	; 0x09
    119a:	fa 85       	ldd	r31, Y+10	; 0x0a
    119c:	60 83       	st	Z, r22
      val/=10;
    119e:	c7 01       	movw	r24, r14
    11a0:	b6 01       	movw	r22, r12
    11a2:	2a e0       	ldi	r18, 0x0A	; 10
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__divmodsi4>
    11ae:	c9 01       	movw	r24, r18
    11b0:	da 01       	movw	r26, r20
    11b2:	6c 01       	movw	r12, r24
    11b4:	7d 01       	movw	r14, r26
      i++;
    11b6:	0f 5f       	subi	r16, 0xFF	; 255
  
  if(val==0){
    digits[0]=0;
    total_digits=1;
  }else{
    while(val!=0){
    11b8:	c1 14       	cp	r12, r1
    11ba:	d1 04       	cpc	r13, r1
    11bc:	e1 04       	cpc	r14, r1
    11be:	f1 04       	cpc	r15, r1
    11c0:	f1 f6       	brne	.-68     	; 0x117e <dataconv_dword_to_num+0x74>
    11c2:	30 2f       	mov	r19, r16
    11c4:	43 2f       	mov	r20, r19
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	91 2f       	mov	r25, r17
  
  
  for(int k=total_digits; k>0; k--){
    uint8_t temp=k;
    temp-=1;
    temp=digits[temp];
    11ca:	de 01       	movw	r26, r28
    11cc:	11 96       	adiw	r26, 0x01	; 1
    temp+=48;
	array[start+array_index]=temp;
    11ce:	67 2d       	mov	r22, r7
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	0c c0       	rjmp	.+24     	; 0x11ec <dataconv_dword_to_num+0xe2>
  
  
  for(int k=total_digits; k>0; k--){
    uint8_t temp=k;
    temp-=1;
    temp=digits[temp];
    11d4:	fd 01       	movw	r30, r26
    11d6:	e4 0f       	add	r30, r20
    11d8:	f1 1d       	adc	r31, r1
    11da:	80 81       	ld	r24, Z
    temp+=48;
	array[start+array_index]=temp;
    11dc:	f5 01       	movw	r30, r10
    11de:	e9 0f       	add	r30, r25
    11e0:	f1 1d       	adc	r31, r1
    11e2:	e6 0f       	add	r30, r22
    11e4:	f7 1f       	adc	r31, r23
    11e6:	80 5d       	subi	r24, 0xD0	; 208
    11e8:	80 83       	st	Z, r24
	array_index++;
    11ea:	9f 5f       	subi	r25, 0xFF	; 255
    11ec:	41 50       	subi	r20, 0x01	; 1
    11ee:	50 40       	sbci	r21, 0x00	; 0
    }
	total_digits=i;
  }
  
  
  for(int k=total_digits; k>0; k--){
    11f0:	ff ef       	ldi	r31, 0xFF	; 255
    11f2:	4f 3f       	cpi	r20, 0xFF	; 255
    11f4:	5f 07       	cpc	r21, r31
    11f6:	71 f7       	brne	.-36     	; 0x11d4 <dataconv_dword_to_num+0xca>
    temp=digits[temp];
    temp+=48;
	array[start+array_index]=temp;
	array_index++;
  }
  dataconv_data_len=array_index;
    11f8:	13 0f       	add	r17, r19
    11fa:	10 93 0c 01 	sts	0x010C, r17
}
    11fe:	2a 96       	adiw	r28, 0x0a	; 10
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	df 90       	pop	r13
    1218:	cf 90       	pop	r12
    121a:	bf 90       	pop	r11
    121c:	af 90       	pop	r10
    121e:	9f 90       	pop	r9
    1220:	8f 90       	pop	r8
    1222:	7f 90       	pop	r7
    1224:	08 95       	ret

00001226 <dataconv_dword_to_num_len>:

uint8_t dataconv_dword_to_num_len(void){
  return dataconv_data_len;
}
    1226:	80 91 0c 01 	lds	r24, 0x010C
    122a:	08 95       	ret

0000122c <EEPROM_Read>:

#include <avr/io.h>
#include <avr/interrupt.h>

uint8_t EEPROM_Read(uint16_t addr){
  cli();
    122c:	f8 94       	cli
  EEAR=addr;
    122e:	92 bd       	out	0x22, r25	; 34
    1230:	81 bd       	out	0x21, r24	; 33
  EECR|=(1<<EERE);
    1232:	f8 9a       	sbi	0x1f, 0	; 31
  while(EECR & (1<<EEPE));
    1234:	f9 99       	sbic	0x1f, 1	; 31
    1236:	fe cf       	rjmp	.-4      	; 0x1234 <EEPROM_Read+0x8>
  sei();
    1238:	78 94       	sei
  return EEDR;
    123a:	80 b5       	in	r24, 0x20	; 32
}
    123c:	08 95       	ret

0000123e <EEPROM_Write>:

void EEPROM_Write(uint16_t addr, uint8_t data){
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	ec 01       	movw	r28, r24
    1246:	16 2f       	mov	r17, r22
  if(EEPROM_Read(addr)!=data){
    1248:	0e 94 16 09 	call	0x122c	; 0x122c <EEPROM_Read>
    124c:	81 17       	cp	r24, r17
    124e:	51 f0       	breq	.+20     	; 0x1264 <EEPROM_Write+0x26>
    cli();
    1250:	f8 94       	cli
    EEAR=addr;
    1252:	d2 bd       	out	0x22, r29	; 34
    1254:	c1 bd       	out	0x21, r28	; 33
    EEDR=data;
    1256:	10 bd       	out	0x20, r17	; 32
    EECR=(1<<EEMPE);
    1258:	84 e0       	ldi	r24, 0x04	; 4
    125a:	8f bb       	out	0x1f, r24	; 31
    EECR|=(1<<EEPE);
    125c:	f9 9a       	sbi	0x1f, 1	; 31
    while(EECR & (1<<EEPE));
    125e:	f9 99       	sbic	0x1f, 1	; 31
    1260:	fe cf       	rjmp	.-4      	; 0x125e <EEPROM_Write+0x20>
    sei();
    1262:	78 94       	sei
  }
}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	08 95       	ret

0000126c <EEPROM_Erase>:

void EEPROM_Erase(uint16_t addr){
  EEPROM_Write(addr, 0xFF);
    126c:	6f ef       	ldi	r22, 0xFF	; 255
    126e:	0e 94 1f 09 	call	0x123e	; 0x123e <EEPROM_Write>
}
    1272:	08 95       	ret

00001274 <EEPROM_Read_Word>:


uint16_t EEPROM_Read_Word(uint16_t addr){
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	7c 01       	movw	r14, r24
  uint16_t temp=EEPROM_Read(addr);
    127e:	0e 94 16 09 	call	0x122c	; 0x122c <EEPROM_Read>
  temp<<=8;
    1282:	18 2f       	mov	r17, r24
    1284:	00 e0       	ldi	r16, 0x00	; 0
  temp|=EEPROM_Read(addr+1);
    1286:	c7 01       	movw	r24, r14
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	0e 94 16 09 	call	0x122c	; 0x122c <EEPROM_Read>
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	20 2b       	or	r18, r16
    1294:	31 2b       	or	r19, r17
  return temp;
}
    1296:	c9 01       	movw	r24, r18
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	08 95       	ret

000012a2 <EEPROM_Write_Word>:

void EEPROM_Write_Word(uint16_t addr, uint16_t data){
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	8c 01       	movw	r16, r24
    12aa:	f6 2e       	mov	r15, r22
    12ac:	67 2f       	mov	r22, r23
  EEPROM_Write( addr, (data>>8) & 0xFF );
    12ae:	0e 94 1f 09 	call	0x123e	; 0x123e <EEPROM_Write>
  EEPROM_Write( addr+1, data & 0xFF );
    12b2:	c8 01       	movw	r24, r16
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	6f 2d       	mov	r22, r15
    12b8:	0e 94 1f 09 	call	0x123e	; 0x123e <EEPROM_Write>
}
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	08 95       	ret

000012c4 <EEPROM_Read_Dword>:

uint32_t EEPROM_Read_Dword(uint16_t addr){
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	6c 01       	movw	r12, r24
  uint32_t temp=EEPROM_Read_Word( addr );
    12d2:	0e 94 3a 09 	call	0x1274	; 0x1274 <EEPROM_Read_Word>
    12d6:	7c 01       	movw	r14, r24
    12d8:	00 e0       	ldi	r16, 0x00	; 0
    12da:	10 e0       	ldi	r17, 0x00	; 0
  temp<<=16;
    12dc:	87 01       	movw	r16, r14
    12de:	ff 24       	eor	r15, r15
    12e0:	ee 24       	eor	r14, r14
  temp|=EEPROM_Read_Word( addr+2 );
    12e2:	c6 01       	movw	r24, r12
    12e4:	02 96       	adiw	r24, 0x02	; 2
    12e6:	0e 94 3a 09 	call	0x1274	; 0x1274 <EEPROM_Read_Word>
    12ea:	9c 01       	movw	r18, r24
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	2e 29       	or	r18, r14
    12f2:	3f 29       	or	r19, r15
    12f4:	40 2b       	or	r20, r16
    12f6:	51 2b       	or	r21, r17
  return temp;
}
    12f8:	b9 01       	movw	r22, r18
    12fa:	ca 01       	movw	r24, r20
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	08 95       	ret

0000130a <EEPROM_Write_Dword>:

void EEPROM_Write_Dword(uint16_t addr, uint32_t data){
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	6c 01       	movw	r12, r24
    1318:	7a 01       	movw	r14, r20
    131a:	8b 01       	movw	r16, r22
  EEPROM_Write_Word( addr, (data>>16) & 0xFFFF);
    131c:	9b 01       	movw	r18, r22
    131e:	44 27       	eor	r20, r20
    1320:	55 27       	eor	r21, r21
    1322:	c6 01       	movw	r24, r12
    1324:	b9 01       	movw	r22, r18
    1326:	0e 94 51 09 	call	0x12a2	; 0x12a2 <EEPROM_Write_Word>
  EEPROM_Write_Word( addr+2, (data & 0xFFFF));
    132a:	c6 01       	movw	r24, r12
    132c:	02 96       	adiw	r24, 0x02	; 2
    132e:	b7 01       	movw	r22, r14
    1330:	0e 94 51 09 	call	0x12a2	; 0x12a2 <EEPROM_Write_Word>
}
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	08 95       	ret

00001342 <EEPROM_Erase_Region>:

void EEPROM_Erase_Region(uint16_t start_addr, uint16_t stop_addr){
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	8b 01       	movw	r16, r22
    134c:	ec 01       	movw	r28, r24
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <EEPROM_Erase_Region+0x16>
  for(uint16_t i=start_addr;i<=stop_addr;i++){
	EEPROM_Erase( i );
    1350:	ce 01       	movw	r24, r28
    1352:	0e 94 36 09 	call	0x126c	; 0x126c <EEPROM_Erase>
  EEPROM_Write_Word( addr, (data>>16) & 0xFFFF);
  EEPROM_Write_Word( addr+2, (data & 0xFFFF));
}

void EEPROM_Erase_Region(uint16_t start_addr, uint16_t stop_addr){
  for(uint16_t i=start_addr;i<=stop_addr;i++){
    1356:	21 96       	adiw	r28, 0x01	; 1
    1358:	0c 17       	cp	r16, r28
    135a:	1d 07       	cpc	r17, r29
    135c:	c8 f7       	brcc	.-14     	; 0x1350 <EEPROM_Erase_Region+0xe>
	EEPROM_Erase( i );
  }
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	08 95       	ret

00001368 <EEPROM_Clear_Data_Space>:

void EEPROM_Clear_Data_Space(void){
  if( EEPROM_Read_Dword(1020) != 0x01020304 ){
    1368:	8c ef       	ldi	r24, 0xFC	; 252
    136a:	93 e0       	ldi	r25, 0x03	; 3
    136c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <EEPROM_Read_Dword>
    1370:	64 50       	subi	r22, 0x04	; 4
    1372:	73 40       	sbci	r23, 0x03	; 3
    1374:	82 40       	sbci	r24, 0x02	; 2
    1376:	91 40       	sbci	r25, 0x01	; 1
    1378:	71 f0       	breq	.+28     	; 0x1396 <EEPROM_Clear_Data_Space+0x2e>
    EEPROM_Erase_Region(1018,1019);
    137a:	8a ef       	ldi	r24, 0xFA	; 250
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	6b ef       	ldi	r22, 0xFB	; 251
    1380:	73 e0       	ldi	r23, 0x03	; 3
    1382:	0e 94 a1 09 	call	0x1342	; 0x1342 <EEPROM_Erase_Region>
	EEPROM_Write_Dword(1020, 0x01020304);
    1386:	8c ef       	ldi	r24, 0xFC	; 252
    1388:	93 e0       	ldi	r25, 0x03	; 3
    138a:	44 e0       	ldi	r20, 0x04	; 4
    138c:	53 e0       	ldi	r21, 0x03	; 3
    138e:	62 e0       	ldi	r22, 0x02	; 2
    1390:	71 e0       	ldi	r23, 0x01	; 1
    1392:	0e 94 85 09 	call	0x130a	; 0x130a <EEPROM_Write_Dword>
    1396:	08 95       	ret

00001398 <EEPROM_Init>:
  }
}

void EEPROM_Init(void){
  EEPROM_Clear_Data_Space();
    1398:	0e 94 b4 09 	call	0x1368	; 0x1368 <EEPROM_Clear_Data_Space>
}
    139c:	08 95       	ret

0000139e <led_init>:
#define  LED_bp   0x04



void led_init(void){
  LED_DDR|=(1<<LED_bp);
    139e:	54 9a       	sbi	0x0a, 4	; 10
  LED_PORT&=~(1<<LED_bp);
    13a0:	5c 98       	cbi	0x0b, 4	; 11
}
    13a2:	08 95       	ret

000013a4 <led_on>:

void led_on(void){
  LED_PORT|=(1<<LED_bp);
    13a4:	5c 9a       	sbi	0x0b, 4	; 11
}
    13a6:	08 95       	ret

000013a8 <led_off>:

void led_off(void){
  LED_PORT&=~(1<<LED_bp);
    13a8:	5c 98       	cbi	0x0b, 4	; 11
    13aa:	08 95       	ret

000013ac <__mulsi3>:
    13ac:	62 9f       	mul	r22, r18
    13ae:	d0 01       	movw	r26, r0
    13b0:	73 9f       	mul	r23, r19
    13b2:	f0 01       	movw	r30, r0
    13b4:	82 9f       	mul	r24, r18
    13b6:	e0 0d       	add	r30, r0
    13b8:	f1 1d       	adc	r31, r1
    13ba:	64 9f       	mul	r22, r20
    13bc:	e0 0d       	add	r30, r0
    13be:	f1 1d       	adc	r31, r1
    13c0:	92 9f       	mul	r25, r18
    13c2:	f0 0d       	add	r31, r0
    13c4:	83 9f       	mul	r24, r19
    13c6:	f0 0d       	add	r31, r0
    13c8:	74 9f       	mul	r23, r20
    13ca:	f0 0d       	add	r31, r0
    13cc:	65 9f       	mul	r22, r21
    13ce:	f0 0d       	add	r31, r0
    13d0:	99 27       	eor	r25, r25
    13d2:	72 9f       	mul	r23, r18
    13d4:	b0 0d       	add	r27, r0
    13d6:	e1 1d       	adc	r30, r1
    13d8:	f9 1f       	adc	r31, r25
    13da:	63 9f       	mul	r22, r19
    13dc:	b0 0d       	add	r27, r0
    13de:	e1 1d       	adc	r30, r1
    13e0:	f9 1f       	adc	r31, r25
    13e2:	bd 01       	movw	r22, r26
    13e4:	cf 01       	movw	r24, r30
    13e6:	11 24       	eor	r1, r1
    13e8:	08 95       	ret

000013ea <__divmodsi4>:
    13ea:	97 fb       	bst	r25, 7
    13ec:	09 2e       	mov	r0, r25
    13ee:	05 26       	eor	r0, r21
    13f0:	0e d0       	rcall	.+28     	; 0x140e <__divmodsi4_neg1>
    13f2:	57 fd       	sbrc	r21, 7
    13f4:	04 d0       	rcall	.+8      	; 0x13fe <__divmodsi4_neg2>
    13f6:	14 d0       	rcall	.+40     	; 0x1420 <__udivmodsi4>
    13f8:	0a d0       	rcall	.+20     	; 0x140e <__divmodsi4_neg1>
    13fa:	00 1c       	adc	r0, r0
    13fc:	38 f4       	brcc	.+14     	; 0x140c <__divmodsi4_exit>

000013fe <__divmodsi4_neg2>:
    13fe:	50 95       	com	r21
    1400:	40 95       	com	r20
    1402:	30 95       	com	r19
    1404:	21 95       	neg	r18
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	4f 4f       	sbci	r20, 0xFF	; 255
    140a:	5f 4f       	sbci	r21, 0xFF	; 255

0000140c <__divmodsi4_exit>:
    140c:	08 95       	ret

0000140e <__divmodsi4_neg1>:
    140e:	f6 f7       	brtc	.-4      	; 0x140c <__divmodsi4_exit>
    1410:	90 95       	com	r25
    1412:	80 95       	com	r24
    1414:	70 95       	com	r23
    1416:	61 95       	neg	r22
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	8f 4f       	sbci	r24, 0xFF	; 255
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	08 95       	ret

00001420 <__udivmodsi4>:
    1420:	a1 e2       	ldi	r26, 0x21	; 33
    1422:	1a 2e       	mov	r1, r26
    1424:	aa 1b       	sub	r26, r26
    1426:	bb 1b       	sub	r27, r27
    1428:	fd 01       	movw	r30, r26
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <__udivmodsi4_ep>

0000142c <__udivmodsi4_loop>:
    142c:	aa 1f       	adc	r26, r26
    142e:	bb 1f       	adc	r27, r27
    1430:	ee 1f       	adc	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	a2 17       	cp	r26, r18
    1436:	b3 07       	cpc	r27, r19
    1438:	e4 07       	cpc	r30, r20
    143a:	f5 07       	cpc	r31, r21
    143c:	20 f0       	brcs	.+8      	; 0x1446 <__udivmodsi4_ep>
    143e:	a2 1b       	sub	r26, r18
    1440:	b3 0b       	sbc	r27, r19
    1442:	e4 0b       	sbc	r30, r20
    1444:	f5 0b       	sbc	r31, r21

00001446 <__udivmodsi4_ep>:
    1446:	66 1f       	adc	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	1a 94       	dec	r1
    1450:	69 f7       	brne	.-38     	; 0x142c <__udivmodsi4_loop>
    1452:	60 95       	com	r22
    1454:	70 95       	com	r23
    1456:	80 95       	com	r24
    1458:	90 95       	com	r25
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	bd 01       	movw	r22, r26
    1460:	cf 01       	movw	r24, r30
    1462:	08 95       	ret

00001464 <_exit>:
    1464:	f8 94       	cli

00001466 <__stop_program>:
    1466:	ff cf       	rjmp	.-2      	; 0x1466 <__stop_program>
