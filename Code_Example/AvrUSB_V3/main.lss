
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800144  00800144  00000dba  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000734  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012c7  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000585  00000000  00000000  00002835  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000105e  00000000  00000000  00002dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000450  00000000  00000000  00003e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e4  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000060e  00000000  00000000  00004a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

uint32_t last_val=0;
uint8_t  state=0;


int main(void){
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	a0 97       	sbiw	r28, 0x20	; 32
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61

  DDRD  |= (1<<4);
  c4:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  c6:	5c 98       	cbi	0x0b, 4	; 11
  
  DDRD&=~((1<<3)|(1<<2));
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	83 7f       	andi	r24, 0xF3	; 243
  cc:	8a b9       	out	0x0a, r24	; 10
  PORTD|=(1<<3)|(1<<2);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	8b b9       	out	0x0b, r24	; 11
  
  nRF24L01P_Init();
  d4:	0e 94 40 04 	call	0x880	; 0x880 <nRF24L01P_Init>
  Sleep_Init();
  d8:	0e 94 b5 00 	call	0x16a	; 0x16a <Sleep_Init>
  
  
  while(1){
      
	    uint8_t buf[32]="Bello world\r\n";
  dc:	8e 01       	movw	r16, r28
  de:	0f 5f       	subi	r16, 0xFF	; 255
  e0:	1f 4f       	sbci	r17, 0xFF	; 255
  e2:	92 e1       	ldi	r25, 0x12	; 18
  e4:	d9 2e       	mov	r13, r25
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	e8 2e       	mov	r14, r24
  ea:	f1 2c       	mov	r15, r1
  ec:	ec 0e       	add	r14, r28
  ee:	fd 1e       	adc	r15, r29
  f0:	d8 01       	movw	r26, r16
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	8e e0       	ldi	r24, 0x0E	; 14
  f8:	01 90       	ld	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x52>
 100:	f7 01       	movw	r30, r14
 102:	8d 2d       	mov	r24, r13
 104:	11 92       	st	Z+, r1
 106:	8a 95       	dec	r24
 108:	e9 f7       	brne	.-6      	; 0x104 <main+0x5e>
	    PORTD |=(1<<4);
 10a:	5c 9a       	sbi	0x0b, 4	; 11
	    nRF24L01P_WakeUp();
 10c:	0e 94 34 04 	call	0x868	; 0x868 <nRF24L01P_WakeUp>
	    nRF24L01P_Transmit_Basic(buf,13);
 110:	c8 01       	movw	r24, r16
 112:	6d e0       	ldi	r22, 0x0D	; 13
 114:	0e 94 1a 05 	call	0xa34	; 0xa34 <nRF24L01P_Transmit_Basic>
	    nRF24L01P_Deep_Sleep();
 118:	0e 94 28 04 	call	0x850	; 0x850 <nRF24L01P_Deep_Sleep>
	    PORTD &=~(1<<4);
 11c:	5c 98       	cbi	0x0b, 4	; 11
	    Deep_Sleep();
 11e:	0e 94 92 00 	call	0x124	; 0x124 <Deep_Sleep>
 122:	e6 cf       	rjmp	.-52     	; 0xf0 <main+0x4a>

00000124 <Deep_Sleep>:
#include <avr/sleep.h>

volatile uint32_t WDT_Ticks=0;

void Deep_Sleep(void){
  sleep_enable();
 124:	83 b7       	in	r24, 0x33	; 51
 126:	81 60       	ori	r24, 0x01	; 1
 128:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
 12a:	85 b7       	in	r24, 0x35	; 53
 12c:	80 66       	ori	r24, 0x60	; 96
 12e:	85 bf       	out	0x35, r24	; 53
 130:	8f 7d       	andi	r24, 0xDF	; 223
 132:	85 bf       	out	0x35, r24	; 53
  sei();
 134:	78 94       	sei
  sleep_cpu();
 136:	88 95       	sleep
  sleep_disable();
 138:	83 b7       	in	r24, 0x33	; 51
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	83 bf       	out	0x33, r24	; 51
}
 13e:	08 95       	ret

00000140 <ADC_Disable>:

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
 140:	ea e7       	ldi	r30, 0x7A	; 122
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	8f 77       	andi	r24, 0x7F	; 127
 148:	80 83       	st	Z, r24
}
 14a:	08 95       	ret

0000014c <Analog_Comparator_Disable>:

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
 14c:	80 b7       	in	r24, 0x30	; 48
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	80 bf       	out	0x30, r24	; 48
}
 152:	08 95       	ret

00000154 <WDT_Get_Ticks>:

uint32_t WDT_Get_Ticks(void){
  return WDT_Ticks;
 154:	20 91 49 01 	lds	r18, 0x0149
 158:	30 91 4a 01 	lds	r19, 0x014A
 15c:	40 91 4b 01 	lds	r20, 0x014B
 160:	50 91 4c 01 	lds	r21, 0x014C
}
 164:	b9 01       	movw	r22, r18
 166:	ca 01       	movw	r24, r20
 168:	08 95       	ret

0000016a <Sleep_Init>:


void Sleep_Init(void){
  cli();
 16a:	f8 94       	cli
  WDTCSR=(1<<WDCE)|(1<<WDE);
 16c:	e0 e6       	ldi	r30, 0x60	; 96
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	88 e1       	ldi	r24, 0x18	; 24
 172:	80 83       	st	Z, r24
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
 174:	86 e4       	ldi	r24, 0x46	; 70
 176:	80 83       	st	Z, r24
  sei();
 178:	78 94       	sei
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 17a:	83 b7       	in	r24, 0x33	; 51
 17c:	81 7f       	andi	r24, 0xF1	; 241
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	83 bf       	out	0x33, r24	; 51
  sleep_cpu();
  sleep_disable();
}

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8f 77       	andi	r24, 0x7F	; 127
 18a:	80 83       	st	Z, r24
}

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
 18c:	80 b7       	in	r24, 0x30	; 48
 18e:	8f 77       	andi	r24, 0x7F	; 127
 190:	80 bf       	out	0x30, r24	; 48
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
  sei();
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ADC_Disable();
  Analog_Comparator_Disable();
}
 192:	08 95       	ret

00000194 <__vector_6>:

ISR(WDT_vect){
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
  WDTCSR|=(1<<WDIE);
 1aa:	e0 e6       	ldi	r30, 0x60	; 96
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24
  WDT_Ticks++;
 1b4:	80 91 49 01 	lds	r24, 0x0149
 1b8:	90 91 4a 01 	lds	r25, 0x014A
 1bc:	a0 91 4b 01 	lds	r26, 0x014B
 1c0:	b0 91 4c 01 	lds	r27, 0x014C
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	a1 1d       	adc	r26, r1
 1c8:	b1 1d       	adc	r27, r1
 1ca:	80 93 49 01 	sts	0x0149, r24
 1ce:	90 93 4a 01 	sts	0x014A, r25
 1d2:	a0 93 4b 01 	sts	0x014B, r26
 1d6:	b0 93 4c 01 	sts	0x014C, r27
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <nRF24L01P_Struct_Init>:

nrf24l01p_t nRF24L01P_type;
nrf24l01p_t *nRF24L01P;

void nRF24L01P_Struct_Init(void){
  nRF24L01P=&nRF24L01P_type;
 1f0:	8d e4       	ldi	r24, 0x4D	; 77
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	90 93 61 01 	sts	0x0161, r25
 1f8:	80 93 60 01 	sts	0x0160, r24
  nRF24L01P->Mode=0x00;
 1fc:	10 92 4d 01 	sts	0x014D, r1
  nRF24L01P->TempBuf[0]=0x00;
 200:	10 92 4e 01 	sts	0x014E, r1
  nRF24L01P->TempBuf[1]=0x00;
 204:	10 92 4f 01 	sts	0x014F, r1
  nRF24L01P->Address.Own=0x00;
 208:	10 92 50 01 	sts	0x0150, r1
  nRF24L01P->Address.Dest=0x01;
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	20 93 51 01 	sts	0x0151, r18
  nRF24L01P->Config.RxTimeout=10;
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	90 93 53 01 	sts	0x0153, r25
 21a:	80 93 52 01 	sts	0x0152, r24
  nRF24L01P->Config.RxTicks=0;
 21e:	10 92 55 01 	sts	0x0155, r1
 222:	10 92 54 01 	sts	0x0154, r1
  nRF24L01P->Config.MaxDataLength=0;
 226:	10 92 56 01 	sts	0x0156, r1
  nRF24L01P->Config.MaxRetry=0;
 22a:	10 92 58 01 	sts	0x0158, r1
 22e:	10 92 57 01 	sts	0x0157, r1
  nRF24L01P->Config.RetryOccured=0;
 232:	10 92 5a 01 	sts	0x015A, r1
 236:	10 92 59 01 	sts	0x0159, r1
  nRF24L01P->Packet.PID=0;
 23a:	10 92 5b 01 	sts	0x015B, r1
  nRF24L01P->Packet.ACKReq=1;
 23e:	20 93 5c 01 	sts	0x015C, r18
  nRF24L01P->ErrorTicks=0;
 242:	10 92 5e 01 	sts	0x015E, r1
 246:	10 92 5d 01 	sts	0x015D, r1
  nRF24L01P->Error=0;
 24a:	10 92 5f 01 	sts	0x015F, r1
}
 24e:	08 95       	ret

00000250 <nRF24L01P_CSN_High>:

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 250:	2a 9a       	sbi	0x05, 2	; 5
}
 252:	08 95       	ret

00000254 <nRF24L01P_CSN_Low>:

void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
 254:	2a 98       	cbi	0x05, 2	; 5
}
 256:	08 95       	ret

00000258 <nRF24L01P_CE_High>:

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 258:	40 9a       	sbi	0x08, 0	; 8
}
 25a:	08 95       	ret

0000025c <nRF24L01P_CE_Low>:

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 25c:	40 98       	cbi	0x08, 0	; 8
}
 25e:	08 95       	ret

00000260 <nRF24L01P_Enable_GPIO>:

void nRF24L01P_Enable_GPIO(void){
  DDRB |= (1<<5)|(1<<3)|(1<<2);
 260:	84 b1       	in	r24, 0x04	; 4
 262:	8c 62       	ori	r24, 0x2C	; 44
 264:	84 b9       	out	0x04, r24	; 4
  DDRB &=~(1<<4);
 266:	24 98       	cbi	0x04, 4	; 4
  nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
 268:	22 9a       	sbi	0x04, 2	; 4
  nRF24L01P_CE_DDR  |= (1<<nRF24L01P_CE_bp) ;
 26a:	38 9a       	sbi	0x07, 0	; 7
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 26c:	2a 9a       	sbi	0x05, 2	; 5
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 26e:	40 98       	cbi	0x08, 0	; 8
  DDRB &=~(1<<4);
  nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
  nRF24L01P_CE_DDR  |= (1<<nRF24L01P_CE_bp) ;
  nRF24L01P_CSN_High();
  nRF24L01P_CE_Low()  ;
}
 270:	08 95       	ret

00000272 <nRF24L01P_Disable_GPIO>:

void nRF24L01P_Disable_GPIO(void){
  DDRB |= (1<<4);                              
 272:	24 9a       	sbi	0x04, 4	; 4
  PORTB&=~((1<<5)|(1<<4)|(1<<3)|(1<<2));
 274:	85 b1       	in	r24, 0x05	; 5
 276:	83 7c       	andi	r24, 0xC3	; 195
 278:	85 b9       	out	0x05, r24	; 5
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 27a:	2a 9a       	sbi	0x05, 2	; 5
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 27c:	40 98       	cbi	0x08, 0	; 8
void nRF24L01P_Disable_GPIO(void){
  DDRB |= (1<<4);                              
  PORTB&=~((1<<5)|(1<<4)|(1<<3)|(1<<2));
  nRF24L01P_CSN_High(); 
  nRF24L01P_CE_Low() ;  
}
 27e:	08 95       	ret

00000280 <nRF24L01P_Enable_SPI>:

void nRF24L01P_Enable_SPI(void){
  SPCR=(1<<SPE)|(1<<MSTR);                     
 280:	80 e5       	ldi	r24, 0x50	; 80
 282:	8c bd       	out	0x2c, r24	; 44
  SPSR=(1<<SPI2X);                             
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	8d bd       	out	0x2d, r24	; 45
}
 288:	08 95       	ret

0000028a <nRF24L01P_Disable_SPI>:

void nRF24L01P_Disable_SPI(void){                 
  SPCR=0x00;
 28a:	1c bc       	out	0x2c, r1	; 44
  SPSR=0x00;
 28c:	1d bc       	out	0x2d, r1	; 45
}
 28e:	08 95       	ret

00000290 <nRF24L01P_Enable>:

void nRF24L01P_Enable(void){
  nRF24L01P_Enable_GPIO();
 290:	0e 94 30 01 	call	0x260	; 0x260 <nRF24L01P_Enable_GPIO>
  nRF24L01P_CSN_High(); 
  nRF24L01P_CE_Low() ;  
}

void nRF24L01P_Enable_SPI(void){
  SPCR=(1<<SPE)|(1<<MSTR);                     
 294:	80 e5       	ldi	r24, 0x50	; 80
 296:	8c bd       	out	0x2c, r24	; 44
  SPSR=(1<<SPI2X);                             
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	8d bd       	out	0x2d, r24	; 45
}

void nRF24L01P_Enable(void){
  nRF24L01P_Enable_GPIO();
  nRF24L01P_Enable_SPI();
}
 29c:	08 95       	ret

0000029e <nRF24L01P_Disable>:
  SPCR=(1<<SPE)|(1<<MSTR);                     
  SPSR=(1<<SPI2X);                             
}

void nRF24L01P_Disable_SPI(void){                 
  SPCR=0x00;
 29e:	1c bc       	out	0x2c, r1	; 44
  SPSR=0x00;
 2a0:	1d bc       	out	0x2d, r1	; 45
  nRF24L01P_Enable_SPI();
}

void nRF24L01P_Disable(void){
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
 2a2:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01P_Disable_GPIO>
}
 2a6:	08 95       	ret

000002a8 <nRF24L01P_Error_Clear>:

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 2a8:	e0 91 60 01 	lds	r30, 0x0160
 2ac:	f0 91 61 01 	lds	r31, 0x0161
 2b0:	11 8a       	std	Z+17, r1	; 0x11
 2b2:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 2b4:	12 8a       	std	Z+18, r1	; 0x12
}
 2b6:	08 95       	ret

000002b8 <nRF24L01P_Get_Error>:

uint8_t nRF24L01P_Get_Error(void){
 2b8:	e0 91 60 01 	lds	r30, 0x0160
 2bc:	f0 91 61 01 	lds	r31, 0x0161
  return nRF24L01P->Error;
}
 2c0:	82 89       	ldd	r24, Z+18	; 0x12
 2c2:	08 95       	ret

000002c4 <nRF24L01P_No_Error>:

uint8_t nRF24L01P_No_Error(void){
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	e0 91 60 01 	lds	r30, 0x0160
 2ca:	f0 91 61 01 	lds	r31, 0x0161
 2ce:	82 89       	ldd	r24, Z+18	; 0x12
 2d0:	88 23       	and	r24, r24
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <nRF24L01P_No_Error+0x12>
 2d4:	91 e0       	ldi	r25, 0x01	; 1
  if(nRF24L01P_Get_Error()==0){
    return 1;
  }else{
    return 0;
  }
}
 2d6:	89 2f       	mov	r24, r25
 2d8:	08 95       	ret

000002da <nRF24L01P_Error_Timeout>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <nRF24L01P_Error_Timeout+0x2>

uint8_t nRF24L01P_Error_Timeout(void){
  _delay_us(1);
  nRF24L01P->ErrorTicks++;
 2e0:	e0 91 60 01 	lds	r30, 0x0160
 2e4:	f0 91 61 01 	lds	r31, 0x0161
 2e8:	80 89       	ldd	r24, Z+16	; 0x10
 2ea:	91 89       	ldd	r25, Z+17	; 0x11
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	91 8b       	std	Z+17, r25	; 0x11
 2f0:	80 8b       	std	Z+16, r24	; 0x10
  if(nRF24L01P->ErrorTicks>1000){
 2f2:	89 5e       	subi	r24, 0xE9	; 233
 2f4:	93 40       	sbci	r25, 0x03	; 3
 2f6:	20 f0       	brcs	.+8      	; 0x300 <nRF24L01P_Error_Timeout+0x26>
    nRF24L01P->ErrorTicks=0;
 2f8:	11 8a       	std	Z+17, r1	; 0x11
 2fa:	10 8a       	std	Z+16, r1	; 0x10
    nRF24L01P->Error=0x10;
 2fc:	80 e1       	ldi	r24, 0x10	; 16
 2fe:	82 8b       	std	Z+18, r24	; 0x12
  }
  return nRF24L01P->Error;
}
 300:	82 89       	ldd	r24, Z+18	; 0x12
 302:	08 95       	ret

00000304 <nRF24L01P_SPI_Transfer>:

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
 304:	98 2f       	mov	r25, r24
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 306:	e0 91 60 01 	lds	r30, 0x0160
 30a:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 30e:	82 89       	ldd	r24, Z+18	; 0x12
 310:	88 23       	and	r24, r24
 312:	a9 f4       	brne	.+42     	; 0x33e <nRF24L01P_SPI_Transfer+0x3a>
}

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  uint8_t sts=0;
  if(nRF24L01P_No_Error()){
    SPDR = data;
 314:	9e bd       	out	0x2e, r25	; 46
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
}

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 316:	11 8a       	std	Z+17, r1	; 0x11
 318:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 31a:	12 8a       	std	Z+18, r1	; 0x12
 31c:	04 c0       	rjmp	.+8      	; 0x326 <nRF24L01P_SPI_Transfer+0x22>
  uint8_t sts=0;
  if(nRF24L01P_No_Error()){
    SPDR = data;
    nRF24L01P_Error_Clear();
    while(!(SPSR & (1 << SPIF))){
      if(nRF24L01P_Error_Timeout()){
 31e:	0e 94 6d 01 	call	0x2da	; 0x2da <nRF24L01P_Error_Timeout>
 322:	88 23       	and	r24, r24
 324:	19 f4       	brne	.+6      	; 0x32c <nRF24L01P_SPI_Transfer+0x28>
uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  uint8_t sts=0;
  if(nRF24L01P_No_Error()){
    SPDR = data;
    nRF24L01P_Error_Clear();
    while(!(SPSR & (1 << SPIF))){
 326:	0d b4       	in	r0, 0x2d	; 45
 328:	07 fe       	sbrs	r0, 7
 32a:	f9 cf       	rjmp	.-14     	; 0x31e <nRF24L01P_SPI_Transfer+0x1a>
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 32c:	e0 91 60 01 	lds	r30, 0x0160
 330:	f0 91 61 01 	lds	r31, 0x0161
 334:	82 89       	ldd	r24, Z+18	; 0x12
 336:	88 23       	and	r24, r24
 338:	11 f4       	brne	.+4      	; 0x33e <nRF24L01P_SPI_Transfer+0x3a>
	    sts=0;
	    break;
	  }
    }
    if(nRF24L01P_No_Error()){
      sts=SPDR;
 33a:	8e b5       	in	r24, 0x2e	; 46
 33c:	08 95       	ret
 33e:	80 e0       	ldi	r24, 0x00	; 0
    }
  }else{
    sts=0;
  }
  return sts;
}
 340:	08 95       	ret

00000342 <nRF24L01P_Calcuate_CRC>:

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
 342:	36 2f       	mov	r19, r22
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	28 27       	eor	r18, r24
 348:	39 27       	eor	r19, r25
 34a:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
	  crc=(crc<<1)^0x1021;
 34c:	61 e2       	ldi	r22, 0x21	; 33
 34e:	70 e1       	ldi	r23, 0x10	; 16
 350:	c9 01       	movw	r24, r18
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
}

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
 356:	37 ff       	sbrs	r19, 7
 358:	04 c0       	rjmp	.+8      	; 0x362 <nRF24L01P_Calcuate_CRC+0x20>
	  crc=(crc<<1)^0x1021;
 35a:	9c 01       	movw	r18, r24
 35c:	26 27       	eor	r18, r22
 35e:	37 27       	eor	r19, r23
 360:	01 c0       	rjmp	.+2      	; 0x364 <nRF24L01P_Calcuate_CRC+0x22>
	}
    else{
	  crc<<=1;
 362:	9c 01       	movw	r18, r24
  return sts;
}

uint16_t nRF24L01P_Calcuate_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
 364:	4f 5f       	subi	r20, 0xFF	; 255
 366:	48 30       	cpi	r20, 0x08	; 8
 368:	99 f7       	brne	.-26     	; 0x350 <nRF24L01P_Calcuate_CRC+0xe>
    else{
	  crc<<=1;
	}
  }
  return crc;
}
 36a:	c9 01       	movw	r24, r18
 36c:	08 95       	ret

0000036e <nRF24L01P_Calcuate_CRC_Block>:

uint16_t nRF24L01P_Calcuate_CRC_Block(uint8_t *buf, uint8_t len){
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	06 2f       	mov	r16, r22
 378:	ec 01       	movw	r28, r24
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	10 e0       	ldi	r17, 0x00	; 0
 380:	06 c0       	rjmp	.+12     	; 0x38e <nRF24L01P_Calcuate_CRC_Block+0x20>
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
    crc=nRF24L01P_Calcuate_CRC(crc,buf[i]);
 382:	c9 01       	movw	r24, r18
 384:	69 91       	ld	r22, Y+
 386:	0e 94 a1 01 	call	0x342	; 0x342 <nRF24L01P_Calcuate_CRC>
 38a:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t nRF24L01P_Calcuate_CRC_Block(uint8_t *buf, uint8_t len){
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
 38c:	1f 5f       	subi	r17, 0xFF	; 255
 38e:	10 17       	cp	r17, r16
 390:	c0 f3       	brcs	.-16     	; 0x382 <nRF24L01P_Calcuate_CRC_Block+0x14>
    crc=nRF24L01P_Calcuate_CRC(crc,buf[i]);
  }
  return crc;
}
 392:	c9 01       	movw	r24, r18
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <nRF24L01P_ReadWrite_Register>:


void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	98 2f       	mov	r25, r24
 3aa:	14 2f       	mov	r17, r20
 3ac:	05 2f       	mov	r16, r21
 3ae:	f2 2e       	mov	r15, r18
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 3b0:	e0 91 60 01 	lds	r30, 0x0160
 3b4:	f0 91 61 01 	lds	r31, 0x0161
 3b8:	82 89       	ldd	r24, Z+18	; 0x12
 3ba:	88 23       	and	r24, r24
 3bc:	29 f5       	brne	.+74     	; 0x408 <nRF24L01P_ReadWrite_Register+0x6a>
void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
 3be:	2a 98       	cbi	0x05, 2	; 5


void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
  if(nRF24L01P_No_Error()){
    nRF24L01P_CSN_Low();
    if(rw==0){
 3c0:	66 23       	and	r22, r22
 3c2:	89 f4       	brne	.+34     	; 0x3e6 <nRF24L01P_ReadWrite_Register+0x48>
      reg|=0x20;
	  nRF24L01P_SPI_Transfer(reg);
 3c4:	89 2f       	mov	r24, r25
 3c6:	80 62       	ori	r24, 0x20	; 32
 3c8:	0e 94 82 01 	call	0x304	; 0x304 <nRF24L01P_SPI_Transfer>
 3cc:	81 2f       	mov	r24, r17
 3ce:	90 2f       	mov	r25, r16
 3d0:	9c 01       	movw	r18, r24
 3d2:	e9 01       	movw	r28, r18
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <nRF24L01P_ReadWrite_Register+0x42>
	  for(uint8_t i=0;i<len;i++){
	    nRF24L01P_SPI_Transfer(data[i]);
 3d8:	89 91       	ld	r24, Y+
 3da:	0e 94 82 01 	call	0x304	; 0x304 <nRF24L01P_SPI_Transfer>
  if(nRF24L01P_No_Error()){
    nRF24L01P_CSN_Low();
    if(rw==0){
      reg|=0x20;
	  nRF24L01P_SPI_Transfer(reg);
	  for(uint8_t i=0;i<len;i++){
 3de:	1f 5f       	subi	r17, 0xFF	; 255
 3e0:	1f 15       	cp	r17, r15
 3e2:	d0 f3       	brcs	.-12     	; 0x3d8 <nRF24L01P_ReadWrite_Register+0x3a>
 3e4:	10 c0       	rjmp	.+32     	; 0x406 <nRF24L01P_ReadWrite_Register+0x68>
	    nRF24L01P_SPI_Transfer(data[i]);
	  }
    }else{
      nRF24L01P_SPI_Transfer(reg);
 3e6:	89 2f       	mov	r24, r25
 3e8:	0e 94 82 01 	call	0x304	; 0x304 <nRF24L01P_SPI_Transfer>
 3ec:	81 2f       	mov	r24, r17
 3ee:	90 2f       	mov	r25, r16
 3f0:	9c 01       	movw	r18, r24
 3f2:	e9 01       	movw	r28, r18
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	05 c0       	rjmp	.+10     	; 0x402 <nRF24L01P_ReadWrite_Register+0x64>
      for(uint8_t i=0;i<len;i++){
        data[i]=nRF24L01P_SPI_Transfer(0xFF);
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	0e 94 82 01 	call	0x304	; 0x304 <nRF24L01P_SPI_Transfer>
 3fe:	89 93       	st	Y+, r24
	  for(uint8_t i=0;i<len;i++){
	    nRF24L01P_SPI_Transfer(data[i]);
	  }
    }else{
      nRF24L01P_SPI_Transfer(reg);
      for(uint8_t i=0;i<len;i++){
 400:	1f 5f       	subi	r17, 0xFF	; 255
 402:	1f 15       	cp	r17, r15
 404:	c8 f3       	brcs	.-14     	; 0x3f8 <nRF24L01P_ReadWrite_Register+0x5a>
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

void nRF24L01P_CSN_High(void){
  nRF24L01P_CSN_PORT|= (1<<nRF24L01P_CSN_bp);
 406:	2a 9a       	sbi	0x05, 2	; 5
        data[i]=nRF24L01P_SPI_Transfer(0xFF);
      }
    }
    nRF24L01P_CSN_High();
  }
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	08 95       	ret

00000414 <nRF24L01P_Flush_Transmit_Buffer>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 414:	e0 91 60 01 	lds	r30, 0x0160
 418:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 41c:	82 89       	ldd	r24, Z+18	; 0x12
 41e:	88 23       	and	r24, r24
 420:	39 f4       	brne	.+14     	; 0x430 <nRF24L01P_Flush_Transmit_Buffer+0x1c>
  }
}

void nRF24L01P_Flush_Transmit_Buffer(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0xE1,0,nRF24L01P->TempBuf,0);
 422:	31 96       	adiw	r30, 0x01	; 1
 424:	81 ee       	ldi	r24, 0xE1	; 225
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	af 01       	movw	r20, r30
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
 430:	08 95       	ret

00000432 <nRF24L01P_Write_Data_To_Transmit_Buffer>:
  }
}

void nRF24L01P_Write_Data_To_Transmit_Buffer(uint8_t *data){
 432:	ac 01       	movw	r20, r24
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 434:	e0 91 60 01 	lds	r30, 0x0160
 438:	f0 91 61 01 	lds	r31, 0x0161
 43c:	82 89       	ldd	r24, Z+18	; 0x12
 43e:	88 23       	and	r24, r24
 440:	29 f4       	brne	.+10     	; 0x44c <nRF24L01P_Write_Data_To_Transmit_Buffer+0x1a>
  }
}

void nRF24L01P_Write_Data_To_Transmit_Buffer(uint8_t *data){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0xA0,0,data,32);
 442:	80 ea       	ldi	r24, 0xA0	; 160
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	20 e2       	ldi	r18, 0x20	; 32
 448:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
 44c:	08 95       	ret

0000044e <nRF24L01P_Transmit_Buffer_Empty>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 44e:	e0 91 60 01 	lds	r30, 0x0160
 452:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 456:	82 89       	ldd	r24, Z+18	; 0x12
 458:	88 23       	and	r24, r24
 45a:	11 f0       	breq	.+4      	; 0x460 <nRF24L01P_Transmit_Buffer_Empty+0x12>
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret
  }
}

uint8_t nRF24L01P_Transmit_Buffer_Empty(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0;
 460:	11 82       	std	Z+1, r1	; 0x01
    nRF24L01P_ReadWrite_Register(0x17,1,nRF24L01P->TempBuf,1);
 462:	31 96       	adiw	r30, 0x01	; 1
 464:	87 e1       	ldi	r24, 0x17	; 23
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	af 01       	movw	r20, r30
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
 470:	e0 91 60 01 	lds	r30, 0x0160
 474:	f0 91 61 01 	lds	r31, 0x0161
 478:	81 81       	ldd	r24, Z+1	; 0x01
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	64 e0       	ldi	r22, 0x04	; 4
 47e:	96 95       	lsr	r25
 480:	87 95       	ror	r24
 482:	6a 95       	dec	r22
 484:	e1 f7       	brne	.-8      	; 0x47e <nRF24L01P_Transmit_Buffer_Empty+0x30>
 486:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
 488:	08 95       	ret

0000048a <nRF24L01P_Wait_Till_Transmission_Completes>:

void nRF24L01P_Wait_Till_Transmission_Completes(void){
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 48e:	e0 91 60 01 	lds	r30, 0x0160
 492:	f0 91 61 01 	lds	r31, 0x0161
 496:	82 89       	ldd	r24, Z+18	; 0x12
 498:	88 23       	and	r24, r24
 49a:	29 f0       	breq	.+10     	; 0x4a6 <nRF24L01P_Wait_Till_Transmission_Completes+0x1c>
 49c:	0a c0       	rjmp	.+20     	; 0x4b2 <nRF24L01P_Wait_Till_Transmission_Completes+0x28>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 49e:	ce 01       	movw	r24, r28
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <nRF24L01P_Wait_Till_Transmission_Completes+0x16>
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <nRF24L01P_Wait_Till_Transmission_Completes+0x20>
 4a6:	cc e2       	ldi	r28, 0x2C	; 44
 4a8:	d1 e0       	ldi	r29, 0x01	; 1
  }
}

void nRF24L01P_Wait_Till_Transmission_Completes(void){
  if(nRF24L01P_No_Error()){
    while(!nRF24L01P_Transmit_Buffer_Empty()){
 4aa:	0e 94 27 02 	call	0x44e	; 0x44e <nRF24L01P_Transmit_Buffer_Empty>
 4ae:	88 23       	and	r24, r24
 4b0:	b1 f3       	breq	.-20     	; 0x49e <nRF24L01P_Wait_Till_Transmission_Completes+0x14>
      _delay_us(100);
    }
  }
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <nRF24L01P_Flush_Receive_Buffer>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 4b8:	e0 91 60 01 	lds	r30, 0x0160
 4bc:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 4c0:	82 89       	ldd	r24, Z+18	; 0x12
 4c2:	88 23       	and	r24, r24
 4c4:	39 f4       	brne	.+14     	; 0x4d4 <nRF24L01P_Flush_Receive_Buffer+0x1c>
  }
}

void nRF24L01P_Flush_Receive_Buffer(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0xE2,0,nRF24L01P->TempBuf,0);
 4c6:	31 96       	adiw	r30, 0x01	; 1
 4c8:	82 ee       	ldi	r24, 0xE2	; 226
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	af 01       	movw	r20, r30
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
 4d4:	08 95       	ret

000004d6 <nRF24L01P_Read_Data_From_Receive_Buffer>:
  }
}

void nRF24L01P_Read_Data_From_Receive_Buffer(uint8_t *data){
 4d6:	ac 01       	movw	r20, r24
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 4d8:	e0 91 60 01 	lds	r30, 0x0160
 4dc:	f0 91 61 01 	lds	r31, 0x0161
 4e0:	82 89       	ldd	r24, Z+18	; 0x12
 4e2:	88 23       	and	r24, r24
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <nRF24L01P_Read_Data_From_Receive_Buffer+0x1a>
  }
}

void nRF24L01P_Read_Data_From_Receive_Buffer(uint8_t *data){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x61,1,data,32);
 4e6:	81 e6       	ldi	r24, 0x61	; 97
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	20 e2       	ldi	r18, 0x20	; 32
 4ec:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
 4f0:	08 95       	ret

000004f2 <nRF24L01P_Receive_Buffer_Not_Empty>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 4f2:	e0 91 60 01 	lds	r30, 0x0160
 4f6:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 4fa:	82 89       	ldd	r24, Z+18	; 0x12
 4fc:	88 23       	and	r24, r24
 4fe:	11 f0       	breq	.+4      	; 0x504 <nRF24L01P_Receive_Buffer_Not_Empty+0x12>
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	08 95       	ret
  }
}

uint8_t nRF24L01P_Receive_Buffer_Not_Empty(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0;
 504:	11 82       	std	Z+1, r1	; 0x01
    nRF24L01P_ReadWrite_Register(0x17,1,nRF24L01P->TempBuf,1);
 506:	31 96       	adiw	r30, 0x01	; 1
 508:	87 e1       	ldi	r24, 0x17	; 23
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	af 01       	movw	r20, r30
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
 514:	e0 91 60 01 	lds	r30, 0x0160
 518:	f0 91 61 01 	lds	r31, 0x0161
 51c:	81 81       	ldd	r24, Z+1	; 0x01
 51e:	80 95       	com	r24
 520:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
 522:	08 95       	ret

00000524 <nRF24L01P_Get_Mode>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 524:	e0 91 60 01 	lds	r30, 0x0160
 528:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 52c:	82 89       	ldd	r24, Z+18	; 0x12
 52e:	88 23       	and	r24, r24
 530:	11 f0       	breq	.+4      	; 0x536 <nRF24L01P_Get_Mode+0x12>
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	08 95       	ret
  }
}

uint8_t nRF24L01P_Get_Mode(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x00,1,nRF24L01P->TempBuf,1);
 536:	31 96       	adiw	r30, 0x01	; 1
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	af 01       	movw	r20, r30
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
    if(nRF24L01P->TempBuf[0] & (1<<1)){
 544:	e0 91 60 01 	lds	r30, 0x0160
 548:	f0 91 61 01 	lds	r31, 0x0161
 54c:	81 81       	ldd	r24, Z+1	; 0x01
 54e:	81 ff       	sbrs	r24, 1
 550:	07 c0       	rjmp	.+14     	; 0x560 <nRF24L01P_Get_Mode+0x3c>
      if(nRF24L01P->TempBuf[0] & (1<<0)){
 552:	80 ff       	sbrs	r24, 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <nRF24L01P_Get_Mode+0x36>
	    nRF24L01P->Mode=0x01;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	01 c0       	rjmp	.+2      	; 0x55c <nRF24L01P_Get_Mode+0x38>
	    return 1; //rx mode
	  }else{
	    nRF24L01P->Mode=0x02;
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	80 83       	st	Z, r24
 55e:	08 95       	ret
	    return 2; //tx mode
	  }
    }else{
      nRF24L01P->Mode=0x00;
 560:	10 82       	st	Z, r1
 562:	80 e0       	ldi	r24, 0x00	; 0
      return 0;   //pwr down
    }
  }else{
    return 0;
  }
}
 564:	08 95       	ret

00000566 <nRF24L01P_Set_Mode_Sleep>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 566:	e0 91 60 01 	lds	r30, 0x0160
 56a:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 56e:	82 89       	ldd	r24, Z+18	; 0x12
 570:	88 23       	and	r24, r24
 572:	61 f4       	brne	.+24     	; 0x58c <nRF24L01P_Set_Mode_Sleep+0x26>
  }
}
  
void nRF24L01P_Set_Mode_Sleep(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x00;
 574:	11 82       	std	Z+1, r1	; 0x01
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 576:	31 96       	adiw	r30, 0x01	; 1
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	af 01       	movw	r20, r30
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
    nRF24L01P->Mode=0x00;
 582:	e0 91 60 01 	lds	r30, 0x0160
 586:	f0 91 61 01 	lds	r31, 0x0161
 58a:	10 82       	st	Z, r1
 58c:	08 95       	ret

0000058e <nRF24L01P_Set_Mode_Tx>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 58e:	e0 91 60 01 	lds	r30, 0x0160
 592:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 596:	82 89       	ldd	r24, Z+18	; 0x12
 598:	88 23       	and	r24, r24
 59a:	91 f4       	brne	.+36     	; 0x5c0 <nRF24L01P_Set_Mode_Tx+0x32>
  }
}

void nRF24L01P_Set_Mode_Tx(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x72;
 59c:	82 e7       	ldi	r24, 0x72	; 114
 59e:	81 83       	std	Z+1, r24	; 0x01
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 5a0:	40 98       	cbi	0x08, 0	; 8

void nRF24L01P_Set_Mode_Tx(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x72;
    nRF24L01P_CE_Low();
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 5a2:	31 96       	adiw	r30, 0x01	; 1
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	af 01       	movw	r20, r30
 5aa:	21 e0       	ldi	r18, 0x01	; 1
 5ac:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
	nRF24L01P_Flush_Transmit_Buffer();
 5b0:	0e 94 0a 02 	call	0x414	; 0x414 <nRF24L01P_Flush_Transmit_Buffer>
	nRF24L01P->Mode=0x02;
 5b4:	e0 91 60 01 	lds	r30, 0x0160
 5b8:	f0 91 61 01 	lds	r31, 0x0161
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	80 83       	st	Z, r24
 5c0:	08 95       	ret

000005c2 <nRF24L01P_Set_Mode_Rx>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 5c2:	e0 91 60 01 	lds	r30, 0x0160
 5c6:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 5ca:	82 89       	ldd	r24, Z+18	; 0x12
 5cc:	88 23       	and	r24, r24
 5ce:	81 f4       	brne	.+32     	; 0x5f0 <nRF24L01P_Set_Mode_Rx+0x2e>
  }
}

void nRF24L01P_Set_Mode_Rx(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x73;
 5d0:	83 e7       	ldi	r24, 0x73	; 115
 5d2:	81 83       	std	Z+1, r24	; 0x01
void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 5d4:	40 9a       	sbi	0x08, 0	; 8

void nRF24L01P_Set_Mode_Rx(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P->TempBuf[0]=0x73;
    nRF24L01P_CE_High();
    nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 5d6:	31 96       	adiw	r30, 0x01	; 1
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	af 01       	movw	r20, r30
 5de:	21 e0       	ldi	r18, 0x01	; 1
 5e0:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
	nRF24L01P->Mode=0x01;
 5e4:	e0 91 60 01 	lds	r30, 0x0160
 5e8:	f0 91 61 01 	lds	r31, 0x0161
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	80 83       	st	Z, r24
 5f0:	08 95       	ret

000005f2 <nRF24L01P_ReadModifyWrite>:
  }
}

void nRF24L01P_ReadModifyWrite(uint8_t reg, uint8_t bit_pos, uint8_t bit_val){
 5f2:	ff 92       	push	r15
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	f8 2e       	mov	r15, r24
 5fa:	16 2f       	mov	r17, r22
 5fc:	04 2f       	mov	r16, r20
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 5fe:	e0 91 60 01 	lds	r30, 0x0160
 602:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 606:	82 89       	ldd	r24, Z+18	; 0x12
 608:	88 23       	and	r24, r24
 60a:	69 f5       	brne	.+90     	; 0x666 <nRF24L01P_ReadModifyWrite+0x74>
  }
}

void nRF24L01P_ReadModifyWrite(uint8_t reg, uint8_t bit_pos, uint8_t bit_val){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(reg,1,nRF24L01P->TempBuf,1);
 60c:	31 96       	adiw	r30, 0x01	; 1
 60e:	8f 2d       	mov	r24, r15
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	af 01       	movw	r20, r30
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
 61a:	e0 91 60 01 	lds	r30, 0x0160
 61e:	f0 91 61 01 	lds	r31, 0x0161
    if(bit_val){
 622:	00 23       	and	r16, r16
 624:	51 f0       	breq	.+20     	; 0x63a <nRF24L01P_ReadModifyWrite+0x48>
      nRF24L01P->TempBuf[0]|=(1<<bit_pos);
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <nRF24L01P_ReadModifyWrite+0x3e>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	1a 95       	dec	r17
 632:	e2 f7       	brpl	.-8      	; 0x62c <nRF24L01P_ReadModifyWrite+0x3a>
 634:	21 81       	ldd	r18, Z+1	; 0x01
 636:	28 2b       	or	r18, r24
 638:	0a c0       	rjmp	.+20     	; 0x64e <nRF24L01P_ReadModifyWrite+0x5c>
    }else{
      nRF24L01P->TempBuf[0]&=~(1<<bit_pos);
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <nRF24L01P_ReadModifyWrite+0x52>
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	1a 95       	dec	r17
 646:	e2 f7       	brpl	.-8      	; 0x640 <nRF24L01P_ReadModifyWrite+0x4e>
 648:	80 95       	com	r24
 64a:	21 81       	ldd	r18, Z+1	; 0x01
 64c:	28 23       	and	r18, r24
 64e:	21 83       	std	Z+1, r18	; 0x01
    }
    nRF24L01P_ReadWrite_Register(reg,0,nRF24L01P->TempBuf,1);
 650:	40 91 60 01 	lds	r20, 0x0160
 654:	50 91 61 01 	lds	r21, 0x0161
 658:	4f 5f       	subi	r20, 0xFF	; 255
 65a:	5f 4f       	sbci	r21, 0xFF	; 255
 65c:	8f 2d       	mov	r24, r15
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	21 e0       	ldi	r18, 0x01	; 1
 662:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  }
}
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	ff 90       	pop	r15
 66c:	08 95       	ret

0000066e <nRF24L01P_Get_Channel>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 66e:	e0 91 60 01 	lds	r30, 0x0160
 672:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 676:	82 89       	ldd	r24, Z+18	; 0x12
 678:	88 23       	and	r24, r24
 67a:	11 f0       	breq	.+4      	; 0x680 <nRF24L01P_Get_Channel+0x12>
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	08 95       	ret
  }
}

uint8_t nRF24L01P_Get_Channel(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x05,1,nRF24L01P->TempBuf,1);
 680:	31 96       	adiw	r30, 0x01	; 1
 682:	85 e0       	ldi	r24, 0x05	; 5
 684:	61 e0       	ldi	r22, 0x01	; 1
 686:	af 01       	movw	r20, r30
 688:	21 e0       	ldi	r18, 0x01	; 1
 68a:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
    return nRF24L01P->TempBuf[0];
 68e:	e0 91 60 01 	lds	r30, 0x0160
 692:	f0 91 61 01 	lds	r31, 0x0161
 696:	81 81       	ldd	r24, Z+1	; 0x01
  }else{
    return 0;
  }
}
 698:	08 95       	ret

0000069a <nRF24L01P_Set_Channel>:

void nRF24L01P_Set_Channel(uint8_t channel){
 69a:	98 2f       	mov	r25, r24
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 69c:	e0 91 60 01 	lds	r30, 0x0160
 6a0:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 6a4:	82 89       	ldd	r24, Z+18	; 0x12
 6a6:	88 23       	and	r24, r24
 6a8:	61 f4       	brne	.+24     	; 0x6c2 <nRF24L01P_Set_Channel+0x28>
void nRF24L01P_Set_Channel(uint8_t channel){
  if(nRF24L01P_No_Error()){
    if(channel>125){
      channel=125;
    }
    nRF24L01P->TempBuf[0]=channel;
 6aa:	89 2f       	mov	r24, r25
 6ac:	9e 37       	cpi	r25, 0x7E	; 126
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <nRF24L01P_Set_Channel+0x18>
 6b0:	8d e7       	ldi	r24, 0x7D	; 125
 6b2:	81 83       	std	Z+1, r24	; 0x01
    nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
 6b4:	31 96       	adiw	r30, 0x01	; 1
 6b6:	85 e0       	ldi	r24, 0x05	; 5
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	af 01       	movw	r20, r30
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
 6c2:	08 95       	ret

000006c4 <nRF24L01P_Get_Speed>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 6c4:	e0 91 60 01 	lds	r30, 0x0160
 6c8:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 6cc:	82 89       	ldd	r24, Z+18	; 0x12
 6ce:	88 23       	and	r24, r24
 6d0:	11 f0       	breq	.+4      	; 0x6d6 <nRF24L01P_Get_Speed+0x12>
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	08 95       	ret
  }
}

uint8_t nRF24L01P_Get_Speed(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
 6d6:	31 96       	adiw	r30, 0x01	; 1
 6d8:	86 e0       	ldi	r24, 0x06	; 6
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	af 01       	movw	r20, r30
 6de:	21 e0       	ldi	r18, 0x01	; 1
 6e0:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
    nRF24L01P->TempBuf[1]=(nRF24L01P->TempBuf[0] >> 3) & 0x01;
 6e4:	e0 91 60 01 	lds	r30, 0x0160
 6e8:	f0 91 61 01 	lds	r31, 0x0161
 6ec:	91 81       	ldd	r25, Z+1	; 0x01
 6ee:	96 95       	lsr	r25
 6f0:	96 95       	lsr	r25
 6f2:	96 95       	lsr	r25
    nRF24L01P->TempBuf[0]>>=4;
    nRF24L01P->TempBuf[0]&=0x02;
 6f4:	89 2f       	mov	r24, r25
 6f6:	86 95       	lsr	r24
 6f8:	82 70       	andi	r24, 0x02	; 2
 6fa:	81 83       	std	Z+1, r24	; 0x01
}

uint8_t nRF24L01P_Get_Speed(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
    nRF24L01P->TempBuf[1]=(nRF24L01P->TempBuf[0] >> 3) & 0x01;
 6fc:	91 70       	andi	r25, 0x01	; 1
    nRF24L01P->TempBuf[0]>>=4;
    nRF24L01P->TempBuf[0]&=0x02;
    nRF24L01P->TempBuf[1]|=nRF24L01P->TempBuf[0];
 6fe:	89 2b       	or	r24, r25
 700:	82 83       	std	Z+2, r24	; 0x02
    if      (nRF24L01P->TempBuf[1]==0x02){
 702:	82 30       	cpi	r24, 0x02	; 2
 704:	11 f4       	brne	.+4      	; 0x70a <nRF24L01P_Get_Speed+0x46>
      nRF24L01P->TempBuf[0]=0;
 706:	11 82       	std	Z+1, r1	; 0x01
 708:	06 c0       	rjmp	.+12     	; 0x716 <nRF24L01P_Get_Speed+0x52>
    }else if(nRF24L01P->TempBuf[1]==0x01){
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	19 f0       	breq	.+6      	; 0x714 <nRF24L01P_Get_Speed+0x50>
      nRF24L01P->TempBuf[0]=1;
    }else if(nRF24L01P->TempBuf[1]==0x00){
 70e:	88 23       	and	r24, r24
 710:	11 f4       	brne	.+4      	; 0x716 <nRF24L01P_Get_Speed+0x52>
      nRF24L01P->TempBuf[0]=2;
 712:	82 e0       	ldi	r24, 0x02	; 2
 714:	81 83       	std	Z+1, r24	; 0x01
    }
    return nRF24L01P->TempBuf[0];
 716:	81 81       	ldd	r24, Z+1	; 0x01
  }else{
    return 0;
  }
}  
 718:	08 95       	ret

0000071a <nRF24L01P_Set_Speed>:

void nRF24L01P_Set_Speed(uint8_t index){
 71a:	98 2f       	mov	r25, r24
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 71c:	e0 91 60 01 	lds	r30, 0x0160
 720:	f0 91 61 01 	lds	r31, 0x0161
 724:	82 89       	ldd	r24, Z+18	; 0x12
 726:	88 23       	and	r24, r24
 728:	41 f5       	brne	.+80     	; 0x77a <nRF24L01P_Set_Speed+0x60>
  }
}  

void nRF24L01P_Set_Speed(uint8_t index){
  if(nRF24L01P_No_Error()){
    if(index==0){       //250kbps
 72a:	99 23       	and	r25, r25
 72c:	21 f4       	brne	.+8      	; 0x736 <nRF24L01P_Set_Speed+0x1c>
      nRF24L01P_ReadModifyWrite(0x06,5,1);
 72e:	86 e0       	ldi	r24, 0x06	; 6
 730:	65 e0       	ldi	r22, 0x05	; 5
 732:	41 e0       	ldi	r20, 0x01	; 1
 734:	05 c0       	rjmp	.+10     	; 0x740 <nRF24L01P_Set_Speed+0x26>
      nRF24L01P_ReadModifyWrite(0x06,3,0);
    }
    else if(index==1){  //1Mbps
 736:	91 30       	cpi	r25, 0x01	; 1
 738:	49 f4       	brne	.+18     	; 0x74c <nRF24L01P_Set_Speed+0x32>
      nRF24L01P_ReadModifyWrite(0x06,5,0);
 73a:	86 e0       	ldi	r24, 0x06	; 6
 73c:	65 e0       	ldi	r22, 0x05	; 5
 73e:	40 e0       	ldi	r20, 0x00	; 0
 740:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,3,0);
 744:	86 e0       	ldi	r24, 0x06	; 6
 746:	63 e0       	ldi	r22, 0x03	; 3
 748:	40 e0       	ldi	r20, 0x00	; 0
 74a:	0a c0       	rjmp	.+20     	; 0x760 <nRF24L01P_Set_Speed+0x46>
    }
    else if(index==2){  //2Mbps
 74c:	92 30       	cpi	r25, 0x02	; 2
 74e:	59 f4       	brne	.+22     	; 0x766 <nRF24L01P_Set_Speed+0x4c>
      nRF24L01P_ReadModifyWrite(0x06,5,0);
 750:	86 e0       	ldi	r24, 0x06	; 6
 752:	65 e0       	ldi	r22, 0x05	; 5
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,3,1);
 75a:	86 e0       	ldi	r24, 0x06	; 6
 75c:	63 e0       	ldi	r22, 0x03	; 3
 75e:	41 e0       	ldi	r20, 0x01	; 1
 760:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
 764:	08 95       	ret
    }else{              //2Mbps
      nRF24L01P_ReadModifyWrite(0x06,5,0);
 766:	86 e0       	ldi	r24, 0x06	; 6
 768:	65 e0       	ldi	r22, 0x05	; 5
 76a:	40 e0       	ldi	r20, 0x00	; 0
 76c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,3,1);
 770:	86 e0       	ldi	r24, 0x06	; 6
 772:	63 e0       	ldi	r22, 0x03	; 3
 774:	41 e0       	ldi	r20, 0x01	; 1
 776:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
 77a:	08 95       	ret

0000077c <nRF24L01P_Get_Tx_Power>:
  nRF24L01P->ErrorTicks=0;
  nRF24L01P->Error=0;
}

uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
 77c:	e0 91 60 01 	lds	r30, 0x0160
 780:	f0 91 61 01 	lds	r31, 0x0161
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 784:	82 89       	ldd	r24, Z+18	; 0x12
 786:	88 23       	and	r24, r24
 788:	11 f0       	breq	.+4      	; 0x78e <nRF24L01P_Get_Tx_Power+0x12>
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	08 95       	ret
  }
}

uint8_t nRF24L01P_Get_Tx_Power(void){
  if(nRF24L01P_No_Error()){
    nRF24L01P_ReadWrite_Register(0x06,1,nRF24L01P->TempBuf,1);
 78e:	31 96       	adiw	r30, 0x01	; 1
 790:	86 e0       	ldi	r24, 0x06	; 6
 792:	61 e0       	ldi	r22, 0x01	; 1
 794:	af 01       	movw	r20, r30
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
    nRF24L01P->TempBuf[0]>>=1;
 79c:	e0 91 60 01 	lds	r30, 0x0160
 7a0:	f0 91 61 01 	lds	r31, 0x0161
    nRF24L01P->TempBuf[0]&=0x03;
 7a4:	81 81       	ldd	r24, Z+1	; 0x01
 7a6:	86 95       	lsr	r24
 7a8:	83 70       	andi	r24, 0x03	; 3
 7aa:	81 83       	std	Z+1, r24	; 0x01
    return nRF24L01P->TempBuf[0];
  }else{
    return 0;
  }
}  
 7ac:	08 95       	ret

000007ae <nRF24L01P_Set_Tx_Power>:

void nRF24L01P_Set_Tx_Power(uint8_t index){
 7ae:	98 2f       	mov	r25, r24
uint8_t nRF24L01P_Get_Error(void){
  return nRF24L01P->Error;
}

uint8_t nRF24L01P_No_Error(void){
  if(nRF24L01P_Get_Error()==0){
 7b0:	e0 91 60 01 	lds	r30, 0x0160
 7b4:	f0 91 61 01 	lds	r31, 0x0161
 7b8:	82 89       	ldd	r24, Z+18	; 0x12
 7ba:	88 23       	and	r24, r24
 7bc:	71 f5       	brne	.+92     	; 0x81a <nRF24L01P_Set_Tx_Power+0x6c>
  }
}  

void nRF24L01P_Set_Tx_Power(uint8_t index){
  if(nRF24L01P_No_Error()){
    if(index==0){
 7be:	99 23       	and	r25, r25
 7c0:	21 f4       	brne	.+8      	; 0x7ca <nRF24L01P_Set_Tx_Power+0x1c>
      nRF24L01P_ReadModifyWrite(0x06,2,0);
 7c2:	86 e0       	ldi	r24, 0x06	; 6
 7c4:	62 e0       	ldi	r22, 0x02	; 2
 7c6:	40 e0       	ldi	r20, 0x00	; 0
 7c8:	0b c0       	rjmp	.+22     	; 0x7e0 <nRF24L01P_Set_Tx_Power+0x32>
      nRF24L01P_ReadModifyWrite(0x06,1,0);
    }
    else if(index==1){
 7ca:	91 30       	cpi	r25, 0x01	; 1
 7cc:	21 f4       	brne	.+8      	; 0x7d6 <nRF24L01P_Set_Tx_Power+0x28>
      nRF24L01P_ReadModifyWrite(0x06,2,0);
 7ce:	86 e0       	ldi	r24, 0x06	; 6
 7d0:	62 e0       	ldi	r22, 0x02	; 2
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	10 c0       	rjmp	.+32     	; 0x7f6 <nRF24L01P_Set_Tx_Power+0x48>
      nRF24L01P_ReadModifyWrite(0x06,1,1);
    }
    else if(index==2){
 7d6:	92 30       	cpi	r25, 0x02	; 2
 7d8:	49 f4       	brne	.+18     	; 0x7ec <nRF24L01P_Set_Tx_Power+0x3e>
      nRF24L01P_ReadModifyWrite(0x06,2,1);
 7da:	86 e0       	ldi	r24, 0x06	; 6
 7dc:	62 e0       	ldi	r22, 0x02	; 2
 7de:	41 e0       	ldi	r20, 0x01	; 1
 7e0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,1,0);
 7e4:	86 e0       	ldi	r24, 0x06	; 6
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	0a c0       	rjmp	.+20     	; 0x800 <nRF24L01P_Set_Tx_Power+0x52>
    }
    else if(index==3){
 7ec:	93 30       	cpi	r25, 0x03	; 3
 7ee:	59 f4       	brne	.+22     	; 0x806 <nRF24L01P_Set_Tx_Power+0x58>
      nRF24L01P_ReadModifyWrite(0x06,2,1);
 7f0:	86 e0       	ldi	r24, 0x06	; 6
 7f2:	62 e0       	ldi	r22, 0x02	; 2
 7f4:	41 e0       	ldi	r20, 0x01	; 1
 7f6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,1,1);
 7fa:	86 e0       	ldi	r24, 0x06	; 6
 7fc:	61 e0       	ldi	r22, 0x01	; 1
 7fe:	41 e0       	ldi	r20, 0x01	; 1
 800:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
 804:	08 95       	ret
    }else{
      nRF24L01P_ReadModifyWrite(0x06,2,1);
 806:	86 e0       	ldi	r24, 0x06	; 6
 808:	62 e0       	ldi	r22, 0x02	; 2
 80a:	41 e0       	ldi	r20, 0x01	; 1
 80c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
      nRF24L01P_ReadModifyWrite(0x06,1,1);
 810:	86 e0       	ldi	r24, 0x06	; 6
 812:	61 e0       	ldi	r22, 0x01	; 1
 814:	41 e0       	ldi	r20, 0x01	; 1
 816:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nRF24L01P_ReadModifyWrite>
 81a:	08 95       	ret

0000081c <nRF24L01P_Set_Own_Address>:
    }
  }
}

void nRF24L01P_Set_Own_Address(uint8_t addr){
  nRF24L01P->Address.Own=addr;
 81c:	e0 91 60 01 	lds	r30, 0x0160
 820:	f0 91 61 01 	lds	r31, 0x0161
 824:	83 83       	std	Z+3, r24	; 0x03
}
 826:	08 95       	ret

00000828 <nRF24L01P_Set_Destination_Address>:

void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
 828:	e0 91 60 01 	lds	r30, 0x0160
 82c:	f0 91 61 01 	lds	r31, 0x0161
 830:	84 83       	std	Z+4, r24	; 0x04
}
 832:	08 95       	ret

00000834 <nRF24L01P_Set_Receive_Timeout>:

void nRF24L01P_Set_Receive_Timeout(uint16_t val){
  nRF24L01P->Config.RxTimeout=val;
 834:	e0 91 60 01 	lds	r30, 0x0160
 838:	f0 91 61 01 	lds	r31, 0x0161
 83c:	96 83       	std	Z+6, r25	; 0x06
 83e:	85 83       	std	Z+5, r24	; 0x05
}
 840:	08 95       	ret

00000842 <nRF24L01P_Set_MaxRetransmission>:

void nRF24L01P_Set_MaxRetransmission(uint16_t val){
  nRF24L01P->Config.MaxRetry=val;
 842:	e0 91 60 01 	lds	r30, 0x0160
 846:	f0 91 61 01 	lds	r31, 0x0161
 84a:	93 87       	std	Z+11, r25	; 0x0b
 84c:	82 87       	std	Z+10, r24	; 0x0a
}
 84e:	08 95       	ret

00000850 <nRF24L01P_Deep_Sleep>:

void nRF24L01P_Deep_Sleep(void){
  if(nRF24L01P->Mode!=0x00){
 850:	e0 91 60 01 	lds	r30, 0x0160
 854:	f0 91 61 01 	lds	r31, 0x0161
 858:	80 81       	ld	r24, Z
 85a:	88 23       	and	r24, r24
 85c:	21 f0       	breq	.+8      	; 0x866 <nRF24L01P_Deep_Sleep+0x16>
    nRF24L01P_Set_Mode_Sleep();
 85e:	0e 94 b3 02 	call	0x566	; 0x566 <nRF24L01P_Set_Mode_Sleep>
    nRF24L01P_Disable();
 862:	0e 94 4f 01 	call	0x29e	; 0x29e <nRF24L01P_Disable>
 866:	08 95       	ret

00000868 <nRF24L01P_WakeUp>:
  }
}


void nRF24L01P_WakeUp(void){
  if(nRF24L01P->Mode==0x00){
 868:	e0 91 60 01 	lds	r30, 0x0160
 86c:	f0 91 61 01 	lds	r31, 0x0161
 870:	80 81       	ld	r24, Z
 872:	88 23       	and	r24, r24
 874:	21 f4       	brne	.+8      	; 0x87e <nRF24L01P_WakeUp+0x16>
    nRF24L01P_Enable();
 876:	0e 94 48 01 	call	0x290	; 0x290 <nRF24L01P_Enable>
    nRF24L01P_Set_Mode_Rx();
 87a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <nRF24L01P_Set_Mode_Rx>
 87e:	08 95       	ret

00000880 <nRF24L01P_Init>:
  }
}

void nRF24L01P_Init(void){
 880:	0f 93       	push	r16
 882:	1f 93       	push	r17
  nRF24L01P_Struct_Init();
 884:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <nRF24L01P_Struct_Init>
  nRF24L01P_Enable();
 888:	0e 94 48 01 	call	0x290	; 0x290 <nRF24L01P_Enable>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x00,0,nRF24L01P->TempBuf,1);
 88c:	e0 91 60 01 	lds	r30, 0x0160
 890:	f0 91 61 01 	lds	r31, 0x0161
 894:	11 82       	std	Z+1, r1	; 0x01
 896:	31 96       	adiw	r30, 0x01	; 1
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	60 e0       	ldi	r22, 0x00	; 0
 89c:	af 01       	movw	r20, r30
 89e:	21 e0       	ldi	r18, 0x01	; 1
 8a0:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x01,0,nRF24L01P->TempBuf,1);
 8a4:	e0 91 60 01 	lds	r30, 0x0160
 8a8:	f0 91 61 01 	lds	r31, 0x0161
 8ac:	11 82       	std	Z+1, r1	; 0x01
 8ae:	31 96       	adiw	r30, 0x01	; 1
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	af 01       	movw	r20, r30
 8b6:	21 e0       	ldi	r18, 0x01	; 1
 8b8:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x03;  nRF24L01P_ReadWrite_Register(0x02,0,nRF24L01P->TempBuf,1);
 8bc:	e0 91 60 01 	lds	r30, 0x0160
 8c0:	f0 91 61 01 	lds	r31, 0x0161
 8c4:	83 e0       	ldi	r24, 0x03	; 3
 8c6:	81 83       	std	Z+1, r24	; 0x01
 8c8:	31 96       	adiw	r30, 0x01	; 1
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	af 01       	movw	r20, r30
 8d0:	21 e0       	ldi	r18, 0x01	; 1
 8d2:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x01;  nRF24L01P_ReadWrite_Register(0x03,0,nRF24L01P->TempBuf,1);
 8d6:	e0 91 60 01 	lds	r30, 0x0160
 8da:	f0 91 61 01 	lds	r31, 0x0161
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	81 83       	std	Z+1, r24	; 0x01
 8e2:	31 96       	adiw	r30, 0x01	; 1
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	af 01       	movw	r20, r30
 8ea:	21 e0       	ldi	r18, 0x01	; 1
 8ec:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x04,0,nRF24L01P->TempBuf,1);
 8f0:	e0 91 60 01 	lds	r30, 0x0160
 8f4:	f0 91 61 01 	lds	r31, 0x0161
 8f8:	11 82       	std	Z+1, r1	; 0x01
 8fa:	31 96       	adiw	r30, 0x01	; 1
 8fc:	84 e0       	ldi	r24, 0x04	; 4
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	af 01       	movw	r20, r30
 902:	21 e0       	ldi	r18, 0x01	; 1
 904:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x02;  nRF24L01P_ReadWrite_Register(0x05,0,nRF24L01P->TempBuf,1);
 908:	e0 91 60 01 	lds	r30, 0x0160
 90c:	f0 91 61 01 	lds	r31, 0x0161
 910:	82 e0       	ldi	r24, 0x02	; 2
 912:	81 83       	std	Z+1, r24	; 0x01
 914:	31 96       	adiw	r30, 0x01	; 1
 916:	85 e0       	ldi	r24, 0x05	; 5
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	af 01       	movw	r20, r30
 91c:	21 e0       	ldi	r18, 0x01	; 1
 91e:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x26;  nRF24L01P_ReadWrite_Register(0x06,0,nRF24L01P->TempBuf,1); 
 922:	e0 91 60 01 	lds	r30, 0x0160
 926:	f0 91 61 01 	lds	r31, 0x0161
 92a:	86 e2       	ldi	r24, 0x26	; 38
 92c:	81 83       	std	Z+1, r24	; 0x01
 92e:	31 96       	adiw	r30, 0x01	; 1
 930:	86 e0       	ldi	r24, 0x06	; 6
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	af 01       	movw	r20, r30
 936:	21 e0       	ldi	r18, 0x01	; 1
 938:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x70;  nRF24L01P_ReadWrite_Register(0x07,0,nRF24L01P->TempBuf,1);
 93c:	e0 91 60 01 	lds	r30, 0x0160
 940:	f0 91 61 01 	lds	r31, 0x0161
 944:	80 e7       	ldi	r24, 0x70	; 112
 946:	81 83       	std	Z+1, r24	; 0x01
 948:	31 96       	adiw	r30, 0x01	; 1
 94a:	87 e0       	ldi	r24, 0x07	; 7
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	af 01       	movw	r20, r30
 950:	21 e0       	ldi	r18, 0x01	; 1
 952:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=nRF24L01P_PACKET_LEN;  
 956:	e0 91 60 01 	lds	r30, 0x0160
 95a:	f0 91 61 01 	lds	r31, 0x0161
 95e:	10 e2       	ldi	r17, 0x20	; 32
 960:	11 83       	std	Z+1, r17	; 0x01
  nRF24L01P_ReadWrite_Register(0x11,0,nRF24L01P->TempBuf,1);
 962:	31 96       	adiw	r30, 0x01	; 1
 964:	81 e1       	ldi	r24, 0x11	; 17
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	af 01       	movw	r20, r30
 96a:	21 e0       	ldi	r18, 0x01	; 1
 96c:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=nRF24L01P_PACKET_LEN;  
 970:	e0 91 60 01 	lds	r30, 0x0160
 974:	f0 91 61 01 	lds	r31, 0x0161
 978:	11 83       	std	Z+1, r17	; 0x01
  nRF24L01P_ReadWrite_Register(0x12,0,nRF24L01P->TempBuf,1);
 97a:	31 96       	adiw	r30, 0x01	; 1
 97c:	82 e1       	ldi	r24, 0x12	; 18
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	af 01       	movw	r20, r30
 982:	21 e0       	ldi	r18, 0x01	; 1
 984:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x1C,0,nRF24L01P->TempBuf,1);
 988:	e0 91 60 01 	lds	r30, 0x0160
 98c:	f0 91 61 01 	lds	r31, 0x0161
 990:	11 82       	std	Z+1, r1	; 0x01
 992:	31 96       	adiw	r30, 0x01	; 1
 994:	8c e1       	ldi	r24, 0x1C	; 28
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	af 01       	movw	r20, r30
 99a:	21 e0       	ldi	r18, 0x01	; 1
 99c:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P->TempBuf[0]=0x00;  nRF24L01P_ReadWrite_Register(0x1D,0,nRF24L01P->TempBuf,1);
 9a0:	e0 91 60 01 	lds	r30, 0x0160
 9a4:	f0 91 61 01 	lds	r31, 0x0161
 9a8:	11 82       	std	Z+1, r1	; 0x01
 9aa:	31 96       	adiw	r30, 0x01	; 1
 9ac:	8d e1       	ldi	r24, 0x1D	; 29
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	af 01       	movw	r20, r30
 9b2:	21 e0       	ldi	r18, 0x01	; 1
 9b4:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x10,0,(uint8_t*)"ACK00",5);
 9b8:	00 e2       	ldi	r16, 0x20	; 32
 9ba:	11 e0       	ldi	r17, 0x01	; 1
 9bc:	80 e1       	ldi	r24, 0x10	; 16
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	a8 01       	movw	r20, r16
 9c2:	25 e0       	ldi	r18, 0x05	; 5
 9c4:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0A,0,(uint8_t*)"ACK00",5);
 9c8:	8a e0       	ldi	r24, 0x0A	; 10
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	a8 01       	movw	r20, r16
 9ce:	25 e0       	ldi	r18, 0x05	; 5
 9d0:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0B,0,(uint8_t*)"PIPE1",5);
 9d4:	8b e0       	ldi	r24, 0x0B	; 11
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	46 e2       	ldi	r20, 0x26	; 38
 9da:	51 e0       	ldi	r21, 0x01	; 1
 9dc:	25 e0       	ldi	r18, 0x05	; 5
 9de:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0C,0,(uint8_t*)"PIPE2",5);
 9e2:	8c e0       	ldi	r24, 0x0C	; 12
 9e4:	60 e0       	ldi	r22, 0x00	; 0
 9e6:	4c e2       	ldi	r20, 0x2C	; 44
 9e8:	51 e0       	ldi	r21, 0x01	; 1
 9ea:	25 e0       	ldi	r18, 0x05	; 5
 9ec:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0D,0,(uint8_t*)"PIPE3",5);
 9f0:	8d e0       	ldi	r24, 0x0D	; 13
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	42 e3       	ldi	r20, 0x32	; 50
 9f6:	51 e0       	ldi	r21, 0x01	; 1
 9f8:	25 e0       	ldi	r18, 0x05	; 5
 9fa:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0E,0,(uint8_t*)"PIPE4",5);
 9fe:	8e e0       	ldi	r24, 0x0E	; 14
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	48 e3       	ldi	r20, 0x38	; 56
 a04:	51 e0       	ldi	r21, 0x01	; 1
 a06:	25 e0       	ldi	r18, 0x05	; 5
 a08:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register(0x0F,0,(uint8_t*)"PIPE5",5);
 a0c:	8f e0       	ldi	r24, 0x0F	; 15
 a0e:	60 e0       	ldi	r22, 0x00	; 0
 a10:	4e e3       	ldi	r20, 0x3E	; 62
 a12:	51 e0       	ldi	r21, 0x01	; 1
 a14:	25 e0       	ldi	r18, 0x05	; 5
 a16:	0e 94 cf 01 	call	0x39e	; 0x39e <nRF24L01P_ReadWrite_Register>
void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
}

void nRF24L01P_Set_Receive_Timeout(uint16_t val){
  nRF24L01P->Config.RxTimeout=val;
 a1a:	e0 91 60 01 	lds	r30, 0x0160
 a1e:	f0 91 61 01 	lds	r31, 0x0161
 a22:	80 e2       	ldi	r24, 0x20	; 32
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	96 83       	std	Z+6, r25	; 0x06
 a28:	85 83       	std	Z+5, r24	; 0x05
  nRF24L01P_ReadWrite_Register(0x0C,0,(uint8_t*)"PIPE2",5);
  nRF24L01P_ReadWrite_Register(0x0D,0,(uint8_t*)"PIPE3",5);
  nRF24L01P_ReadWrite_Register(0x0E,0,(uint8_t*)"PIPE4",5);
  nRF24L01P_ReadWrite_Register(0x0F,0,(uint8_t*)"PIPE5",5);
  nRF24L01P_Set_Receive_Timeout(32);
  nRF24L01P_Set_Mode_Sleep();
 a2a:	0e 94 b3 02 	call	0x566	; 0x566 <nRF24L01P_Set_Mode_Sleep>
}
 a2e:	1f 91       	pop	r17
 a30:	0f 91       	pop	r16
 a32:	08 95       	ret

00000a34 <nRF24L01P_Transmit_Basic>:

void nRF24L01P_Transmit_Basic(uint8_t *buf, uint8_t len){
 a34:	ff 92       	push	r15
 a36:	0f 93       	push	r16
 a38:	1f 93       	push	r17
 a3a:	8c 01       	movw	r16, r24
 a3c:	f6 2e       	mov	r15, r22
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
}

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 a3e:	e0 91 60 01 	lds	r30, 0x0160
 a42:	f0 91 61 01 	lds	r31, 0x0161
 a46:	11 8a       	std	Z+17, r1	; 0x11
 a48:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 a4a:	12 8a       	std	Z+18, r1	; 0x12
  nRF24L01P_Set_Mode_Sleep();
}

void nRF24L01P_Transmit_Basic(uint8_t *buf, uint8_t len){
  nRF24L01P_Error_Clear();
  nRF24L01P_Set_Mode_Tx();
 a4c:	0e 94 c7 02 	call	0x58e	; 0x58e <nRF24L01P_Set_Mode_Tx>
  buf[nRF24L01P_PACKET_LEN-5]=nRF24L01P->Address.Own;
 a50:	e0 91 60 01 	lds	r30, 0x0160
 a54:	f0 91 61 01 	lds	r31, 0x0161
 a58:	83 81       	ldd	r24, Z+3	; 0x03
 a5a:	f8 01       	movw	r30, r16
 a5c:	83 8f       	std	Z+27, r24	; 0x1b
  buf[nRF24L01P_PACKET_LEN-4]=nRF24L01P->Address.Dest;
 a5e:	e0 91 60 01 	lds	r30, 0x0160
 a62:	f0 91 61 01 	lds	r31, 0x0161
 a66:	84 81       	ldd	r24, Z+4	; 0x04
 a68:	f8 01       	movw	r30, r16
 a6a:	84 8f       	std	Z+28, r24	; 0x1c
  buf[nRF24L01P_PACKET_LEN-3]=len;
 a6c:	f5 8e       	std	Z+29, r15	; 0x1d
  uint16_t temp=nRF24L01P_Calcuate_CRC_Block(buf, 30);
 a6e:	c8 01       	movw	r24, r16
 a70:	6e e1       	ldi	r22, 0x1E	; 30
 a72:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01P_Calcuate_CRC_Block>
  buf[nRF24L01P_PACKET_LEN-2]=(temp & 0xFF00)>>8;
 a76:	f8 01       	movw	r30, r16
 a78:	96 8f       	std	Z+30, r25	; 0x1e
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
 a7a:	87 8f       	std	Z+31, r24	; 0x1f
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
 a7c:	c8 01       	movw	r24, r16
 a7e:	0e 94 19 02 	call	0x432	; 0x432 <nRF24L01P_Write_Data_To_Transmit_Buffer>
void nRF24L01P_CSN_Low(void){
  nRF24L01P_CSN_PORT&=~(1<<nRF24L01P_CSN_bp);
}

void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
 a82:	40 9a       	sbi	0x08, 0	; 8
  uint16_t temp=nRF24L01P_Calcuate_CRC_Block(buf, 30);
  buf[nRF24L01P_PACKET_LEN-2]=(temp & 0xFF00)>>8;
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
  nRF24L01P_CE_High();
  nRF24L01P_Wait_Till_Transmission_Completes();
 a84:	0e 94 45 02 	call	0x48a	; 0x48a <nRF24L01P_Wait_Till_Transmission_Completes>
void nRF24L01P_CE_High(void){
  nRF24L01P_CE_PORT|= (1<<nRF24L01P_CE_bp);
}

void nRF24L01P_CE_Low(void){
  nRF24L01P_CE_PORT&=~(1<<nRF24L01P_CE_bp);
 a88:	40 98       	cbi	0x08, 0	; 8
  buf[nRF24L01P_PACKET_LEN-1]=(temp & 0x00FF);
  nRF24L01P_Write_Data_To_Transmit_Buffer(buf);
  nRF24L01P_CE_High();
  nRF24L01P_Wait_Till_Transmission_Completes();
  nRF24L01P_CE_Low();
}
 a8a:	1f 91       	pop	r17
 a8c:	0f 91       	pop	r16
 a8e:	ff 90       	pop	r15
 a90:	08 95       	ret

00000a92 <nRF24L01P_Recieve_Basic>:


uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
 a92:	cf 92       	push	r12
 a94:	df 92       	push	r13
 a96:	ef 92       	push	r14
 a98:	ff 92       	push	r15
 a9a:	0f 93       	push	r16
 a9c:	1f 93       	push	r17
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	7c 01       	movw	r14, r24
  nRF24L01P_Disable_SPI();
  nRF24L01P_Disable_GPIO();
}

void nRF24L01P_Error_Clear(void){
  nRF24L01P->ErrorTicks=0;
 aa4:	e0 91 60 01 	lds	r30, 0x0160
 aa8:	f0 91 61 01 	lds	r31, 0x0161
 aac:	11 8a       	std	Z+17, r1	; 0x11
 aae:	10 8a       	std	Z+16, r1	; 0x10
  nRF24L01P->Error=0;
 ab0:	12 8a       	std	Z+18, r1	; 0x12


uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P_Error_Clear();
  nRF24L01P->Config.RxTicks=0;
 ab2:	10 86       	std	Z+8, r1	; 0x08
 ab4:	17 82       	std	Z+7, r1	; 0x07
  nRF24L01P_Set_Mode_Rx();
 ab6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <nRF24L01P_Set_Mode_Rx>
 aba:	7c e2       	ldi	r23, 0x2C	; 44
 abc:	c7 2e       	mov	r12, r23
 abe:	71 e0       	ldi	r23, 0x01	; 1
 ac0:	d7 2e       	mov	r13, r23
 ac2:	23 c0       	rjmp	.+70     	; 0xb0a <nRF24L01P_Recieve_Basic+0x78>
  while(nRF24L01P->Config.RxTicks < nRF24L01P->Config.RxTimeout){
    if(nRF24L01P_Receive_Buffer_Not_Empty()){
 ac4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <nRF24L01P_Receive_Buffer_Not_Empty>
 ac8:	88 23       	and	r24, r24
 aca:	99 f0       	breq	.+38     	; 0xaf2 <nRF24L01P_Recieve_Basic+0x60>
      nRF24L01P_Read_Data_From_Receive_Buffer(buf);
 acc:	c7 01       	movw	r24, r14
 ace:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <nRF24L01P_Read_Data_From_Receive_Buffer>
	  uint16_t rec_crc=buf[nRF24L01P_PACKET_LEN-2];
	  rec_crc<<=8;
 ad2:	f7 01       	movw	r30, r14
 ad4:	d6 8d       	ldd	r29, Z+30	; 0x1e
 ad6:	c0 e0       	ldi	r28, 0x00	; 0
	  rec_crc|=buf[nRF24L01P_PACKET_LEN-1];
 ad8:	07 8d       	ldd	r16, Z+31	; 0x1f
 ada:	10 e0       	ldi	r17, 0x00	; 0
 adc:	0c 2b       	or	r16, r28
 ade:	1d 2b       	or	r17, r29
      uint16_t calc_crc=nRF24L01P_Calcuate_CRC_Block(buf, nRF24L01P_PACKET_LEN-2);
 ae0:	c7 01       	movw	r24, r14
 ae2:	6e e1       	ldi	r22, 0x1E	; 30
 ae4:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01P_Calcuate_CRC_Block>
      if(rec_crc == calc_crc){
 ae8:	08 17       	cp	r16, r24
 aea:	19 07       	cpc	r17, r25
 aec:	11 f4       	brne	.+4      	; 0xaf2 <nRF24L01P_Recieve_Basic+0x60>
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	18 c0       	rjmp	.+48     	; 0xb22 <nRF24L01P_Recieve_Basic+0x90>
 af2:	c6 01       	movw	r24, r12
 af4:	01 97       	sbiw	r24, 0x01	; 1
 af6:	f1 f7       	brne	.-4      	; 0xaf4 <nRF24L01P_Recieve_Basic+0x62>
		sts=1;
		break;
	  }
    }
    _delay_us(100);
    nRF24L01P->Config.RxTicks++;
 af8:	e0 91 60 01 	lds	r30, 0x0160
 afc:	f0 91 61 01 	lds	r31, 0x0161
 b00:	87 81       	ldd	r24, Z+7	; 0x07
 b02:	90 85       	ldd	r25, Z+8	; 0x08
 b04:	01 96       	adiw	r24, 0x01	; 1
 b06:	90 87       	std	Z+8, r25	; 0x08
 b08:	87 83       	std	Z+7, r24	; 0x07
uint8_t nRF24L01P_Recieve_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P_Error_Clear();
  nRF24L01P->Config.RxTicks=0;
  nRF24L01P_Set_Mode_Rx();
  while(nRF24L01P->Config.RxTicks < nRF24L01P->Config.RxTimeout){
 b0a:	e0 91 60 01 	lds	r30, 0x0160
 b0e:	f0 91 61 01 	lds	r31, 0x0161
 b12:	27 81       	ldd	r18, Z+7	; 0x07
 b14:	30 85       	ldd	r19, Z+8	; 0x08
 b16:	85 81       	ldd	r24, Z+5	; 0x05
 b18:	96 81       	ldd	r25, Z+6	; 0x06
 b1a:	28 17       	cp	r18, r24
 b1c:	39 07       	cpc	r19, r25
 b1e:	90 f2       	brcs	.-92     	; 0xac4 <nRF24L01P_Recieve_Basic+0x32>
 b20:	80 e0       	ldi	r24, 0x00	; 0
    }
    _delay_us(100);
    nRF24L01P->Config.RxTicks++;
  }
  return sts;
}
 b22:	df 91       	pop	r29
 b24:	cf 91       	pop	r28
 b26:	1f 91       	pop	r17
 b28:	0f 91       	pop	r16
 b2a:	ff 90       	pop	r15
 b2c:	ef 90       	pop	r14
 b2e:	df 90       	pop	r13
 b30:	cf 90       	pop	r12
 b32:	08 95       	ret

00000b34 <nRF24L01P_Transmit_With_ACK>:

uint8_t nRF24L01P_Transmit_With_ACK(uint8_t *buf, uint8_t len){
 b34:	cf 93       	push	r28
 b36:	df 93       	push	r29
 b38:	ec 01       	movw	r28, r24
  uint8_t sts=0;
  if(nRF24L01P->Packet.ACKReq){
 b3a:	e0 91 60 01 	lds	r30, 0x0160
 b3e:	f0 91 61 01 	lds	r31, 0x0161
 b42:	87 85       	ldd	r24, Z+15	; 0x0f
 b44:	88 23       	and	r24, r24
 b46:	19 f0       	breq	.+6      	; 0xb4e <nRF24L01P_Transmit_With_ACK+0x1a>
    buf[nRF24L01P_PACKET_LEN-6]=1;
 b48:	81 e0       	ldi	r24, 0x01	; 1
 b4a:	8a 8f       	std	Y+26, r24	; 0x1a
 b4c:	01 c0       	rjmp	.+2      	; 0xb50 <nRF24L01P_Transmit_With_ACK+0x1c>
  }else{
    buf[nRF24L01P_PACKET_LEN-6]=0;
 b4e:	1a 8e       	std	Y+26, r1	; 0x1a
  }
  nRF24L01P_Transmit_Basic(buf, len);
 b50:	ce 01       	movw	r24, r28
 b52:	0e 94 1a 05 	call	0xa34	; 0xa34 <nRF24L01P_Transmit_Basic>
  if(nRF24L01P_Recieve_Basic(buf)){
 b56:	ce 01       	movw	r24, r28
 b58:	0e 94 49 05 	call	0xa92	; 0xa92 <nRF24L01P_Recieve_Basic>
 b5c:	81 11       	cpse	r24, r1
 b5e:	81 e0       	ldi	r24, 0x01	; 1
    //if( (nRF24L01P->Address.Own == buf[28])){
      sts=1;
    //}
  }
  return sts;
}
 b60:	df 91       	pop	r29
 b62:	cf 91       	pop	r28
 b64:	08 95       	ret

00000b66 <nRF24L01P_Recieve_With_ACK>:


uint8_t nRF24L01P_Recieve_With_ACK(uint8_t *buf){
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	ec 01       	movw	r28, r24
  uint8_t sts=0;
  if(nRF24L01P_Recieve_Basic(buf)){
 b6c:	0e 94 49 05 	call	0xa92	; 0xa92 <nRF24L01P_Recieve_Basic>
 b70:	88 23       	and	r24, r24
 b72:	b9 f0       	breq	.+46     	; 0xba2 <nRF24L01P_Recieve_With_ACK+0x3c>
    if((buf[nRF24L01P_PACKET_LEN-6]==1) && (nRF24L01P->Address.Own == buf[nRF24L01P_PACKET_LEN-4])){
 b74:	8a 8d       	ldd	r24, Y+26	; 0x1a
 b76:	81 30       	cpi	r24, 0x01	; 1
 b78:	a1 f4       	brne	.+40     	; 0xba2 <nRF24L01P_Recieve_With_ACK+0x3c>
 b7a:	e0 91 60 01 	lds	r30, 0x0160
 b7e:	f0 91 61 01 	lds	r31, 0x0161
 b82:	93 81       	ldd	r25, Z+3	; 0x03
 b84:	8c 8d       	ldd	r24, Y+28	; 0x1c
 b86:	98 17       	cp	r25, r24
 b88:	61 f4       	brne	.+24     	; 0xba2 <nRF24L01P_Recieve_With_ACK+0x3c>
 b8a:	8c ed       	ldi	r24, 0xDC	; 220
 b8c:	95 e0       	ldi	r25, 0x05	; 5
 b8e:	01 97       	sbiw	r24, 0x01	; 1
 b90:	f1 f7       	brne	.-4      	; 0xb8e <nRF24L01P_Recieve_With_ACK+0x28>
void nRF24L01P_Set_Own_Address(uint8_t addr){
  nRF24L01P->Address.Own=addr;
}

void nRF24L01P_Set_Destination_Address(uint8_t addr){
  nRF24L01P->Address.Dest=addr;
 b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
 b94:	84 83       	std	Z+4, r24	; 0x04
  uint8_t sts=0;
  if(nRF24L01P_Recieve_Basic(buf)){
    if((buf[nRF24L01P_PACKET_LEN-6]==1) && (nRF24L01P->Address.Own == buf[nRF24L01P_PACKET_LEN-4])){
      _delay_us(500);
	  nRF24L01P_Set_Destination_Address(buf[nRF24L01P_PACKET_LEN-5]);
      nRF24L01P_Transmit_Basic(buf, 2);
 b96:	ce 01       	movw	r24, r28
 b98:	62 e0       	ldi	r22, 0x02	; 2
 b9a:	0e 94 1a 05 	call	0xa34	; 0xa34 <nRF24L01P_Transmit_Basic>
 b9e:	81 e0       	ldi	r24, 0x01	; 1
 ba0:	01 c0       	rjmp	.+2      	; 0xba4 <nRF24L01P_Recieve_With_ACK+0x3e>
 ba2:	80 e0       	ldi	r24, 0x00	; 0
      sts=1;
    }
  }
  return sts;
}
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	08 95       	ret

00000baa <Vsns_ADC_Reference_Internal>:
#define  VSNS_EN_PORT PORTD
#define  VSNS_EN_bp   0x01


void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
 baa:	ec e7       	ldi	r30, 0x7C	; 124
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	80 81       	ld	r24, Z
 bb0:	80 6c       	ori	r24, 0xC0	; 192
 bb2:	80 83       	st	Z, r24
}
 bb4:	08 95       	ret

00000bb6 <Vsns_ADC_Reference_Avcc>:

void Vsns_ADC_Reference_Avcc(void){
  ADMUX&=~(1<<REFS1);
 bb6:	ec e7       	ldi	r30, 0x7C	; 124
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	80 81       	ld	r24, Z
 bbc:	8f 77       	andi	r24, 0x7F	; 127
 bbe:	80 83       	st	Z, r24
  ADMUX|=(1<<REFS0);
 bc0:	80 81       	ld	r24, Z
 bc2:	80 64       	ori	r24, 0x40	; 64
 bc4:	80 83       	st	Z, r24
}
 bc6:	08 95       	ret

00000bc8 <Vsns_ADC_Enable>:

void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
 bc8:	ea e7       	ldi	r30, 0x7A	; 122
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	80 81       	ld	r24, Z
 bce:	80 68       	ori	r24, 0x80	; 128
 bd0:	80 83       	st	Z, r24
}
 bd2:	08 95       	ret

00000bd4 <Vsns_ADC_Disable>:

void Vsns_ADC_Disable(void){
  ADCSRA&=~(1<<ADEN); 
 bd4:	ea e7       	ldi	r30, 0x7A	; 122
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	80 81       	ld	r24, Z
 bda:	8f 77       	andi	r24, 0x7F	; 127
 bdc:	80 83       	st	Z, r24
}
 bde:	08 95       	ret

00000be0 <Vsns_ADC_Init>:

void Vsns_ADC_Init(void){
  ADCSRA =(1<<ADPS1)|(1<<ADPS2);
 be0:	ea e7       	ldi	r30, 0x7A	; 122
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	86 e0       	ldi	r24, 0x06	; 6
 be6:	80 83       	st	Z, r24
  ADCSRA|=(1<<ADEN);
 be8:	80 81       	ld	r24, Z
 bea:	80 68       	ori	r24, 0x80	; 128
 bec:	80 83       	st	Z, r24
}
 bee:	08 95       	ret

00000bf0 <Vsns_ADC_Read>:

uint16_t Vsns_ADC_Read(uint8_t channel){
  uint8_t admux=(ADMUX & 0xC0);
 bf0:	90 91 7c 00 	lds	r25, 0x007C
 bf4:	90 7c       	andi	r25, 0xC0	; 192
  admux|=channel;
 bf6:	98 2b       	or	r25, r24
  if(ADMUX!=admux){ADMUX=admux;}
 bf8:	80 91 7c 00 	lds	r24, 0x007C
 bfc:	89 17       	cp	r24, r25
 bfe:	11 f0       	breq	.+4      	; 0xc04 <Vsns_ADC_Read+0x14>
 c00:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA|=(1<<ADSC);
 c04:	80 91 7a 00 	lds	r24, 0x007A
 c08:	80 64       	ori	r24, 0x40	; 64
 c0a:	80 93 7a 00 	sts	0x007A, r24
  while(!(ADCSRA &(1<<ADIF)));
 c0e:	80 91 7a 00 	lds	r24, 0x007A
 c12:	84 ff       	sbrs	r24, 4
 c14:	fc cf       	rjmp	.-8      	; 0xc0e <Vsns_ADC_Read+0x1e>
  ADCSRA|=(1<<ADIF);
 c16:	80 91 7a 00 	lds	r24, 0x007A
 c1a:	80 61       	ori	r24, 0x10	; 16
 c1c:	80 93 7a 00 	sts	0x007A, r24
  return ADCW;
 c20:	20 91 78 00 	lds	r18, 0x0078
 c24:	30 91 79 00 	lds	r19, 0x0079
}
 c28:	c9 01       	movw	r24, r18
 c2a:	08 95       	ret

00000c2c <Vsns_PMOS_Enable>:



void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
 c2c:	59 9a       	sbi	0x0b, 1	; 11
}
 c2e:	08 95       	ret

00000c30 <Vsns_PMOS_Disable>:

void Vsns_PMOS_Disable(void){
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
 c30:	59 98       	cbi	0x0b, 1	; 11
}
 c32:	08 95       	ret

00000c34 <Vsns_V_Read>:

uint16_t Vsns_V_Read(void){
 c34:	0f 93       	push	r16
 c36:	1f 93       	push	r17
}



void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
 c38:	59 9a       	sbi	0x0b, 1	; 11
  ADMUX&=~(1<<REFS1);
  ADMUX|=(1<<REFS0);
}

void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
 c3a:	0a e7       	ldi	r16, 0x7A	; 122
 c3c:	10 e0       	ldi	r17, 0x00	; 0
 c3e:	f8 01       	movw	r30, r16
 c40:	80 81       	ld	r24, Z
 c42:	80 68       	ori	r24, 0x80	; 128
 c44:	80 83       	st	Z, r24
}

uint16_t Vsns_V_Read(void){
  Vsns_PMOS_Enable();
  Vsns_ADC_Enable();
  Vsns_ADC_Read(0x06);
 c46:	86 e0       	ldi	r24, 0x06	; 6
 c48:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Vsns_ADC_Read>
  Vsns_ADC_Read(0x06);
 c4c:	86 e0       	ldi	r24, 0x06	; 6
 c4e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Vsns_ADC_Read>
  uint32_t temp=Vsns_ADC_Read(0x06);
 c52:	86 e0       	ldi	r24, 0x06	; 6
 c54:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Vsns_ADC_Read>
 c58:	a0 e0       	ldi	r26, 0x00	; 0
 c5a:	b0 e0       	ldi	r27, 0x00	; 0
void Vsns_ADC_Enable(void){
  ADCSRA|=(1<<ADEN); 
}

void Vsns_ADC_Disable(void){
  ADCSRA&=~(1<<ADEN); 
 c5c:	f8 01       	movw	r30, r16
 c5e:	20 81       	ld	r18, Z
 c60:	2f 77       	andi	r18, 0x7F	; 127
 c62:	20 83       	st	Z, r18
void Vsns_PMOS_Enable(void){
  VSNS_EN_PORT|=(1<<VSNS_EN_bp);
}

void Vsns_PMOS_Disable(void){
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
 c64:	59 98       	cbi	0x0b, 1	; 11
  Vsns_ADC_Read(0x06);
  uint32_t temp=Vsns_ADC_Read(0x06);
  Vsns_ADC_Disable();
  Vsns_PMOS_Disable();
  temp*=16;
  temp*=1100;
 c66:	bc 01       	movw	r22, r24
 c68:	cd 01       	movw	r24, r26
 c6a:	20 ec       	ldi	r18, 0xC0	; 192
 c6c:	34 e4       	ldi	r19, 0x44	; 68
 c6e:	40 e0       	ldi	r20, 0x00	; 0
 c70:	50 e0       	ldi	r21, 0x00	; 0
 c72:	0e 94 50 06 	call	0xca0	; 0xca0 <__mulsi3>
 c76:	9b 01       	movw	r18, r22
 c78:	ac 01       	movw	r20, r24
 c7a:	8a e0       	ldi	r24, 0x0A	; 10
 c7c:	56 95       	lsr	r21
 c7e:	47 95       	ror	r20
 c80:	37 95       	ror	r19
 c82:	27 95       	ror	r18
 c84:	8a 95       	dec	r24
 c86:	d1 f7       	brne	.-12     	; 0xc7c <Vsns_V_Read+0x48>
  temp/=1024;
  return (uint16_t)temp;
}
 c88:	c9 01       	movw	r24, r18
 c8a:	1f 91       	pop	r17
 c8c:	0f 91       	pop	r16
 c8e:	08 95       	ret

00000c90 <Vsns_Init>:

void Vsns_Init(void){
  VSNS_EN_DDR |= (1<<VSNS_EN_bp);
 c90:	39 9a       	sbi	0x07, 1	; 7
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
 c92:	59 98       	cbi	0x0b, 1	; 11
#define  VSNS_EN_PORT PORTD
#define  VSNS_EN_bp   0x01


void Vsns_ADC_Reference_Internal(void){
  ADMUX|=(1<<REFS0)|(1<<REFS1);
 c94:	ec e7       	ldi	r30, 0x7C	; 124
 c96:	f0 e0       	ldi	r31, 0x00	; 0
 c98:	80 81       	ld	r24, Z
 c9a:	80 6c       	ori	r24, 0xC0	; 192
 c9c:	80 83       	st	Z, r24

void Vsns_Init(void){
  VSNS_EN_DDR |= (1<<VSNS_EN_bp);
  VSNS_EN_PORT&=~(1<<VSNS_EN_bp);
  Vsns_ADC_Reference_Internal();
 c9e:	08 95       	ret

00000ca0 <__mulsi3>:
 ca0:	62 9f       	mul	r22, r18
 ca2:	d0 01       	movw	r26, r0
 ca4:	73 9f       	mul	r23, r19
 ca6:	f0 01       	movw	r30, r0
 ca8:	82 9f       	mul	r24, r18
 caa:	e0 0d       	add	r30, r0
 cac:	f1 1d       	adc	r31, r1
 cae:	64 9f       	mul	r22, r20
 cb0:	e0 0d       	add	r30, r0
 cb2:	f1 1d       	adc	r31, r1
 cb4:	92 9f       	mul	r25, r18
 cb6:	f0 0d       	add	r31, r0
 cb8:	83 9f       	mul	r24, r19
 cba:	f0 0d       	add	r31, r0
 cbc:	74 9f       	mul	r23, r20
 cbe:	f0 0d       	add	r31, r0
 cc0:	65 9f       	mul	r22, r21
 cc2:	f0 0d       	add	r31, r0
 cc4:	99 27       	eor	r25, r25
 cc6:	72 9f       	mul	r23, r18
 cc8:	b0 0d       	add	r27, r0
 cca:	e1 1d       	adc	r30, r1
 ccc:	f9 1f       	adc	r31, r25
 cce:	63 9f       	mul	r22, r19
 cd0:	b0 0d       	add	r27, r0
 cd2:	e1 1d       	adc	r30, r1
 cd4:	f9 1f       	adc	r31, r25
 cd6:	bd 01       	movw	r22, r26
 cd8:	cf 01       	movw	r24, r30
 cda:	11 24       	eor	r1, r1
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
