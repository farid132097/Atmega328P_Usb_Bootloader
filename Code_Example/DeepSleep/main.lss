
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800100  00800100  00000202  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000bf  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000204  00000000  00000000  00000301  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000136  00000000  00000000  00000505  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000240  00000000  00000000  0000063b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000138  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000013  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_6>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint8_t  state=0;


int main(void){

  DDRD  |= (1<<4);
  90:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  92:	5c 98       	cbi	0x0b, 4	; 11
  
  DDRD&=~((1<<3)|(1<<2));
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	83 7f       	andi	r24, 0xF3	; 243
  98:	8a b9       	out	0x0a, r24	; 10
  PORTD|=(1<<3)|(1<<2);
  9a:	8b b1       	in	r24, 0x0b	; 11
  9c:	8c 60       	ori	r24, 0x0C	; 12
  9e:	8b b9       	out	0x0b, r24	; 11
  
  
  Sleep_Init();
  a0:	0e 94 82 00 	call	0x104	; 0x104 <Sleep_Init>
  
  while(1){
    
	
	if(WDT_Get_Ticks()<10){
  a4:	0e 94 77 00 	call	0xee	; 0xee <WDT_Get_Ticks>
  a8:	6a 30       	cpi	r22, 0x0A	; 10
  aa:	71 05       	cpc	r23, r1
  ac:	81 05       	cpc	r24, r1
  ae:	91 05       	cpc	r25, r1
  b0:	10 f4       	brcc	.+4      	; 0xb6 <main+0x26>
	  PORTD |=(1<<4);
  b2:	5c 9a       	sbi	0x0b, 4	; 11
  b4:	f7 cf       	rjmp	.-18     	; 0xa4 <main+0x14>
	}else{
	  PORTD &=~(1<<4);
  b6:	5c 98       	cbi	0x0b, 4	; 11
	  Deep_Sleep();
  b8:	0e 94 5f 00 	call	0xbe	; 0xbe <Deep_Sleep>
  bc:	f3 cf       	rjmp	.-26     	; 0xa4 <main+0x14>

000000be <Deep_Sleep>:
#include <avr/sleep.h>

volatile uint32_t WDT_Ticks=0;

void Deep_Sleep(void){
  sleep_enable();
  be:	83 b7       	in	r24, 0x33	; 51
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
  c4:	85 b7       	in	r24, 0x35	; 53
  c6:	80 66       	ori	r24, 0x60	; 96
  c8:	85 bf       	out	0x35, r24	; 53
  ca:	8f 7d       	andi	r24, 0xDF	; 223
  cc:	85 bf       	out	0x35, r24	; 53
  sei();
  ce:	78 94       	sei
  sleep_cpu();
  d0:	88 95       	sleep
  sleep_disable();
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	83 bf       	out	0x33, r24	; 51
}
  d8:	08 95       	ret

000000da <ADC_Disable>:

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8f 77       	andi	r24, 0x7F	; 127
  e2:	80 83       	st	Z, r24
}
  e4:	08 95       	ret

000000e6 <Analog_Comparator_Disable>:

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
  e6:	80 b7       	in	r24, 0x30	; 48
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	80 bf       	out	0x30, r24	; 48
}
  ec:	08 95       	ret

000000ee <WDT_Get_Ticks>:

uint32_t WDT_Get_Ticks(void){
  return WDT_Ticks;
  ee:	20 91 05 01 	lds	r18, 0x0105
  f2:	30 91 06 01 	lds	r19, 0x0106
  f6:	40 91 07 01 	lds	r20, 0x0107
  fa:	50 91 08 01 	lds	r21, 0x0108
}
  fe:	b9 01       	movw	r22, r18
 100:	ca 01       	movw	r24, r20
 102:	08 95       	ret

00000104 <Sleep_Init>:


void Sleep_Init(void){
  cli();
 104:	f8 94       	cli
  WDTCSR=(1<<WDCE)|(1<<WDE);
 106:	e0 e6       	ldi	r30, 0x60	; 96
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	88 e1       	ldi	r24, 0x18	; 24
 10c:	80 83       	st	Z, r24
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
 10e:	86 e4       	ldi	r24, 0x46	; 70
 110:	80 83       	st	Z, r24
  sei();
 112:	78 94       	sei
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 114:	83 b7       	in	r24, 0x33	; 51
 116:	81 7f       	andi	r24, 0xF1	; 241
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	83 bf       	out	0x33, r24	; 51
  sleep_cpu();
  sleep_disable();
}

void ADC_Disable(void){
  ADCSRA &=~ (1<<ADEN);
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8f 77       	andi	r24, 0x7F	; 127
 124:	80 83       	st	Z, r24
}

void Analog_Comparator_Disable(void){
  ACSR   &=~ (1<<ACD) ;
 126:	80 b7       	in	r24, 0x30	; 48
 128:	8f 77       	andi	r24, 0x7F	; 127
 12a:	80 bf       	out	0x30, r24	; 48
  WDTCSR=(1<<WDP1)|(1<<WDP2)|(1<<WDIE);
  sei();
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ADC_Disable();
  Analog_Comparator_Disable();
}
 12c:	08 95       	ret

0000012e <__vector_6>:

ISR(WDT_vect){
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
  WDTCSR|=(1<<WDIE);
 144:	e0 e6       	ldi	r30, 0x60	; 96
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
  WDT_Ticks++;
 14e:	80 91 05 01 	lds	r24, 0x0105
 152:	90 91 06 01 	lds	r25, 0x0106
 156:	a0 91 07 01 	lds	r26, 0x0107
 15a:	b0 91 08 01 	lds	r27, 0x0108
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	a1 1d       	adc	r26, r1
 162:	b1 1d       	adc	r27, r1
 164:	80 93 05 01 	sts	0x0105, r24
 168:	90 93 06 01 	sts	0x0106, r25
 16c:	a0 93 07 01 	sts	0x0107, r26
 170:	b0 93 08 01 	sts	0x0108, r27
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
