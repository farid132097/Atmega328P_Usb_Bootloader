
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000774  00000808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000774  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800102  00800102  0000080a  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003d8  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ad5  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000030c  00000000  00000000  000016f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000091d  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00002320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000603  00000000  00000000  00002a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00003021  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b8 03 	jmp	0x770	; 0x770 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define  OnDelay  10
#define  OffDelay 1000

int main(void){
  
  debug_init();
  a6:	0e 94 25 03 	call	0x64a	; 0x64a <debug_init>
  DDRD  |= (1<<4);
  aa:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  ac:	5c 98       	cbi	0x0b, 4	; 11
  sei();
  ae:	78 94       	sei
  while(1){
    
    //PORTD |= (1<<4);
	//debug_tx_text_nl("Hello World! -> Software Serial test");
	//PORTD &=~(1<<4);
	if(debug_rx_byte()!=0){
  b0:	0e 94 03 01 	call	0x206	; 0x206 <debug_rx_byte>
  b4:	88 23       	and	r24, r24
  b6:	e1 f3       	breq	.-8      	; 0xb0 <main+0xa>
	  //debug_tx_byte('a');
	  debug_rx_byte_clear();
  b8:	0e 94 06 01 	call	0x20c	; 0x20c <debug_rx_byte_clear>
  bc:	f9 cf       	rjmp	.-14     	; 0xb0 <main+0xa>

000000be <debug_struct_init>:


debug_t debug;

void debug_struct_init(void){
  debug.error=0;
  be:	10 92 02 01 	sts	0x0102, r1
  debug.dr=0;
  c2:	10 92 03 01 	sts	0x0103, r1
  c6:	e4 e0       	ldi	r30, 0x04	; 4
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
  ca:	11 92       	st	Z+, r1
debug_t debug;

void debug_struct_init(void){
  debug.error=0;
  debug.dr=0;
  for(uint8_t i=0;i<8;i++){
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	ec 30       	cpi	r30, 0x0C	; 12
  d0:	f8 07       	cpc	r31, r24
  d2:	d9 f7       	brne	.-10     	; 0xca <debug_struct_init+0xc>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
  d4:	10 82       	st	Z, r1
  debug.count=0;
  d6:	12 82       	std	Z+2, r1	; 0x02
  d8:	11 82       	std	Z+1, r1	; 0x01
  debug.loop_counter=0;
  da:	14 82       	std	Z+4, r1	; 0x04
  dc:	13 82       	std	Z+3, r1	; 0x03
  debug.loop_counter_sts=0;
  de:	15 82       	std	Z+5, r1	; 0x05
  debug.reset_sts=0;
  e0:	16 82       	std	Z+6, r1	; 0x06
}
  e2:	08 95       	ret

000000e4 <debug_timings_init>:
  TIFR0=0x00;
  #define DEBUG_TIMER0_DELAY_TICKS DEBUG_TIMER_DELAY_TICKS
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCCR1A=0x00;
  e4:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=(1<<CS10);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 81 00 	sts	0x0081, r24
  TCCR1C=0x00;
  ee:	10 92 82 00 	sts	0x0082, r1
  TIMSK1=0x00;
  f2:	10 92 6f 00 	sts	0x006F, r1
  TIFR1=0x00;
  f6:	16 ba       	out	0x16, r1	; 22
  TIMSK2=0x00;
  TIFR2=0x00;
  #define DEBUG_TIMER2_DELAY_TICKS DEBUG_TIMER_DELAY_TICKS
  #endif
  
  PCICR |=(1<<PCIE2);
  f8:	e8 e6       	ldi	r30, 0x68	; 104
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	80 83       	st	Z, r24
  PCMSK2|=(1<<PCINT21);
 102:	ed e6       	ldi	r30, 0x6D	; 109
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	80 83       	st	Z, r24
  sei();
 10c:	78 94       	sei
}
 10e:	08 95       	ret

00000110 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
 110:	56 9a       	sbi	0x0a, 6	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 112:	5e 9a       	sbi	0x0b, 6	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
 114:	55 98       	cbi	0x0a, 5	; 10
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
 116:	5d 9a       	sbi	0x0b, 5	; 11
}
 118:	08 95       	ret

0000011a <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 11a:	5e 9a       	sbi	0x0b, 6	; 11
}
 11c:	08 95       	ret

0000011e <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 11e:	5e 98       	cbi	0x0b, 6	; 11
}
 120:	08 95       	ret

00000122 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	11 f4       	brne	.+4      	; 0x12a <debug_tx_set+0x8>
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 126:	5e 9a       	sbi	0x0b, 6	; 11
 128:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 12a:	5e 98       	cbi	0x0b, 6	; 11
 12c:	08 95       	ret

0000012e <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 12e:	89 b1       	in	r24, 0x09	; 9
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	25 e0       	ldi	r18, 0x05	; 5
 134:	96 95       	lsr	r25
 136:	87 95       	ror	r24
 138:	2a 95       	dec	r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	08 95       	ret

00000140 <debug_delay>:

void debug_delay(uint16_t val){
 140:	9c 01       	movw	r18, r24
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 142:	10 92 85 00 	sts	0x0085, r1
 146:	10 92 84 00 	sts	0x0084, r1
  while(TCNT1<val){}
 14a:	80 91 84 00 	lds	r24, 0x0084
 14e:	90 91 85 00 	lds	r25, 0x0085
 152:	82 17       	cp	r24, r18
 154:	93 07       	cpc	r25, r19
 156:	c8 f3       	brcs	.-14     	; 0x14a <debug_delay+0xa>
  
  #ifdef DEBUG_USE_TIMER2
  TCNT2=0;
  while(TCNT2<val){}
  #endif
}
 158:	08 95       	ret

0000015a <debug_tx_byte>:

void debug_tx_byte(uint8_t val){
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	2a 97       	sbiw	r28, 0x0a	; 10
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 16e:	fe 01       	movw	r30, r28
 170:	31 96       	adiw	r30, 0x01	; 1
 172:	9a e0       	ldi	r25, 0x0A	; 10
 174:	df 01       	movw	r26, r30
 176:	1d 92       	st	X+, r1
 178:	9a 95       	dec	r25
 17a:	e9 f7       	brne	.-6      	; 0x176 <debug_tx_byte+0x1c>
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	9a 87       	std	Y+10, r25	; 0x0a
 180:	fe 01       	movw	r30, r28
 182:	32 96       	adiw	r30, 0x02	; 2
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 188:	48 2f       	mov	r20, r24
 18a:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 18c:	61 e0       	ldi	r22, 0x01	; 1
}

void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 18e:	ca 01       	movw	r24, r20
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <debug_tx_byte+0x3e>
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <debug_tx_byte+0x3a>
 19c:	80 ff       	sbrs	r24, 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <debug_tx_byte+0x4a>
	  buf[i+1]=1;
 1a0:	60 83       	st	Z, r22
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <debug_tx_byte+0x4c>
	}else{
	  buf[i+1]=0;
 1a4:	10 82       	st	Z, r1
 1a6:	2f 5f       	subi	r18, 0xFF	; 255
 1a8:	3f 4f       	sbci	r19, 0xFF	; 255
 1aa:	31 96       	adiw	r30, 0x01	; 1
  #endif
}

void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 1ac:	28 30       	cpi	r18, 0x08	; 8
 1ae:	31 05       	cpc	r19, r1
 1b0:	71 f7       	brne	.-36     	; 0x18e <debug_tx_byte+0x34>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 1b2:	2f b7       	in	r18, 0x3f	; 63
  if(sreg & (1<<7)){
 1b4:	27 ff       	sbrs	r18, 7
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <debug_tx_byte+0x60>
    cli();
 1b8:	f8 94       	cli
 1ba:	fe 01       	movw	r30, r28
 1bc:	31 96       	adiw	r30, 0x01	; 1
  }
  for(uint8_t i=0;i<10;i++){
 1be:	ae 01       	movw	r20, r28
 1c0:	45 5f       	subi	r20, 0xF5	; 245
 1c2:	5f 4f       	sbci	r21, 0xFF	; 255
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 1c4:	80 81       	ld	r24, Z
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	11 f4       	brne	.+4      	; 0x1ce <debug_tx_byte+0x74>
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 1ca:	5e 9a       	sbi	0x0b, 6	; 11
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <debug_tx_byte+0x76>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 1ce:	5e 98       	cbi	0x0b, 6	; 11
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 1d0:	10 92 85 00 	sts	0x0085, r1
 1d4:	10 92 84 00 	sts	0x0084, r1
  while(TCNT1<val){}
 1d8:	80 91 84 00 	lds	r24, 0x0084
 1dc:	90 91 85 00 	lds	r25, 0x0085
 1e0:	8e 5c       	subi	r24, 0xCE	; 206
 1e2:	94 40       	sbci	r25, 0x04	; 4
 1e4:	c8 f3       	brcs	.-14     	; 0x1d8 <debug_tx_byte+0x7e>
 1e6:	31 96       	adiw	r30, 0x01	; 1
  }
  uint8_t sreg=SREG;
  if(sreg & (1<<7)){
    cli();
  }
  for(uint8_t i=0;i<10;i++){
 1e8:	e4 17       	cp	r30, r20
 1ea:	f5 07       	cpc	r31, r21
 1ec:	59 f7       	brne	.-42     	; 0x1c4 <debug_tx_byte+0x6a>
    debug_tx_set(buf[i]);
	debug_delay(DEBUG_TIMER_DELAY_TICKS);
  }
  if(sreg & (1<<7)){
 1ee:	27 ff       	sbrs	r18, 7
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <debug_tx_byte+0x9a>
    sei();
 1f2:	78 94       	sei
  }
}
 1f4:	2a 96       	adiw	r28, 0x0a	; 10
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	cf 91       	pop	r28
 202:	df 91       	pop	r29
 204:	08 95       	ret

00000206 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
  return debug.dr;
 206:	80 91 03 01 	lds	r24, 0x0103
}
 20a:	08 95       	ret

0000020c <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.dr=0;
 20c:	10 92 03 01 	sts	0x0103, r1
}
 210:	08 95       	ret

00000212 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.dr=val;
 212:	80 93 03 01 	sts	0x0103, r24
}
 216:	08 95       	ret

00000218 <debug_tx_hex>:

void debug_tx_hex(uint32_t val){
 218:	bf 92       	push	r11
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	7b 01       	movw	r14, r22
 22c:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	e8 16       	cp	r14, r24
 232:	f1 04       	cpc	r15, r1
 234:	01 05       	cpc	r16, r1
 236:	11 05       	cpc	r17, r1
 238:	09 f0       	breq	.+2      	; 0x23c <debug_tx_hex+0x24>
 23a:	30 f4       	brcc	.+12     	; 0x248 <debug_tx_hex+0x30>
 23c:	c8 e0       	ldi	r28, 0x08	; 8
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	52 e0       	ldi	r21, 0x02	; 2
 242:	c5 2e       	mov	r12, r21
 244:	d1 2c       	mov	r13, r1
 246:	14 c0       	rjmp	.+40     	; 0x270 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	e8 16       	cp	r14, r24
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	f8 06       	cpc	r15, r24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	08 07       	cpc	r16, r24
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	18 07       	cpc	r17, r24
 258:	30 f0       	brcs	.+12     	; 0x266 <debug_tx_hex+0x4e>
 25a:	c0 e2       	ldi	r28, 0x20	; 32
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	48 e0       	ldi	r20, 0x08	; 8
 260:	c4 2e       	mov	r12, r20
 262:	d1 2c       	mov	r13, r1
 264:	05 c0       	rjmp	.+10     	; 0x270 <debug_tx_hex+0x58>
 266:	c0 e1       	ldi	r28, 0x10	; 16
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	34 e0       	ldi	r19, 0x04	; 4
 26c:	c3 2e       	mov	r12, r19
 26e:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
 270:	80 e3       	ldi	r24, 0x30	; 48
 272:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
  debug_tx_byte('x');
 276:	88 e7       	ldi	r24, 0x78	; 120
 278:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
 27c:	bb 24       	eor	r11, r11
 27e:	17 c0       	rjmp	.+46     	; 0x2ae <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 280:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 282:	d8 01       	movw	r26, r16
 284:	c7 01       	movw	r24, r14
 286:	0c 2e       	mov	r0, r28
 288:	04 c0       	rjmp	.+8      	; 0x292 <debug_tx_hex+0x7a>
 28a:	b6 95       	lsr	r27
 28c:	a7 95       	ror	r26
 28e:	97 95       	ror	r25
 290:	87 95       	ror	r24
 292:	0a 94       	dec	r0
 294:	d2 f7       	brpl	.-12     	; 0x28a <debug_tx_hex+0x72>
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 29c:	8a 30       	cpi	r24, 0x0A	; 10
 29e:	91 05       	cpc	r25, r1
 2a0:	10 f0       	brcs	.+4      	; 0x2a6 <debug_tx_hex+0x8e>
	    hex_digit+=55;
 2a2:	c7 96       	adiw	r24, 0x37	; 55
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
 2a6:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
 2a8:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 2ac:	b3 94       	inc	r11
 2ae:	8b 2d       	mov	r24, r11
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	8c 15       	cp	r24, r12
 2b4:	9d 05       	cpc	r25, r13
 2b6:	20 f3       	brcs	.-56     	; 0x280 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	bf 90       	pop	r11
 2ca:	08 95       	ret

000002cc <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
 2cc:	af 92       	push	r10
 2ce:	bf 92       	push	r11
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	7b 01       	movw	r14, r22
 2e2:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 2e4:	6f 3f       	cpi	r22, 0xFF	; 255
 2e6:	71 05       	cpc	r23, r1
 2e8:	81 05       	cpc	r24, r1
 2ea:	91 05       	cpc	r25, r1
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <debug_tx_bin+0x24>
 2ee:	18 f4       	brcc	.+6      	; 0x2f6 <debug_tx_bin+0x2a>
 2f0:	e7 e0       	ldi	r30, 0x07	; 7
 2f2:	de 2e       	mov	r13, r30
 2f4:	0d c0       	rjmp	.+26     	; 0x310 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 2f6:	60 30       	cpi	r22, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	73 07       	cpc	r23, r19
 2fc:	31 e0       	ldi	r19, 0x01	; 1
 2fe:	83 07       	cpc	r24, r19
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	93 07       	cpc	r25, r19
 304:	18 f0       	brcs	.+6      	; 0x30c <debug_tx_bin+0x40>
 306:	7f e1       	ldi	r23, 0x1F	; 31
 308:	d7 2e       	mov	r13, r23
 30a:	02 c0       	rjmp	.+4      	; 0x310 <debug_tx_bin+0x44>
 30c:	6f e0       	ldi	r22, 0x0F	; 15
 30e:	d6 2e       	mov	r13, r22
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
 310:	80 e3       	ldi	r24, 0x30	; 48
 312:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
  debug_tx_byte('b');
 316:	82 e6       	ldi	r24, 0x62	; 98
 318:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
 320:	cd 2c       	mov	r12, r13
 322:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 324:	56 01       	movw	r10, r12
 326:	08 94       	sec
 328:	a1 1c       	adc	r10, r1
 32a:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 32c:	c6 01       	movw	r24, r12
 32e:	8c 1b       	sub	r24, r28
 330:	9d 0b       	sbc	r25, r29
 332:	a8 01       	movw	r20, r16
 334:	97 01       	movw	r18, r14
 336:	04 c0       	rjmp	.+8      	; 0x340 <debug_tx_bin+0x74>
 338:	56 95       	lsr	r21
 33a:	47 95       	ror	r20
 33c:	37 95       	ror	r19
 33e:	27 95       	ror	r18
 340:	8a 95       	dec	r24
 342:	d2 f7       	brpl	.-12     	; 0x338 <debug_tx_bin+0x6c>
 344:	da 01       	movw	r26, r20
 346:	c9 01       	movw	r24, r18
 348:	81 70       	andi	r24, 0x01	; 1
 34a:	90 70       	andi	r25, 0x00	; 0
 34c:	89 2b       	or	r24, r25
 34e:	11 f0       	breq	.+4      	; 0x354 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
 350:	81 e3       	ldi	r24, 0x31	; 49
 352:	01 c0       	rjmp	.+2      	; 0x356 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
 354:	80 e3       	ldi	r24, 0x30	; 48
 356:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
 35a:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 35c:	ca 15       	cp	r28, r10
 35e:	db 05       	cpc	r29, r11
 360:	29 f7       	brne	.-54     	; 0x32c <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	df 90       	pop	r13
 370:	cf 90       	pop	r12
 372:	bf 90       	pop	r11
 374:	af 90       	pop	r10
 376:	08 95       	ret

00000378 <debug_tx_nl>:

void debug_tx_nl(void){
  debug_tx_byte('\r');
 378:	8d e0       	ldi	r24, 0x0D	; 13
 37a:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
  debug_tx_byte('\n');
 37e:	8a e0       	ldi	r24, 0x0A	; 10
 380:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
}
 384:	08 95       	ret

00000386 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
 386:	80 e2       	ldi	r24, 0x20	; 32
 388:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
}
 38c:	08 95       	ret

0000038e <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
 38e:	8c e2       	ldi	r24, 0x2C	; 44
 390:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
}
 394:	08 95       	ret

00000396 <debug_tx_text>:

void debug_tx_text(char *str){
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	ec 01       	movw	r28, r24
 39e:	10 e0       	ldi	r17, 0x00	; 0
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
 3a2:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
        i++;
 3a6:	1f 5f       	subi	r17, 0xFF	; 255
  debug_tx_byte(',');
}

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 3a8:	fe 01       	movw	r30, r28
 3aa:	e1 0f       	add	r30, r17
 3ac:	f1 1d       	adc	r31, r1
 3ae:	80 81       	ld	r24, Z
 3b0:	88 23       	and	r24, r24
 3b2:	b9 f7       	brne	.-18     	; 0x3a2 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	08 95       	ret

000003bc <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
 3bc:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
  debug_tx_nl();
 3c0:	0e 94 bc 01 	call	0x378	; 0x378 <debug_tx_nl>
}
 3c4:	08 95       	ret

000003c6 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
 3c6:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
  debug_tx_sp();
 3ca:	0e 94 c3 01 	call	0x386	; 0x386 <debug_tx_sp>
}
 3ce:	08 95       	ret

000003d0 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
 3d0:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
  debug_tx_cm();
 3d4:	0e 94 c7 01 	call	0x38e	; 0x38e <debug_tx_cm>
}
 3d8:	08 95       	ret

000003da <debug_determine_digit_numbers>:

void debug_determine_digit_numbers(uint32_t num){
 3da:	bf 92       	push	r11
 3dc:	cf 92       	push	r12
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	6b 01       	movw	r12, r22
 3ea:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 3ec:	61 15       	cp	r22, r1
 3ee:	71 05       	cpc	r23, r1
 3f0:	81 05       	cpc	r24, r1
 3f2:	91 05       	cpc	r25, r1
 3f4:	31 f4       	brne	.+12     	; 0x402 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
 3f6:	10 92 04 01 	sts	0x0104, r1
    debug.input_num_digits=1;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	80 93 0c 01 	sts	0x010C, r24
 400:	23 c0       	rjmp	.+70     	; 0x448 <debug_determine_digit_numbers+0x6e>
 402:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 404:	0b 2d       	mov	r16, r11
 406:	10 e0       	ldi	r17, 0x00	; 0
 408:	0e 5f       	subi	r16, 0xFE	; 254
 40a:	1e 4f       	sbci	r17, 0xFE	; 254
 40c:	c7 01       	movw	r24, r14
 40e:	b6 01       	movw	r22, r12
 410:	2a e0       	ldi	r18, 0x0A	; 10
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	0e 94 96 03 	call	0x72c	; 0x72c <__udivmodsi4>
 41c:	f8 01       	movw	r30, r16
 41e:	62 83       	std	Z+2, r22	; 0x02
      num/=10;
 420:	c7 01       	movw	r24, r14
 422:	b6 01       	movw	r22, r12
 424:	2a e0       	ldi	r18, 0x0A	; 10
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	0e 94 96 03 	call	0x72c	; 0x72c <__udivmodsi4>
 430:	c9 01       	movw	r24, r18
 432:	da 01       	movw	r26, r20
 434:	6c 01       	movw	r12, r24
 436:	7d 01       	movw	r14, r26
      i++;
 438:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 43a:	c1 14       	cp	r12, r1
 43c:	d1 04       	cpc	r13, r1
 43e:	e1 04       	cpc	r14, r1
 440:	f1 04       	cpc	r15, r1
 442:	01 f7       	brne	.-64     	; 0x404 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 444:	b0 92 0c 01 	sts	0x010C, r11
  }
}
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	ff 90       	pop	r15
 44e:	ef 90       	pop	r14
 450:	df 90       	pop	r13
 452:	cf 90       	pop	r12
 454:	bf 90       	pop	r11
 456:	08 95       	ret

00000458 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
 458:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 45a:	10 91 0c 01 	lds	r17, 0x010C
 45e:	09 c0       	rjmp	.+18     	; 0x472 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 460:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 462:	e1 2f       	mov	r30, r17
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ee 5f       	subi	r30, 0xFE	; 254
 468:	fe 4f       	sbci	r31, 0xFE	; 254
 46a:	82 81       	ldd	r24, Z+2	; 0x02
    temp+=48;
    debug_tx_byte(temp);
 46c:	80 5d       	subi	r24, 0xD0	; 208
 46e:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 472:	11 23       	and	r17, r17
 474:	a9 f7       	brne	.-22     	; 0x460 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
 476:	1f 91       	pop	r17
 478:	08 95       	ret

0000047a <debug_tx_number>:

void debug_tx_number(int32_t num){
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	7b 01       	movw	r14, r22
 484:	8c 01       	movw	r16, r24
  if(num<0){
 486:	97 ff       	sbrs	r25, 7
 488:	0b c0       	rjmp	.+22     	; 0x4a0 <debug_tx_number+0x26>
    debug_tx_byte('-');
 48a:	8d e2       	ldi	r24, 0x2D	; 45
 48c:	0e 94 ad 00 	call	0x15a	; 0x15a <debug_tx_byte>
	num=-num;
 490:	10 95       	com	r17
 492:	00 95       	com	r16
 494:	f0 94       	com	r15
 496:	e0 94       	com	r14
 498:	e1 1c       	adc	r14, r1
 49a:	f1 1c       	adc	r15, r1
 49c:	01 1d       	adc	r16, r1
 49e:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
 4a0:	c8 01       	movw	r24, r16
 4a2:	b7 01       	movw	r22, r14
 4a4:	0e 94 ed 01 	call	0x3da	; 0x3da <debug_determine_digit_numbers>
  debug_tx_number_digits();
 4a8:	0e 94 2c 02 	call	0x458	; 0x458 <debug_tx_number_digits>
}
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	08 95       	ret

000004b6 <debug_tx_number_nl>:

void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
 4b6:	0e 94 3d 02 	call	0x47a	; 0x47a <debug_tx_number>
  debug_tx_nl();
 4ba:	0e 94 bc 01 	call	0x378	; 0x378 <debug_tx_nl>
}
 4be:	08 95       	ret

000004c0 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
 4c0:	0e 94 3d 02 	call	0x47a	; 0x47a <debug_tx_number>
  debug_tx_sp();
 4c4:	0e 94 c3 01 	call	0x386	; 0x386 <debug_tx_sp>
}
 4c8:	08 95       	ret

000004ca <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
 4ca:	0e 94 3d 02 	call	0x47a	; 0x47a <debug_tx_number>
  debug_tx_text(",");
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
}
 4d6:	08 95       	ret

000004d8 <debug_tx_number_hex_nl>:

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
 4d8:	0e 94 0c 01 	call	0x218	; 0x218 <debug_tx_hex>
  debug_tx_nl();
 4dc:	0e 94 bc 01 	call	0x378	; 0x378 <debug_tx_nl>
}
 4e0:	08 95       	ret

000004e2 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
 4e2:	0e 94 0c 01 	call	0x218	; 0x218 <debug_tx_hex>
  debug_tx_sp();
 4e6:	0e 94 c3 01 	call	0x386	; 0x386 <debug_tx_sp>
}
 4ea:	08 95       	ret

000004ec <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
 4ec:	0e 94 0c 01 	call	0x218	; 0x218 <debug_tx_hex>
  debug_tx_text(",");
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
}
 4f8:	08 95       	ret

000004fa <debug_tx_parameter_nl>:

void debug_tx_parameter_nl(char *name, int32_t num){
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	7a 01       	movw	r14, r20
 504:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 506:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
  debug_tx_sp();
 50a:	0e 94 c3 01 	call	0x386	; 0x386 <debug_tx_sp>
  debug_tx_number_nl(num);
 50e:	c8 01       	movw	r24, r16
 510:	b7 01       	movw	r22, r14
 512:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <debug_tx_number_nl>
}
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	ff 90       	pop	r15
 51c:	ef 90       	pop	r14
 51e:	08 95       	ret

00000520 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
 520:	ef 92       	push	r14
 522:	ff 92       	push	r15
 524:	0f 93       	push	r16
 526:	1f 93       	push	r17
 528:	7a 01       	movw	r14, r20
 52a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 52c:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
  debug_tx_sp();
 530:	0e 94 c3 01 	call	0x386	; 0x386 <debug_tx_sp>
  debug_tx_number_sp(num);
 534:	c8 01       	movw	r24, r16
 536:	b7 01       	movw	r22, r14
 538:	0e 94 60 02 	call	0x4c0	; 0x4c0 <debug_tx_number_sp>
}
 53c:	1f 91       	pop	r17
 53e:	0f 91       	pop	r16
 540:	ff 90       	pop	r15
 542:	ef 90       	pop	r14
 544:	08 95       	ret

00000546 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
 546:	ef 92       	push	r14
 548:	ff 92       	push	r15
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	7a 01       	movw	r14, r20
 550:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 552:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
  debug_tx_sp();
 556:	0e 94 c3 01 	call	0x386	; 0x386 <debug_tx_sp>
  debug_tx_number_cm(num);
 55a:	c8 01       	movw	r24, r16
 55c:	b7 01       	movw	r22, r14
 55e:	0e 94 65 02 	call	0x4ca	; 0x4ca <debug_tx_number_cm>
}
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	08 95       	ret

0000056c <debug_tx_parameter_hex_nl>:

void debug_tx_parameter_hex_nl(char *name, int32_t num){
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	7a 01       	movw	r14, r20
 576:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 578:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
  debug_tx_sp();
 57c:	0e 94 c3 01 	call	0x386	; 0x386 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
 580:	c8 01       	movw	r24, r16
 582:	b7 01       	movw	r22, r14
 584:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <debug_tx_number_hex_nl>
}
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	ff 90       	pop	r15
 58e:	ef 90       	pop	r14
 590:	08 95       	ret

00000592 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
 592:	ef 92       	push	r14
 594:	ff 92       	push	r15
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	7a 01       	movw	r14, r20
 59c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 59e:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
  debug_tx_sp();
 5a2:	0e 94 c3 01 	call	0x386	; 0x386 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
 5a6:	c8 01       	movw	r24, r16
 5a8:	b7 01       	movw	r22, r14
 5aa:	0e 94 71 02 	call	0x4e2	; 0x4e2 <debug_tx_number_hex_sp>
}
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	ff 90       	pop	r15
 5b4:	ef 90       	pop	r14
 5b6:	08 95       	ret

000005b8 <debug_tx_parameter_hex_cm>:

void debug_tx_parameter_hex_cm(char *name, int32_t num){
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	7a 01       	movw	r14, r20
 5c2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 5c4:	0e 94 cb 01 	call	0x396	; 0x396 <debug_tx_text>
  debug_tx_sp();
 5c8:	0e 94 c3 01 	call	0x386	; 0x386 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
 5cc:	c8 01       	movw	r24, r16
 5ce:	b7 01       	movw	r22, r14
 5d0:	0e 94 76 02 	call	0x4ec	; 0x4ec <debug_tx_number_hex_cm>
}
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	ff 90       	pop	r15
 5da:	ef 90       	pop	r14
 5dc:	08 95       	ret

000005de <debug_loop_counter_inc>:

void debug_loop_counter_inc(void){
  debug.loop_counter++;
 5de:	80 91 0f 01 	lds	r24, 0x010F
 5e2:	90 91 10 01 	lds	r25, 0x0110
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	90 93 10 01 	sts	0x0110, r25
 5ec:	80 93 0f 01 	sts	0x010F, r24
  if(debug.loop_counter>DEBUG_LP_CNT_LMT){
 5f0:	85 36       	cpi	r24, 0x65	; 101
 5f2:	91 05       	cpc	r25, r1
 5f4:	b8 f0       	brcs	.+46     	; 0x624 <debug_loop_counter_inc+0x46>
    debug.count++;
 5f6:	80 91 0d 01 	lds	r24, 0x010D
 5fa:	90 91 0e 01 	lds	r25, 0x010E
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	90 93 0e 01 	sts	0x010E, r25
 604:	80 93 0d 01 	sts	0x010D, r24
	if(debug.count>65000){
 608:	89 5e       	subi	r24, 0xE9	; 233
 60a:	9d 4f       	sbci	r25, 0xFD	; 253
 60c:	20 f0       	brcs	.+8      	; 0x616 <debug_loop_counter_inc+0x38>
	  debug.count=0;
 60e:	10 92 0e 01 	sts	0x010E, r1
 612:	10 92 0d 01 	sts	0x010D, r1
	}
    debug.loop_counter=0;
 616:	10 92 10 01 	sts	0x0110, r1
 61a:	10 92 0f 01 	sts	0x010F, r1
	debug.loop_counter_sts=1;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	80 93 11 01 	sts	0x0111, r24
 624:	08 95       	ret

00000626 <debug_get_count>:
  }
}

uint16_t debug_get_count(void){
  return debug.count;
}
 626:	80 91 0d 01 	lds	r24, 0x010D
 62a:	90 91 0e 01 	lds	r25, 0x010E
 62e:	08 95       	ret

00000630 <debug_get_loop_counter>:

uint16_t debug_get_loop_counter(void){
  return debug.loop_counter;
}
 630:	80 91 0f 01 	lds	r24, 0x010F
 634:	90 91 10 01 	lds	r25, 0x0110
 638:	08 95       	ret

0000063a <debug_get_loop_counter_ovf>:

uint8_t debug_get_loop_counter_ovf(void){
  if(debug.loop_counter_sts){
 63a:	80 91 11 01 	lds	r24, 0x0111
 63e:	88 23       	and	r24, r24
 640:	19 f0       	breq	.+6      	; 0x648 <debug_get_loop_counter_ovf+0xe>
    debug.loop_counter_sts=0;
 642:	10 92 11 01 	sts	0x0111, r1
 646:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
  }else{
    return 0;
  }
}
 648:	08 95       	ret

0000064a <debug_init>:


void debug_init(void){
  debug_struct_init();
 64a:	0e 94 5f 00 	call	0xbe	; 0xbe <debug_struct_init>
  debug_timings_init();
 64e:	0e 94 72 00 	call	0xe4	; 0xe4 <debug_timings_init>
  debug_gpio_init();
 652:	0e 94 88 00 	call	0x110	; 0x110 <debug_gpio_init>
}
 656:	08 95       	ret

00000658 <__vector_5>:


ISR(PCINT2_vect){
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	2f 93       	push	r18
 664:	3f 93       	push	r19
 666:	4f 93       	push	r20
 668:	5f 93       	push	r21
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 66e:	4d 99       	sbic	0x09, 5	; 9
 670:	52 c0       	rjmp	.+164    	; 0x716 <__vector_5+0xbe>
 672:	48 c0       	rjmp	.+144    	; 0x704 <__vector_5+0xac>
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
  while(TCNT1<val){}
 674:	80 91 84 00 	lds	r24, 0x0084
 678:	90 91 85 00 	lds	r25, 0x0085
 67c:	8e 54       	subi	r24, 0x4E	; 78
 67e:	92 40       	sbci	r25, 0x02	; 2
 680:	c8 f3       	brcs	.-14     	; 0x674 <__vector_5+0x1c>
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	20 e0       	ldi	r18, 0x00	; 0
ISR(PCINT2_vect){
  if(debug_rx_get()==0){
	uint8_t val=0, sts=0;
	debug_delay(DEBUG_RX_HDELAY_TICKS);
	for(uint8_t i=0;i<10;i++){
	  if(i==0){
 688:	22 23       	and	r18, r18
 68a:	71 f4       	brne	.+28     	; 0x6a8 <__vector_5+0x50>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 68c:	4d 9b       	sbis	0x09, 5	; 9
 68e:	3f c0       	rjmp	.+126    	; 0x70e <__vector_5+0xb6>
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 690:	10 92 85 00 	sts	0x0085, r1
 694:	10 92 84 00 	sts	0x0084, r1
  while(TCNT1<val){}
 698:	80 91 84 00 	lds	r24, 0x0084
 69c:	90 91 85 00 	lds	r25, 0x0085
 6a0:	8c 59       	subi	r24, 0x9C	; 156
 6a2:	94 40       	sbci	r25, 0x04	; 4
 6a4:	c8 f3       	brcs	.-14     	; 0x698 <__vector_5+0x40>
 6a6:	2a c0       	rjmp	.+84     	; 0x6fc <__vector_5+0xa4>
		  debug_tx_set(1);
		  sts=1;
		}
		debug_delay(DEBUG_RX_DELAY_TICKS);
      }
	  else if(i>=1 && i<=8){
 6a8:	82 2f       	mov	r24, r18
 6aa:	81 50       	subi	r24, 0x01	; 1
 6ac:	88 30       	cpi	r24, 0x08	; 8
 6ae:	d0 f4       	brcc	.+52     	; 0x6e4 <__vector_5+0x8c>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 6b0:	89 b1       	in	r24, 0x09	; 9
		  sts=1;
		}
		debug_delay(DEBUG_RX_DELAY_TICKS);
      }
	  else if(i>=1 && i<=8){
		val|=debug_rx_get();
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	55 e0       	ldi	r21, 0x05	; 5
 6b6:	96 95       	lsr	r25
 6b8:	87 95       	ror	r24
 6ba:	5a 95       	dec	r21
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <__vector_5+0x5e>
 6be:	81 70       	andi	r24, 0x01	; 1
 6c0:	38 2b       	or	r19, r24
void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 6c2:	5e 98       	cbi	0x0b, 6	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 6c4:	5e 9a       	sbi	0x0b, 6	; 11
      }
	  else if(i>=1 && i<=8){
		val|=debug_rx_get();
		debug_tx_set(0);
		debug_tx_set(1);
		if(i!=8){
 6c6:	28 30       	cpi	r18, 0x08	; 8
 6c8:	09 f0       	breq	.+2      	; 0x6cc <__vector_5+0x74>
		  val<<=1;
 6ca:	33 0f       	add	r19, r19
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 6cc:	10 92 85 00 	sts	0x0085, r1
 6d0:	10 92 84 00 	sts	0x0084, r1
  while(TCNT1<val){}
 6d4:	80 91 84 00 	lds	r24, 0x0084
 6d8:	90 91 85 00 	lds	r25, 0x0085
 6dc:	8c 59       	subi	r24, 0x9C	; 156
 6de:	94 40       	sbci	r25, 0x04	; 4
 6e0:	c8 f3       	brcs	.-14     	; 0x6d4 <__vector_5+0x7c>
 6e2:	0c c0       	rjmp	.+24     	; 0x6fc <__vector_5+0xa4>
		if(i!=8){
		  val<<=1;
		}
		debug_delay(DEBUG_RX_DELAY_TICKS);
	  }
	  else if(i==9){
 6e4:	29 30       	cpi	r18, 0x09	; 9
 6e6:	51 f4       	brne	.+20     	; 0x6fc <__vector_5+0xa4>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 6e8:	4d 9b       	sbis	0x09, 5	; 9
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <__vector_5+0xa0>
		}
		debug_delay(DEBUG_RX_DELAY_TICKS);
	  }
	  else if(i==9){
		if(debug_rx_get()==1){
		  sts&=1;
 6ec:	41 70       	andi	r20, 0x01	; 1
		  if(sts==1){
 6ee:	41 30       	cpi	r20, 0x01	; 1
 6f0:	19 f4       	brne	.+6      	; 0x6f8 <__vector_5+0xa0>
void debug_rx_byte_clear(void){
  debug.dr=0;
}

void debug_rx_byte_set(uint8_t val){
  debug.dr=val;
 6f2:	30 93 03 01 	sts	0x0103, r19
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <__vector_5+0xa4>
uint8_t debug_rx_byte(void){
  return debug.dr;
}

void debug_rx_byte_clear(void){
  debug.dr=0;
 6f8:	10 92 03 01 	sts	0x0103, r1

ISR(PCINT2_vect){
  if(debug_rx_get()==0){
	uint8_t val=0, sts=0;
	debug_delay(DEBUG_RX_HDELAY_TICKS);
	for(uint8_t i=0;i<10;i++){
 6fc:	2f 5f       	subi	r18, 0xFF	; 255
 6fe:	2a 30       	cpi	r18, 0x0A	; 10
 700:	19 f6       	brne	.-122    	; 0x688 <__vector_5+0x30>
 702:	09 c0       	rjmp	.+18     	; 0x716 <__vector_5+0xbe>
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 704:	10 92 85 00 	sts	0x0085, r1
 708:	10 92 84 00 	sts	0x0084, r1
 70c:	b3 cf       	rjmp	.-154    	; 0x674 <__vector_5+0x1c>
void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 70e:	5e 98       	cbi	0x0b, 6	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 710:	5e 9a       	sbi	0x0b, 6	; 11
 712:	41 e0       	ldi	r20, 0x01	; 1
 714:	bd cf       	rjmp	.-134    	; 0x690 <__vector_5+0x38>
		  debug_rx_byte_clear();
		}
	  }
	}
  }
}
 716:	9f 91       	pop	r25
 718:	8f 91       	pop	r24
 71a:	5f 91       	pop	r21
 71c:	4f 91       	pop	r20
 71e:	3f 91       	pop	r19
 720:	2f 91       	pop	r18
 722:	0f 90       	pop	r0
 724:	0f be       	out	0x3f, r0	; 63
 726:	0f 90       	pop	r0
 728:	1f 90       	pop	r1
 72a:	18 95       	reti

0000072c <__udivmodsi4>:
 72c:	a1 e2       	ldi	r26, 0x21	; 33
 72e:	1a 2e       	mov	r1, r26
 730:	aa 1b       	sub	r26, r26
 732:	bb 1b       	sub	r27, r27
 734:	fd 01       	movw	r30, r26
 736:	0d c0       	rjmp	.+26     	; 0x752 <__udivmodsi4_ep>

00000738 <__udivmodsi4_loop>:
 738:	aa 1f       	adc	r26, r26
 73a:	bb 1f       	adc	r27, r27
 73c:	ee 1f       	adc	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	a2 17       	cp	r26, r18
 742:	b3 07       	cpc	r27, r19
 744:	e4 07       	cpc	r30, r20
 746:	f5 07       	cpc	r31, r21
 748:	20 f0       	brcs	.+8      	; 0x752 <__udivmodsi4_ep>
 74a:	a2 1b       	sub	r26, r18
 74c:	b3 0b       	sbc	r27, r19
 74e:	e4 0b       	sbc	r30, r20
 750:	f5 0b       	sbc	r31, r21

00000752 <__udivmodsi4_ep>:
 752:	66 1f       	adc	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	1a 94       	dec	r1
 75c:	69 f7       	brne	.-38     	; 0x738 <__udivmodsi4_loop>
 75e:	60 95       	com	r22
 760:	70 95       	com	r23
 762:	80 95       	com	r24
 764:	90 95       	com	r25
 766:	9b 01       	movw	r18, r22
 768:	ac 01       	movw	r20, r24
 76a:	bd 01       	movw	r22, r26
 76c:	cf 01       	movw	r24, r30
 76e:	08 95       	ret

00000770 <_exit>:
 770:	f8 94       	cli

00000772 <__stop_program>:
 772:	ff cf       	rjmp	.-2      	; 0x772 <__stop_program>
