
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000065a  000006ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800128  00800128  00000716  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000037c  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000930  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cb  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000870  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d1  00000000  00000000  000025df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 33       	cpi	r26, 0x38	; 56
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 2b 03 	jmp	0x656	; 0x656 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "debug.h"

#define  OnDelay  10
#define  OffDelay 1000

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  
  debug_init();
  aa:	0e 94 fe 02 	call	0x5fc	; 0x5fc <debug_init>
  DDRD  |= (1<<4);
  ae:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  b0:	5c 98       	cbi	0x0b, 4	; 11
  sei();
  b2:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	cc e2       	ldi	r28, 0x2C	; 44
  b6:	d1 e0       	ldi	r29, 0x01	; 1
  
  
  while(1){
    
    PORTD |= (1<<4);
  b8:	5c 9a       	sbi	0x0b, 4	; 11
	debug_tx_text_nl("Hello World! -> Software Serial test");
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 b7 01 	call	0x36e	; 0x36e <debug_tx_text_nl>
	PORTD &=~(1<<4);
  c2:	5c 98       	cbi	0x0b, 4	; 11
  c4:	80 e1       	ldi	r24, 0x10	; 16
  c6:	97 e2       	ldi	r25, 0x27	; 39
  c8:	fe 01       	movw	r30, r28
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d0:	d9 f7       	brne	.-10     	; 0xc8 <main+0x22>
  d2:	f2 cf       	rjmp	.-28     	; 0xb8 <main+0x12>

000000d4 <debug_struct_init>:


debug_t debug;

void debug_struct_init(void){
  debug.error=0;
  d4:	10 92 28 01 	sts	0x0128, r1
  d8:	e9 e2       	ldi	r30, 0x29	; 41
  da:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
  dc:	11 92       	st	Z+, r1

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
  for(uint8_t i=0;i<8;i++){
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	e1 33       	cpi	r30, 0x31	; 49
  e2:	f8 07       	cpc	r31, r24
  e4:	d9 f7       	brne	.-10     	; 0xdc <debug_struct_init+0x8>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
  e6:	10 82       	st	Z, r1
  debug.count=0;
  e8:	12 82       	std	Z+2, r1	; 0x02
  ea:	11 82       	std	Z+1, r1	; 0x01
  debug.loop_counter=0;
  ec:	14 82       	std	Z+4, r1	; 0x04
  ee:	13 82       	std	Z+3, r1	; 0x03
  debug.loop_counter_sts=0;
  f0:	15 82       	std	Z+5, r1	; 0x05
  debug.reset_sts=0;
  f2:	16 82       	std	Z+6, r1	; 0x06
}
  f4:	08 95       	ret

000000f6 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
  f6:	14 bc       	out	0x24, r1	; 36
  TCCR0B=(1<<CS00);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	85 bd       	out	0x25, r24	; 37
  TIMSK0=0x00;
  fc:	10 92 6e 00 	sts	0x006E, r1
  TIFR0=0x00;
 100:	15 ba       	out	0x15, r1	; 21
  TCCR2B=(1<<CS20);
  TIMSK2=0x00;
  TIFR2=0x00;
  #define DEBUG_TIMER2_DELAY_TICKS DEBUG_TIMER_DELAY_TICKS
  #endif
}
 102:	08 95       	ret

00000104 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
 104:	3d 9a       	sbi	0x07, 5	; 7
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 106:	45 9a       	sbi	0x08, 5	; 8
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
 108:	50 98       	cbi	0x0a, 0	; 10
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
 10a:	58 9a       	sbi	0x0b, 0	; 11
}
 10c:	08 95       	ret

0000010e <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 10e:	45 9a       	sbi	0x08, 5	; 8
}
 110:	08 95       	ret

00000112 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 112:	45 98       	cbi	0x08, 5	; 8
}
 114:	08 95       	ret

00000116 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	11 f4       	brne	.+4      	; 0x11e <debug_tx_set+0x8>
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 11a:	45 9a       	sbi	0x08, 5	; 8
 11c:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 11e:	45 98       	cbi	0x08, 5	; 8
 120:	08 95       	ret

00000122 <debug_bit_delay>:
  #ifdef DEBUG_USE_DELAY
  _delay_us(DEBUG_BAUD_TIME);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 122:	16 bc       	out	0x26, r1	; 38
  while(TCNT0<DEBUG_TIMER0_DELAY_TICKS){}
 124:	86 b5       	in	r24, 0x26	; 38
 126:	85 35       	cpi	r24, 0x55	; 85
 128:	e8 f3       	brcs	.-6      	; 0x124 <debug_bit_delay+0x2>
  
  #ifdef DEBUG_USE_TIMER2
  TCNT2=0;
  while(TCNT2<DEBUG_TIMER2_DELAY_TICKS){}
  #endif
}
 12a:	08 95       	ret

0000012c <debug_tx_byte>:

void debug_tx_byte(uint8_t val){
 12c:	df 93       	push	r29
 12e:	cf 93       	push	r28
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	2a 97       	sbiw	r28, 0x0a	; 10
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 140:	fe 01       	movw	r30, r28
 142:	31 96       	adiw	r30, 0x01	; 1
 144:	9a e0       	ldi	r25, 0x0A	; 10
 146:	df 01       	movw	r26, r30
 148:	1d 92       	st	X+, r1
 14a:	9a 95       	dec	r25
 14c:	e9 f7       	brne	.-6      	; 0x148 <debug_tx_byte+0x1c>
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	9a 87       	std	Y+10, r25	; 0x0a
 152:	fe 01       	movw	r30, r28
 154:	32 96       	adiw	r30, 0x02	; 2
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 15a:	48 2f       	mov	r20, r24
 15c:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 15e:	61 e0       	ldi	r22, 0x01	; 1
}

void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 160:	ca 01       	movw	r24, r20
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <debug_tx_byte+0x3e>
 166:	95 95       	asr	r25
 168:	87 95       	ror	r24
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <debug_tx_byte+0x3a>
 16e:	80 ff       	sbrs	r24, 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <debug_tx_byte+0x4a>
	  buf[i+1]=1;
 172:	60 83       	st	Z, r22
 174:	01 c0       	rjmp	.+2      	; 0x178 <debug_tx_byte+0x4c>
	}else{
	  buf[i+1]=0;
 176:	10 82       	st	Z, r1
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	31 96       	adiw	r30, 0x01	; 1
  #endif
}

void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 17e:	28 30       	cpi	r18, 0x08	; 8
 180:	31 05       	cpc	r19, r1
 182:	71 f7       	brne	.-36     	; 0x160 <debug_tx_byte+0x34>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 184:	9f b7       	in	r25, 0x3f	; 63
  if(sreg & (1<<7)){
 186:	97 ff       	sbrs	r25, 7
 188:	01 c0       	rjmp	.+2      	; 0x18c <debug_tx_byte+0x60>
    cli();
 18a:	f8 94       	cli
 18c:	fe 01       	movw	r30, r28
 18e:	31 96       	adiw	r30, 0x01	; 1
  }
  for(uint8_t i=0;i<10;i++){
 190:	9e 01       	movw	r18, r28
 192:	25 5f       	subi	r18, 0xF5	; 245
 194:	3f 4f       	sbci	r19, 0xFF	; 255
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 196:	80 81       	ld	r24, Z
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	11 f4       	brne	.+4      	; 0x1a0 <debug_tx_byte+0x74>
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 19c:	45 9a       	sbi	0x08, 5	; 8
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <debug_tx_byte+0x76>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 1a0:	45 98       	cbi	0x08, 5	; 8
  #ifdef DEBUG_USE_DELAY
  _delay_us(DEBUG_BAUD_TIME);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 1a2:	16 bc       	out	0x26, r1	; 38
  while(TCNT0<DEBUG_TIMER0_DELAY_TICKS){}
 1a4:	86 b5       	in	r24, 0x26	; 38
 1a6:	85 35       	cpi	r24, 0x55	; 85
 1a8:	e8 f3       	brcs	.-6      	; 0x1a4 <debug_tx_byte+0x78>
 1aa:	31 96       	adiw	r30, 0x01	; 1
  }
  uint8_t sreg=SREG;
  if(sreg & (1<<7)){
    cli();
  }
  for(uint8_t i=0;i<10;i++){
 1ac:	e2 17       	cp	r30, r18
 1ae:	f3 07       	cpc	r31, r19
 1b0:	91 f7       	brne	.-28     	; 0x196 <debug_tx_byte+0x6a>
    debug_tx_set(buf[i]);
	debug_bit_delay();
  }
  if(sreg & (1<<7)){
 1b2:	97 ff       	sbrs	r25, 7
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <debug_tx_byte+0x8c>
    sei();
 1b6:	78 94       	sei
  }
}
 1b8:	2a 96       	adiw	r28, 0x0a	; 10
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <debug_tx_hex>:

void debug_tx_hex(uint32_t val){
 1ca:	bf 92       	push	r11
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	7b 01       	movw	r14, r22
 1de:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	e8 16       	cp	r14, r24
 1e4:	f1 04       	cpc	r15, r1
 1e6:	01 05       	cpc	r16, r1
 1e8:	11 05       	cpc	r17, r1
 1ea:	09 f0       	breq	.+2      	; 0x1ee <debug_tx_hex+0x24>
 1ec:	30 f4       	brcc	.+12     	; 0x1fa <debug_tx_hex+0x30>
 1ee:	22 e0       	ldi	r18, 0x02	; 2
 1f0:	c2 2e       	mov	r12, r18
 1f2:	d1 2c       	mov	r13, r1
 1f4:	c8 e0       	ldi	r28, 0x08	; 8
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	14 c0       	rjmp	.+40     	; 0x222 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	e8 16       	cp	r14, r24
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	f8 06       	cpc	r15, r24
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 07       	cpc	r16, r24
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	18 07       	cpc	r17, r24
 20a:	30 f0       	brcs	.+12     	; 0x218 <debug_tx_hex+0x4e>
 20c:	98 e0       	ldi	r25, 0x08	; 8
 20e:	c9 2e       	mov	r12, r25
 210:	d1 2c       	mov	r13, r1
 212:	c0 e2       	ldi	r28, 0x20	; 32
 214:	d0 e0       	ldi	r29, 0x00	; 0
 216:	05 c0       	rjmp	.+10     	; 0x222 <debug_tx_hex+0x58>
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	c8 2e       	mov	r12, r24
 21c:	d1 2c       	mov	r13, r1
 21e:	c0 e1       	ldi	r28, 0x10	; 16
 220:	d0 e0       	ldi	r29, 0x00	; 0
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
  debug_tx_byte('x');
 228:	88 e7       	ldi	r24, 0x78	; 120
 22a:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
 22e:	bb 24       	eor	r11, r11
 230:	17 c0       	rjmp	.+46     	; 0x260 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 232:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 234:	d8 01       	movw	r26, r16
 236:	c7 01       	movw	r24, r14
 238:	0c 2e       	mov	r0, r28
 23a:	04 c0       	rjmp	.+8      	; 0x244 <debug_tx_hex+0x7a>
 23c:	b6 95       	lsr	r27
 23e:	a7 95       	ror	r26
 240:	97 95       	ror	r25
 242:	87 95       	ror	r24
 244:	0a 94       	dec	r0
 246:	d2 f7       	brpl	.-12     	; 0x23c <debug_tx_hex+0x72>
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 24e:	8a 30       	cpi	r24, 0x0A	; 10
 250:	91 05       	cpc	r25, r1
 252:	10 f0       	brcs	.+4      	; 0x258 <debug_tx_hex+0x8e>
	    hex_digit+=55;
 254:	c7 96       	adiw	r24, 0x37	; 55
 256:	01 c0       	rjmp	.+2      	; 0x25a <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
 258:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
 25a:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 25e:	b3 94       	inc	r11
 260:	8b 2d       	mov	r24, r11
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	8c 15       	cp	r24, r12
 266:	9d 05       	cpc	r25, r13
 268:	20 f3       	brcs	.-56     	; 0x232 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	bf 90       	pop	r11
 27c:	08 95       	ret

0000027e <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
 27e:	af 92       	push	r10
 280:	bf 92       	push	r11
 282:	cf 92       	push	r12
 284:	df 92       	push	r13
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	7b 01       	movw	r14, r22
 294:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 296:	6f 3f       	cpi	r22, 0xFF	; 255
 298:	71 05       	cpc	r23, r1
 29a:	81 05       	cpc	r24, r1
 29c:	91 05       	cpc	r25, r1
 29e:	09 f0       	breq	.+2      	; 0x2a2 <debug_tx_bin+0x24>
 2a0:	18 f4       	brcc	.+6      	; 0x2a8 <debug_tx_bin+0x2a>
 2a2:	57 e0       	ldi	r21, 0x07	; 7
 2a4:	d5 2e       	mov	r13, r21
 2a6:	0d c0       	rjmp	.+26     	; 0x2c2 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 2a8:	60 30       	cpi	r22, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	73 07       	cpc	r23, r19
 2ae:	31 e0       	ldi	r19, 0x01	; 1
 2b0:	83 07       	cpc	r24, r19
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	93 07       	cpc	r25, r19
 2b6:	18 f0       	brcs	.+6      	; 0x2be <debug_tx_bin+0x40>
 2b8:	4f e1       	ldi	r20, 0x1F	; 31
 2ba:	d4 2e       	mov	r13, r20
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <debug_tx_bin+0x44>
 2be:	3f e0       	ldi	r19, 0x0F	; 15
 2c0:	d3 2e       	mov	r13, r19
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
 2c2:	80 e3       	ldi	r24, 0x30	; 48
 2c4:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
  debug_tx_byte('b');
 2c8:	82 e6       	ldi	r24, 0x62	; 98
 2ca:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
 2d2:	cd 2c       	mov	r12, r13
 2d4:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 2d6:	56 01       	movw	r10, r12
 2d8:	08 94       	sec
 2da:	a1 1c       	adc	r10, r1
 2dc:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 2de:	c6 01       	movw	r24, r12
 2e0:	8c 1b       	sub	r24, r28
 2e2:	9d 0b       	sbc	r25, r29
 2e4:	a8 01       	movw	r20, r16
 2e6:	97 01       	movw	r18, r14
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <debug_tx_bin+0x74>
 2ea:	56 95       	lsr	r21
 2ec:	47 95       	ror	r20
 2ee:	37 95       	ror	r19
 2f0:	27 95       	ror	r18
 2f2:	8a 95       	dec	r24
 2f4:	d2 f7       	brpl	.-12     	; 0x2ea <debug_tx_bin+0x6c>
 2f6:	da 01       	movw	r26, r20
 2f8:	c9 01       	movw	r24, r18
 2fa:	81 70       	andi	r24, 0x01	; 1
 2fc:	90 70       	andi	r25, 0x00	; 0
 2fe:	89 2b       	or	r24, r25
 300:	11 f0       	breq	.+4      	; 0x306 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
 302:	81 e3       	ldi	r24, 0x31	; 49
 304:	01 c0       	rjmp	.+2      	; 0x308 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
 306:	80 e3       	ldi	r24, 0x30	; 48
 308:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
 30c:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 30e:	ca 15       	cp	r28, r10
 310:	db 05       	cpc	r29, r11
 312:	29 f7       	brne	.-54     	; 0x2de <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	df 90       	pop	r13
 322:	cf 90       	pop	r12
 324:	bf 90       	pop	r11
 326:	af 90       	pop	r10
 328:	08 95       	ret

0000032a <debug_tx_nl>:

void debug_tx_nl(void){
  debug_tx_byte('\r');
 32a:	8d e0       	ldi	r24, 0x0D	; 13
 32c:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
  debug_tx_byte('\n');
 330:	8a e0       	ldi	r24, 0x0A	; 10
 332:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
}
 336:	08 95       	ret

00000338 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
 338:	80 e2       	ldi	r24, 0x20	; 32
 33a:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
}
 33e:	08 95       	ret

00000340 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
 340:	8c e2       	ldi	r24, 0x2C	; 44
 342:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
}
 346:	08 95       	ret

00000348 <debug_tx_text>:

void debug_tx_text(char *str){
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ec 01       	movw	r28, r24
 350:	10 e0       	ldi	r17, 0x00	; 0
 352:	03 c0       	rjmp	.+6      	; 0x35a <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
 354:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
        i++;
 358:	1f 5f       	subi	r17, 0xFF	; 255
  debug_tx_byte(',');
}

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 35a:	fe 01       	movw	r30, r28
 35c:	e1 0f       	add	r30, r17
 35e:	f1 1d       	adc	r31, r1
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	b9 f7       	brne	.-18     	; 0x354 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	08 95       	ret

0000036e <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
 36e:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
  debug_tx_nl();
 372:	0e 94 95 01 	call	0x32a	; 0x32a <debug_tx_nl>
}
 376:	08 95       	ret

00000378 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
 378:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
  debug_tx_sp();
 37c:	0e 94 9c 01 	call	0x338	; 0x338 <debug_tx_sp>
}
 380:	08 95       	ret

00000382 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
 382:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
  debug_tx_cm();
 386:	0e 94 a0 01 	call	0x340	; 0x340 <debug_tx_cm>
}
 38a:	08 95       	ret

0000038c <debug_determine_digit_numbers>:

void debug_determine_digit_numbers(uint32_t num){
 38c:	bf 92       	push	r11
 38e:	cf 92       	push	r12
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	6b 01       	movw	r12, r22
 39c:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 39e:	61 15       	cp	r22, r1
 3a0:	71 05       	cpc	r23, r1
 3a2:	81 05       	cpc	r24, r1
 3a4:	91 05       	cpc	r25, r1
 3a6:	31 f4       	brne	.+12     	; 0x3b4 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
 3a8:	10 92 29 01 	sts	0x0129, r1
    debug.input_num_digits=1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 31 01 	sts	0x0131, r24
 3b2:	23 c0       	rjmp	.+70     	; 0x3fa <debug_determine_digit_numbers+0x6e>
 3b4:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 3b6:	0b 2d       	mov	r16, r11
 3b8:	10 e0       	ldi	r17, 0x00	; 0
 3ba:	08 5d       	subi	r16, 0xD8	; 216
 3bc:	1e 4f       	sbci	r17, 0xFE	; 254
 3be:	c7 01       	movw	r24, r14
 3c0:	b6 01       	movw	r22, r12
 3c2:	2a e0       	ldi	r18, 0x0A	; 10
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodsi4>
 3ce:	f8 01       	movw	r30, r16
 3d0:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 3d2:	c7 01       	movw	r24, r14
 3d4:	b6 01       	movw	r22, r12
 3d6:	2a e0       	ldi	r18, 0x0A	; 10
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodsi4>
 3e2:	c9 01       	movw	r24, r18
 3e4:	da 01       	movw	r26, r20
 3e6:	6c 01       	movw	r12, r24
 3e8:	7d 01       	movw	r14, r26
      i++;
 3ea:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 3ec:	c1 14       	cp	r12, r1
 3ee:	d1 04       	cpc	r13, r1
 3f0:	e1 04       	cpc	r14, r1
 3f2:	f1 04       	cpc	r15, r1
 3f4:	01 f7       	brne	.-64     	; 0x3b6 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 3f6:	b0 92 31 01 	sts	0x0131, r11
  }
}
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	bf 90       	pop	r11
 408:	08 95       	ret

0000040a <debug_tx_number_digits>:

void debug_tx_number_digits(void){
 40a:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 40c:	10 91 31 01 	lds	r17, 0x0131
 410:	09 c0       	rjmp	.+18     	; 0x424 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 412:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 414:	e1 2f       	mov	r30, r17
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	e8 5d       	subi	r30, 0xD8	; 216
 41a:	fe 4f       	sbci	r31, 0xFE	; 254
 41c:	81 81       	ldd	r24, Z+1	; 0x01
    temp+=48;
    debug_tx_byte(temp);
 41e:	80 5d       	subi	r24, 0xD0	; 208
 420:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 424:	11 23       	and	r17, r17
 426:	a9 f7       	brne	.-22     	; 0x412 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
 428:	1f 91       	pop	r17
 42a:	08 95       	ret

0000042c <debug_tx_number>:

void debug_tx_number(int32_t num){
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	7b 01       	movw	r14, r22
 436:	8c 01       	movw	r16, r24
  if(num<0){
 438:	97 ff       	sbrs	r25, 7
 43a:	0b c0       	rjmp	.+22     	; 0x452 <debug_tx_number+0x26>
    debug_tx_byte('-');
 43c:	8d e2       	ldi	r24, 0x2D	; 45
 43e:	0e 94 96 00 	call	0x12c	; 0x12c <debug_tx_byte>
	num=-num;
 442:	10 95       	com	r17
 444:	00 95       	com	r16
 446:	f0 94       	com	r15
 448:	e0 94       	com	r14
 44a:	e1 1c       	adc	r14, r1
 44c:	f1 1c       	adc	r15, r1
 44e:	01 1d       	adc	r16, r1
 450:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
 452:	c8 01       	movw	r24, r16
 454:	b7 01       	movw	r22, r14
 456:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_determine_digit_numbers>
  debug_tx_number_digits();
 45a:	0e 94 05 02 	call	0x40a	; 0x40a <debug_tx_number_digits>
}
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	08 95       	ret

00000468 <debug_tx_number_nl>:

void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
 468:	0e 94 16 02 	call	0x42c	; 0x42c <debug_tx_number>
  debug_tx_nl();
 46c:	0e 94 95 01 	call	0x32a	; 0x32a <debug_tx_nl>
}
 470:	08 95       	ret

00000472 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
 472:	0e 94 16 02 	call	0x42c	; 0x42c <debug_tx_number>
  debug_tx_sp();
 476:	0e 94 9c 01 	call	0x338	; 0x338 <debug_tx_sp>
}
 47a:	08 95       	ret

0000047c <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
 47c:	0e 94 16 02 	call	0x42c	; 0x42c <debug_tx_number>
  debug_tx_text(",");
 480:	85 e2       	ldi	r24, 0x25	; 37
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
}
 488:	08 95       	ret

0000048a <debug_tx_number_hex_nl>:

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
 48a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <debug_tx_hex>
  debug_tx_nl();
 48e:	0e 94 95 01 	call	0x32a	; 0x32a <debug_tx_nl>
}
 492:	08 95       	ret

00000494 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
 494:	0e 94 e5 00 	call	0x1ca	; 0x1ca <debug_tx_hex>
  debug_tx_sp();
 498:	0e 94 9c 01 	call	0x338	; 0x338 <debug_tx_sp>
}
 49c:	08 95       	ret

0000049e <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
 49e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <debug_tx_hex>
  debug_tx_text(",");
 4a2:	85 e2       	ldi	r24, 0x25	; 37
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
}
 4aa:	08 95       	ret

000004ac <debug_tx_parameter_nl>:

void debug_tx_parameter_nl(char *name, int32_t num){
 4ac:	ef 92       	push	r14
 4ae:	ff 92       	push	r15
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	7a 01       	movw	r14, r20
 4b6:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 4b8:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
  debug_tx_sp();
 4bc:	0e 94 9c 01 	call	0x338	; 0x338 <debug_tx_sp>
  debug_tx_number_nl(num);
 4c0:	c8 01       	movw	r24, r16
 4c2:	b7 01       	movw	r22, r14
 4c4:	0e 94 34 02 	call	0x468	; 0x468 <debug_tx_number_nl>
}
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	08 95       	ret

000004d2 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
 4d2:	ef 92       	push	r14
 4d4:	ff 92       	push	r15
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	7a 01       	movw	r14, r20
 4dc:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 4de:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
  debug_tx_sp();
 4e2:	0e 94 9c 01 	call	0x338	; 0x338 <debug_tx_sp>
  debug_tx_number_sp(num);
 4e6:	c8 01       	movw	r24, r16
 4e8:	b7 01       	movw	r22, r14
 4ea:	0e 94 39 02 	call	0x472	; 0x472 <debug_tx_number_sp>
}
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	08 95       	ret

000004f8 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	7a 01       	movw	r14, r20
 502:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 504:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
  debug_tx_sp();
 508:	0e 94 9c 01 	call	0x338	; 0x338 <debug_tx_sp>
  debug_tx_number_cm(num);
 50c:	c8 01       	movw	r24, r16
 50e:	b7 01       	movw	r22, r14
 510:	0e 94 3e 02 	call	0x47c	; 0x47c <debug_tx_number_cm>
}
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	08 95       	ret

0000051e <debug_tx_parameter_hex_nl>:

void debug_tx_parameter_hex_nl(char *name, int32_t num){
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	7a 01       	movw	r14, r20
 528:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 52a:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
  debug_tx_sp();
 52e:	0e 94 9c 01 	call	0x338	; 0x338 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
 532:	c8 01       	movw	r24, r16
 534:	b7 01       	movw	r22, r14
 536:	0e 94 45 02 	call	0x48a	; 0x48a <debug_tx_number_hex_nl>
}
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	08 95       	ret

00000544 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
 544:	ef 92       	push	r14
 546:	ff 92       	push	r15
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	7a 01       	movw	r14, r20
 54e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 550:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
  debug_tx_sp();
 554:	0e 94 9c 01 	call	0x338	; 0x338 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
 558:	c8 01       	movw	r24, r16
 55a:	b7 01       	movw	r22, r14
 55c:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_number_hex_sp>
}
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	08 95       	ret

0000056a <debug_tx_parameter_hex_cm>:

void debug_tx_parameter_hex_cm(char *name, int32_t num){
 56a:	ef 92       	push	r14
 56c:	ff 92       	push	r15
 56e:	0f 93       	push	r16
 570:	1f 93       	push	r17
 572:	7a 01       	movw	r14, r20
 574:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 576:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_text>
  debug_tx_sp();
 57a:	0e 94 9c 01 	call	0x338	; 0x338 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
 57e:	c8 01       	movw	r24, r16
 580:	b7 01       	movw	r22, r14
 582:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_number_hex_cm>
}
 586:	1f 91       	pop	r17
 588:	0f 91       	pop	r16
 58a:	ff 90       	pop	r15
 58c:	ef 90       	pop	r14
 58e:	08 95       	ret

00000590 <debug_loop_counter_inc>:

void debug_loop_counter_inc(void){
  debug.loop_counter++;
 590:	80 91 34 01 	lds	r24, 0x0134
 594:	90 91 35 01 	lds	r25, 0x0135
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	90 93 35 01 	sts	0x0135, r25
 59e:	80 93 34 01 	sts	0x0134, r24
  if(debug.loop_counter>DEBUG_LP_CNT_LMT){
 5a2:	85 36       	cpi	r24, 0x65	; 101
 5a4:	91 05       	cpc	r25, r1
 5a6:	b8 f0       	brcs	.+46     	; 0x5d6 <debug_loop_counter_inc+0x46>
    debug.count++;
 5a8:	80 91 32 01 	lds	r24, 0x0132
 5ac:	90 91 33 01 	lds	r25, 0x0133
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	90 93 33 01 	sts	0x0133, r25
 5b6:	80 93 32 01 	sts	0x0132, r24
	if(debug.count>65000){
 5ba:	89 5e       	subi	r24, 0xE9	; 233
 5bc:	9d 4f       	sbci	r25, 0xFD	; 253
 5be:	20 f0       	brcs	.+8      	; 0x5c8 <debug_loop_counter_inc+0x38>
	  debug.count=0;
 5c0:	10 92 33 01 	sts	0x0133, r1
 5c4:	10 92 32 01 	sts	0x0132, r1
	}
    debug.loop_counter=0;
 5c8:	10 92 35 01 	sts	0x0135, r1
 5cc:	10 92 34 01 	sts	0x0134, r1
	debug.loop_counter_sts=1;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	80 93 36 01 	sts	0x0136, r24
 5d6:	08 95       	ret

000005d8 <debug_get_count>:
  }
}

uint16_t debug_get_count(void){
  return debug.count;
}
 5d8:	80 91 32 01 	lds	r24, 0x0132
 5dc:	90 91 33 01 	lds	r25, 0x0133
 5e0:	08 95       	ret

000005e2 <debug_get_loop_counter>:

uint16_t debug_get_loop_counter(void){
  return debug.loop_counter;
}
 5e2:	80 91 34 01 	lds	r24, 0x0134
 5e6:	90 91 35 01 	lds	r25, 0x0135
 5ea:	08 95       	ret

000005ec <debug_get_loop_counter_ovf>:

uint8_t debug_get_loop_counter_ovf(void){
  if(debug.loop_counter_sts){
 5ec:	80 91 36 01 	lds	r24, 0x0136
 5f0:	88 23       	and	r24, r24
 5f2:	19 f0       	breq	.+6      	; 0x5fa <debug_get_loop_counter_ovf+0xe>
    debug.loop_counter_sts=0;
 5f4:	10 92 36 01 	sts	0x0136, r1
 5f8:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
  }else{
    return 0;
  }
}
 5fa:	08 95       	ret

000005fc <debug_init>:


void debug_init(void){
  debug_struct_init();
 5fc:	0e 94 6a 00 	call	0xd4	; 0xd4 <debug_struct_init>
  debug.reset_sts=0;
}

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
 600:	14 bc       	out	0x24, r1	; 36
  TCCR0B=(1<<CS00);
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	85 bd       	out	0x25, r24	; 37
  TIMSK0=0x00;
 606:	10 92 6e 00 	sts	0x006E, r1
  TIFR0=0x00;
 60a:	15 ba       	out	0x15, r1	; 21


void debug_init(void){
  debug_struct_init();
  debug_timings_init();
  debug_gpio_init();
 60c:	0e 94 82 00 	call	0x104	; 0x104 <debug_gpio_init>
}
 610:	08 95       	ret

00000612 <__udivmodsi4>:
 612:	a1 e2       	ldi	r26, 0x21	; 33
 614:	1a 2e       	mov	r1, r26
 616:	aa 1b       	sub	r26, r26
 618:	bb 1b       	sub	r27, r27
 61a:	fd 01       	movw	r30, r26
 61c:	0d c0       	rjmp	.+26     	; 0x638 <__udivmodsi4_ep>

0000061e <__udivmodsi4_loop>:
 61e:	aa 1f       	adc	r26, r26
 620:	bb 1f       	adc	r27, r27
 622:	ee 1f       	adc	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	a2 17       	cp	r26, r18
 628:	b3 07       	cpc	r27, r19
 62a:	e4 07       	cpc	r30, r20
 62c:	f5 07       	cpc	r31, r21
 62e:	20 f0       	brcs	.+8      	; 0x638 <__udivmodsi4_ep>
 630:	a2 1b       	sub	r26, r18
 632:	b3 0b       	sbc	r27, r19
 634:	e4 0b       	sbc	r30, r20
 636:	f5 0b       	sbc	r31, r21

00000638 <__udivmodsi4_ep>:
 638:	66 1f       	adc	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	1a 94       	dec	r1
 642:	69 f7       	brne	.-38     	; 0x61e <__udivmodsi4_loop>
 644:	60 95       	com	r22
 646:	70 95       	com	r23
 648:	80 95       	com	r24
 64a:	90 95       	com	r25
 64c:	9b 01       	movw	r18, r22
 64e:	ac 01       	movw	r20, r24
 650:	bd 01       	movw	r22, r26
 652:	cf 01       	movw	r24, r30
 654:	08 95       	ret

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
