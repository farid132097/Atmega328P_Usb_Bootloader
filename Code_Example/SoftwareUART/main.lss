
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000870  00000904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000870  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800114  00800114  00000918  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000497  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d4f  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c4  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c1e  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00002b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000521  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065c  00000000  00000000  00003381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000039dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 34       	cpi	r26, 0x41	; 65
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 36 04 	jmp	0x86c	; 0x86c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "debug.h"

#define  OnDelay  10
#define  OffDelay 1000

int main(void){
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  
  debug_init();
  ac:	0e 94 bc 03 	call	0x778	; 0x778 <debug_init>
  sei();
  b0:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	cc e2       	ldi	r28, 0x2C	; 44
  b4:	d1 e0       	ldi	r29, 0x01	; 1
  
  
  while(1){
    
	if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
  b6:	0e 94 b9 03 	call	0x772	; 0x772 <debug_databsy_get>
  ba:	88 23       	and	r24, r24
  bc:	91 f4       	brne	.+36     	; 0xe2 <main+0x3c>
  be:	0e 94 a9 03 	call	0x752	; 0x752 <debug_buf_index_get>
  c2:	88 23       	and	r24, r24
  c4:	71 f0       	breq	.+28     	; 0xe2 <main+0x3c>
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <main+0x30>
	  for(uint8_t i=0;i<debug_buf_index_get();i++){
	    debug_tx_byte(debug_buf_get(i));
  ca:	81 2f       	mov	r24, r17
  cc:	0e 94 a3 03 	call	0x746	; 0x746 <debug_buf_get>
  d0:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
  
  
  while(1){
    
	if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
	  for(uint8_t i=0;i<debug_buf_index_get();i++){
  d4:	1f 5f       	subi	r17, 0xFF	; 255
  d6:	0e 94 a9 03 	call	0x752	; 0x752 <debug_buf_index_get>
  da:	18 17       	cp	r17, r24
  dc:	b0 f3       	brcs	.-20     	; 0xca <main+0x24>
	    debug_tx_byte(debug_buf_get(i));
	  }
	  debug_flush_buf();
  de:	0e 94 ac 03 	call	0x758	; 0x758 <debug_flush_buf>
  e2:	ce 01       	movw	r24, r28
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x3e>
  e8:	e6 cf       	rjmp	.-52     	; 0xb6 <main+0x10>

000000ea <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
  ea:	10 92 14 01 	sts	0x0114, r1
  debug.datareg=0;
  ee:	10 92 15 01 	sts	0x0115, r1
  debug.databsy=1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 16 01 	sts	0x0116, r24
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  fc:	fc 01       	movw	r30, r24
  fe:	ec 5e       	subi	r30, 0xEC	; 236
 100:	fe 4f       	sbci	r31, 0xFE	; 254
 102:	13 82       	std	Z+3, r1	; 0x03
 104:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 106:	80 32       	cpi	r24, 0x20	; 32
 108:	91 05       	cpc	r25, r1
 10a:	c1 f7       	brne	.-16     	; 0xfc <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 10c:	10 92 37 01 	sts	0x0137, r1
 110:	e8 e3       	ldi	r30, 0x38	; 56
 112:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
 114:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	e0 34       	cpi	r30, 0x40	; 64
 11a:	f8 07       	cpc	r31, r24
 11c:	d9 f7       	brne	.-10     	; 0x114 <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
 11e:	10 82       	st	Z, r1
}
 120:	08 95       	ret

00000122 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
 122:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
 124:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
 126:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT1_vect
  #endif
  
  #ifdef DEBUG_RX_DDRD
  PCICR |=(1<<PCIE2);
 12e:	e8 e6       	ldi	r30, 0x68	; 104
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 60       	ori	r24, 0x04	; 4
 136:	80 83       	st	Z, r24
  PCMSK2|=(1<<DEBUG_RX_bp);
 138:	ed e6       	ldi	r30, 0x6D	; 109
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF2);
 142:	da 9a       	sbi	0x1b, 2	; 27
  sei();
 144:	78 94       	sei
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
 146:	08 95       	ret

00000148 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
 14c:	ee e6       	ldi	r30, 0x6E	; 110
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	10 82       	st	Z, r1
  TCNT0 =10;
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
 15e:	80 83       	st	Z, r24
  TCNT2 =10;
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #endif
}
 160:	08 95       	ret

00000162 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 162:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 166:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 168:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
 16a:	08 95       	ret

0000016c <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
 16c:	56 9a       	sbi	0x0a, 6	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 16e:	5e 9a       	sbi	0x0b, 6	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
 170:	55 98       	cbi	0x0a, 5	; 10
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
 172:	5d 9a       	sbi	0x0b, 5	; 11
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
 174:	51 9a       	sbi	0x0a, 1	; 10
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
 176:	59 98       	cbi	0x0b, 1	; 11
  #endif
}
 178:	08 95       	ret

0000017a <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 17a:	5e 9a       	sbi	0x0b, 6	; 11
}
 17c:	08 95       	ret

0000017e <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 17e:	5e 98       	cbi	0x0b, 6	; 11
}
 180:	08 95       	ret

00000182 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	11 f4       	brne	.+4      	; 0x18a <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 186:	5e 9a       	sbi	0x0b, 6	; 11
 188:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 18a:	5e 98       	cbi	0x0b, 6	; 11
 18c:	08 95       	ret

0000018e <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 18e:	89 b1       	in	r24, 0x09	; 9
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	25 e0       	ldi	r18, 0x05	; 5
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	2a 95       	dec	r18
 19a:	e1 f7       	brne	.-8      	; 0x194 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
 19c:	81 70       	andi	r24, 0x01	; 1
 19e:	08 95       	ret

000001a0 <debug_delay>:

void debug_delay(uint16_t val){
 1a0:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 1a2:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	85 bd       	out	0x25, r24	; 37
	#endif
  while(TCNT0<val){}
 1a8:	86 b5       	in	r24, 0x26	; 38
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	82 17       	cp	r24, r18
 1ae:	93 07       	cpc	r25, r19
 1b0:	d8 f3       	brcs	.-10     	; 0x1a8 <debug_delay+0x8>
  TCCR0B=0;
 1b2:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
 1b4:	08 95       	ret

000001b6 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
 1b6:	20 91 0e 01 	lds	r18, 0x010E
 1ba:	30 91 0f 01 	lds	r19, 0x010F
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 1be:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	85 bd       	out	0x25, r24	; 37
	#endif
  while(TCNT0<val){}
 1c4:	86 b5       	in	r24, 0x26	; 38
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	82 17       	cp	r24, r18
 1ca:	93 07       	cpc	r25, r19
 1cc:	d8 f3       	brcs	.-10     	; 0x1c4 <debug_delay_index_0+0xe>
  TCCR0B=0;
 1ce:	15 bc       	out	0x25, r1	; 37
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
 1d0:	08 95       	ret

000001d2 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
 1d2:	20 91 10 01 	lds	r18, 0x0110
 1d6:	30 91 11 01 	lds	r19, 0x0111
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 1da:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	85 bd       	out	0x25, r24	; 37
	#endif
  while(TCNT0<val){}
 1e0:	86 b5       	in	r24, 0x26	; 38
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	82 17       	cp	r24, r18
 1e6:	93 07       	cpc	r25, r19
 1e8:	d8 f3       	brcs	.-10     	; 0x1e0 <debug_delay_index_1+0xe>
  TCCR0B=0;
 1ea:	15 bc       	out	0x25, r1	; 37
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
 1ec:	08 95       	ret

000001ee <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
 1ee:	20 91 12 01 	lds	r18, 0x0112
 1f2:	30 91 13 01 	lds	r19, 0x0113
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 1f6:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	85 bd       	out	0x25, r24	; 37
	#endif
  while(TCNT0<val){}
 1fc:	86 b5       	in	r24, 0x26	; 38
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	82 17       	cp	r24, r18
 202:	93 07       	cpc	r25, r19
 204:	d8 f3       	brcs	.-10     	; 0x1fc <debug_delay_index_2+0xe>
  TCCR0B=0;
 206:	15 bc       	out	0x25, r1	; 37
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
 208:	08 95       	ret

0000020a <debug_tx_byte>:


void debug_tx_byte(uint8_t val){
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	2a 97       	sbiw	r28, 0x0a	; 10
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 21e:	fe 01       	movw	r30, r28
 220:	31 96       	adiw	r30, 0x01	; 1
 222:	9a e0       	ldi	r25, 0x0A	; 10
 224:	df 01       	movw	r26, r30
 226:	1d 92       	st	X+, r1
 228:	9a 95       	dec	r25
 22a:	e9 f7       	brne	.-6      	; 0x226 <debug_tx_byte+0x1c>
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	9a 87       	std	Y+10, r25	; 0x0a
 230:	fe 01       	movw	r30, r28
 232:	32 96       	adiw	r30, 0x02	; 2
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 238:	48 2f       	mov	r20, r24
 23a:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 23c:	61 e0       	ldi	r22, 0x01	; 1


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 23e:	ca 01       	movw	r24, r20
 240:	02 2e       	mov	r0, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <debug_tx_byte+0x3e>
 244:	95 95       	asr	r25
 246:	87 95       	ror	r24
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <debug_tx_byte+0x3a>
 24c:	80 ff       	sbrs	r24, 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <debug_tx_byte+0x4a>
	  buf[i+1]=1;
 250:	60 83       	st	Z, r22
 252:	01 c0       	rjmp	.+2      	; 0x256 <debug_tx_byte+0x4c>
	}else{
	  buf[i+1]=0;
 254:	10 82       	st	Z, r1
 256:	2f 5f       	subi	r18, 0xFF	; 255
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	31 96       	adiw	r30, 0x01	; 1
}


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 25c:	28 30       	cpi	r18, 0x08	; 8
 25e:	31 05       	cpc	r19, r1
 260:	71 f7       	brne	.-36     	; 0x23e <debug_tx_byte+0x34>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 262:	6f b7       	in	r22, 0x3f	; 63
  cli();
 264:	f8 94       	cli
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
 266:	20 91 0e 01 	lds	r18, 0x010E
 26a:	30 91 0f 01 	lds	r19, 0x010F
 26e:	fe 01       	movw	r30, r28
 270:	31 96       	adiw	r30, 0x01	; 1
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
 272:	72 e0       	ldi	r23, 0x02	; 2
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 274:	ae 01       	movw	r20, r28
 276:	45 5f       	subi	r20, 0xF5	; 245
 278:	5f 4f       	sbci	r21, 0xFF	; 255
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 27a:	80 81       	ld	r24, Z
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	11 f4       	brne	.+4      	; 0x284 <debug_tx_byte+0x7a>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 280:	5e 9a       	sbi	0x0b, 6	; 11
 282:	01 c0       	rjmp	.+2      	; 0x286 <debug_tx_byte+0x7c>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 284:	5e 98       	cbi	0x0b, 6	; 11
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 286:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
 288:	75 bd       	out	0x25, r23	; 37
	#endif
  while(TCNT0<val){}
 28a:	86 b5       	in	r24, 0x26	; 38
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	82 17       	cp	r24, r18
 290:	93 07       	cpc	r25, r19
 292:	d8 f3       	brcs	.-10     	; 0x28a <debug_tx_byte+0x80>
  TCCR0B=0;
 294:	15 bc       	out	0x25, r1	; 37
 296:	31 96       	adiw	r30, 0x01	; 1
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 298:	e4 17       	cp	r30, r20
 29a:	f5 07       	cpc	r31, r21
 29c:	71 f7       	brne	.-36     	; 0x27a <debug_tx_byte+0x70>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
 29e:	6f bf       	out	0x3f, r22	; 63
}
 2a0:	2a 96       	adiw	r28, 0x0a	; 10
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
 2ac:	cf 91       	pop	r28
 2ae:	df 91       	pop	r29
 2b0:	08 95       	ret

000002b2 <debug_rx_byte>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 2b2:	4d 9b       	sbis	0x09, 5	; 9
 2b4:	4b c0       	rjmp	.+150    	; 0x34c <debug_rx_byte+0x9a>
		  debug.error=0x02;
		}
	  }
	}
  }else{
    debug.error=0x03;
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	80 93 14 01 	sts	0x0114, r24
 2bc:	44 c0       	rjmp	.+136    	; 0x346 <debug_rx_byte+0x94>
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
	#endif
  while(TCNT0<val){}
 2be:	86 b5       	in	r24, 0x26	; 38
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	82 17       	cp	r24, r18
 2c4:	93 07       	cpc	r25, r19
 2c6:	d8 f3       	brcs	.-10     	; 0x2be <debug_rx_byte+0xc>
  TCCR0B=0;
 2c8:	15 bc       	out	0x25, r1	; 37
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
 2ca:	60 91 10 01 	lds	r22, 0x0110
 2ce:	70 91 11 01 	lds	r23, 0x0111
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	20 e0       	ldi	r18, 0x00	; 0
			debug.datareg=0;
			debug.error=0x01;
		  }
		}else{
		  debug.datareg=0;
		  debug.error=0x02;
 2d8:	52 e0       	ldi	r21, 0x02	; 2
		  if(sts==1){
			debug.datareg=val;
			debug.error=0x00;
		  }else{
			debug.datareg=0;
			debug.error=0x01;
 2da:	e1 e0       	ldi	r30, 0x01	; 1
    uint8_t val=0, sts=0;
	
	debug_delay_index_2();    //half bit
	
	for(uint8_t i=0;i<10;i++){
	  if(i==0){
 2dc:	22 23       	and	r18, r18
 2de:	51 f4       	brne	.+20     	; 0x2f4 <debug_rx_byte+0x42>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 2e0:	4d 9b       	sbis	0x09, 5	; 9
 2e2:	3c c0       	rjmp	.+120    	; 0x35c <debug_rx_byte+0xaa>
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 2e4:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
 2e6:	55 bd       	out	0x25, r21	; 37
	#endif
  while(TCNT0<val){}
 2e8:	86 b5       	in	r24, 0x26	; 38
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	86 17       	cp	r24, r22
 2ee:	97 07       	cpc	r25, r23
 2f0:	d8 f3       	brcs	.-10     	; 0x2e8 <debug_rx_byte+0x36>
 2f2:	12 c0       	rjmp	.+36     	; 0x318 <debug_rx_byte+0x66>
		}
		
		debug_delay_index_1(); //one bit
		
      }
	  else if(i>=1 && i<=8){
 2f4:	82 2f       	mov	r24, r18
 2f6:	81 50       	subi	r24, 0x01	; 1
 2f8:	88 30       	cpi	r24, 0x08	; 8
 2fa:	80 f4       	brcc	.+32     	; 0x31c <debug_rx_byte+0x6a>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 2fc:	4d 99       	sbic	0x09, 5	; 9
		debug_delay_index_1(); //one bit
		
      }
	  else if(i>=1 && i<=8){
	    if(debug_rx_get()){
		  val|=0x80;
 2fe:	30 68       	ori	r19, 0x80	; 128
		}else{
		  val|=0x00;
		}
		#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
		DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
 300:	59 9a       	sbi	0x0b, 1	; 11
		DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
 302:	59 98       	cbi	0x0b, 1	; 11
		#endif
		if(i!=8){
 304:	28 30       	cpi	r18, 0x08	; 8
 306:	09 f0       	breq	.+2      	; 0x30a <debug_rx_byte+0x58>
		  val>>=1;
 308:	36 95       	lsr	r19
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 30a:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
 30c:	55 bd       	out	0x25, r21	; 37
	#endif
  while(TCNT0<val){}
 30e:	86 b5       	in	r24, 0x26	; 38
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	86 17       	cp	r24, r22
 314:	97 07       	cpc	r25, r23
 316:	d8 f3       	brcs	.-10     	; 0x30e <debug_rx_byte+0x5c>
  TCCR0B=0;
 318:	15 bc       	out	0x25, r1	; 37
 31a:	12 c0       	rjmp	.+36     	; 0x340 <debug_rx_byte+0x8e>
		}
		
		debug_delay_index_1(); //one bit
		
	  }
	  else if(i==9){
 31c:	29 30       	cpi	r18, 0x09	; 9
 31e:	81 f4       	brne	.+32     	; 0x340 <debug_rx_byte+0x8e>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 320:	4d 9b       	sbis	0x09, 5	; 9
 322:	20 c0       	rjmp	.+64     	; 0x364 <debug_rx_byte+0xb2>
		
	  }
	  else if(i==9){
		if(debug_rx_get()==1){
		  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
		  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
 324:	59 9a       	sbi	0x0b, 1	; 11
		  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
 326:	59 98       	cbi	0x0b, 1	; 11
		  #endif
		  sts&=1;
 328:	41 70       	andi	r20, 0x01	; 1
		  if(sts==1){
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	29 f4       	brne	.+10     	; 0x338 <debug_rx_byte+0x86>
			debug.datareg=val;
 32e:	30 93 15 01 	sts	0x0115, r19
			debug.error=0x00;
 332:	10 92 14 01 	sts	0x0114, r1
 336:	04 c0       	rjmp	.+8      	; 0x340 <debug_rx_byte+0x8e>
		  }else{
			debug.datareg=0;
 338:	10 92 15 01 	sts	0x0115, r1
			debug.error=0x01;
 33c:	e0 93 14 01 	sts	0x0114, r30
  if(debug_rx_get()==0){
    uint8_t val=0, sts=0;
	
	debug_delay_index_2();    //half bit
	
	for(uint8_t i=0;i<10;i++){
 340:	2f 5f       	subi	r18, 0xFF	; 255
 342:	2a 30       	cpi	r18, 0x0A	; 10
 344:	59 f6       	brne	.-106    	; 0x2dc <debug_rx_byte+0x2a>
	  }
	}
  }else{
    debug.error=0x03;
  }
  return debug.datareg;
 346:	80 91 15 01 	lds	r24, 0x0115
}
 34a:	08 95       	ret
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
 34c:	20 91 12 01 	lds	r18, 0x0112
 350:	30 91 13 01 	lds	r19, 0x0113
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 354:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS01);
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	85 bd       	out	0x25, r24	; 37
 35a:	b1 cf       	rjmp	.-158    	; 0x2be <debug_rx_byte+0xc>
	
	for(uint8_t i=0;i<10;i++){
	  if(i==0){
		if(debug_rx_get()==0){
		  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
		  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
 35c:	59 9a       	sbi	0x0b, 1	; 11
		  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
 35e:	59 98       	cbi	0x0b, 1	; 11
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	c0 cf       	rjmp	.-128    	; 0x2e4 <debug_rx_byte+0x32>
		  }else{
			debug.datareg=0;
			debug.error=0x01;
		  }
		}else{
		  debug.datareg=0;
 364:	10 92 15 01 	sts	0x0115, r1
		  debug.error=0x02;
 368:	50 93 14 01 	sts	0x0114, r21
 36c:	e9 cf       	rjmp	.-46     	; 0x340 <debug_rx_byte+0x8e>

0000036e <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
 36e:	80 91 15 01 	lds	r24, 0x0115
}
 372:	08 95       	ret

00000374 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
 374:	10 92 15 01 	sts	0x0115, r1
}
 378:	08 95       	ret

0000037a <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
 37a:	80 93 15 01 	sts	0x0115, r24
}
 37e:	08 95       	ret

00000380 <debug_tx_hex>:

void debug_tx_hex(uint32_t val){
 380:	bf 92       	push	r11
 382:	cf 92       	push	r12
 384:	df 92       	push	r13
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	7b 01       	movw	r14, r22
 394:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	e8 16       	cp	r14, r24
 39a:	f1 04       	cpc	r15, r1
 39c:	01 05       	cpc	r16, r1
 39e:	11 05       	cpc	r17, r1
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <debug_tx_hex+0x24>
 3a2:	30 f4       	brcc	.+12     	; 0x3b0 <debug_tx_hex+0x30>
 3a4:	c8 e0       	ldi	r28, 0x08	; 8
 3a6:	d0 e0       	ldi	r29, 0x00	; 0
 3a8:	52 e0       	ldi	r21, 0x02	; 2
 3aa:	c5 2e       	mov	r12, r21
 3ac:	d1 2c       	mov	r13, r1
 3ae:	14 c0       	rjmp	.+40     	; 0x3d8 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	e8 16       	cp	r14, r24
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	f8 06       	cpc	r15, r24
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	08 07       	cpc	r16, r24
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	18 07       	cpc	r17, r24
 3c0:	30 f0       	brcs	.+12     	; 0x3ce <debug_tx_hex+0x4e>
 3c2:	c0 e2       	ldi	r28, 0x20	; 32
 3c4:	d0 e0       	ldi	r29, 0x00	; 0
 3c6:	48 e0       	ldi	r20, 0x08	; 8
 3c8:	c4 2e       	mov	r12, r20
 3ca:	d1 2c       	mov	r13, r1
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <debug_tx_hex+0x58>
 3ce:	c0 e1       	ldi	r28, 0x10	; 16
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
 3d2:	34 e0       	ldi	r19, 0x04	; 4
 3d4:	c3 2e       	mov	r12, r19
 3d6:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
 3d8:	80 e3       	ldi	r24, 0x30	; 48
 3da:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
  debug_tx_byte('x');
 3de:	88 e7       	ldi	r24, 0x78	; 120
 3e0:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
 3e4:	bb 24       	eor	r11, r11
 3e6:	17 c0       	rjmp	.+46     	; 0x416 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 3e8:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 3ea:	d8 01       	movw	r26, r16
 3ec:	c7 01       	movw	r24, r14
 3ee:	0c 2e       	mov	r0, r28
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <debug_tx_hex+0x7a>
 3f2:	b6 95       	lsr	r27
 3f4:	a7 95       	ror	r26
 3f6:	97 95       	ror	r25
 3f8:	87 95       	ror	r24
 3fa:	0a 94       	dec	r0
 3fc:	d2 f7       	brpl	.-12     	; 0x3f2 <debug_tx_hex+0x72>
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 404:	8a 30       	cpi	r24, 0x0A	; 10
 406:	91 05       	cpc	r25, r1
 408:	10 f0       	brcs	.+4      	; 0x40e <debug_tx_hex+0x8e>
	    hex_digit+=55;
 40a:	c7 96       	adiw	r24, 0x37	; 55
 40c:	01 c0       	rjmp	.+2      	; 0x410 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
 40e:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
 410:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 414:	b3 94       	inc	r11
 416:	8b 2d       	mov	r24, r11
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	8c 15       	cp	r24, r12
 41c:	9d 05       	cpc	r25, r13
 41e:	20 f3       	brcs	.-56     	; 0x3e8 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	bf 90       	pop	r11
 432:	08 95       	ret

00000434 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
 434:	af 92       	push	r10
 436:	bf 92       	push	r11
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	7b 01       	movw	r14, r22
 44a:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 44c:	6f 3f       	cpi	r22, 0xFF	; 255
 44e:	71 05       	cpc	r23, r1
 450:	81 05       	cpc	r24, r1
 452:	91 05       	cpc	r25, r1
 454:	09 f0       	breq	.+2      	; 0x458 <debug_tx_bin+0x24>
 456:	18 f4       	brcc	.+6      	; 0x45e <debug_tx_bin+0x2a>
 458:	e7 e0       	ldi	r30, 0x07	; 7
 45a:	de 2e       	mov	r13, r30
 45c:	0d c0       	rjmp	.+26     	; 0x478 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 45e:	60 30       	cpi	r22, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	73 07       	cpc	r23, r19
 464:	31 e0       	ldi	r19, 0x01	; 1
 466:	83 07       	cpc	r24, r19
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	93 07       	cpc	r25, r19
 46c:	18 f0       	brcs	.+6      	; 0x474 <debug_tx_bin+0x40>
 46e:	7f e1       	ldi	r23, 0x1F	; 31
 470:	d7 2e       	mov	r13, r23
 472:	02 c0       	rjmp	.+4      	; 0x478 <debug_tx_bin+0x44>
 474:	6f e0       	ldi	r22, 0x0F	; 15
 476:	d6 2e       	mov	r13, r22
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
 478:	80 e3       	ldi	r24, 0x30	; 48
 47a:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
  debug_tx_byte('b');
 47e:	82 e6       	ldi	r24, 0x62	; 98
 480:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
 484:	c0 e0       	ldi	r28, 0x00	; 0
 486:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
 488:	cd 2c       	mov	r12, r13
 48a:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 48c:	56 01       	movw	r10, r12
 48e:	08 94       	sec
 490:	a1 1c       	adc	r10, r1
 492:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 494:	c6 01       	movw	r24, r12
 496:	8c 1b       	sub	r24, r28
 498:	9d 0b       	sbc	r25, r29
 49a:	a8 01       	movw	r20, r16
 49c:	97 01       	movw	r18, r14
 49e:	04 c0       	rjmp	.+8      	; 0x4a8 <debug_tx_bin+0x74>
 4a0:	56 95       	lsr	r21
 4a2:	47 95       	ror	r20
 4a4:	37 95       	ror	r19
 4a6:	27 95       	ror	r18
 4a8:	8a 95       	dec	r24
 4aa:	d2 f7       	brpl	.-12     	; 0x4a0 <debug_tx_bin+0x6c>
 4ac:	da 01       	movw	r26, r20
 4ae:	c9 01       	movw	r24, r18
 4b0:	81 70       	andi	r24, 0x01	; 1
 4b2:	90 70       	andi	r25, 0x00	; 0
 4b4:	89 2b       	or	r24, r25
 4b6:	11 f0       	breq	.+4      	; 0x4bc <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
 4b8:	81 e3       	ldi	r24, 0x31	; 49
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
 4bc:	80 e3       	ldi	r24, 0x30	; 48
 4be:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
 4c2:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 4c4:	ca 15       	cp	r28, r10
 4c6:	db 05       	cpc	r29, r11
 4c8:	29 f7       	brne	.-54     	; 0x494 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	cf 90       	pop	r12
 4da:	bf 90       	pop	r11
 4dc:	af 90       	pop	r10
 4de:	08 95       	ret

000004e0 <debug_tx_nl>:

void debug_tx_nl(void){
  debug_tx_byte('\r');
 4e0:	8d e0       	ldi	r24, 0x0D	; 13
 4e2:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
  debug_tx_byte('\n');
 4e6:	8a e0       	ldi	r24, 0x0A	; 10
 4e8:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
}
 4ec:	08 95       	ret

000004ee <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
 4ee:	80 e2       	ldi	r24, 0x20	; 32
 4f0:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
}
 4f4:	08 95       	ret

000004f6 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
 4f6:	8c e2       	ldi	r24, 0x2C	; 44
 4f8:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
}
 4fc:	08 95       	ret

000004fe <debug_tx_text>:

void debug_tx_text(char *str){
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	ec 01       	movw	r28, r24
 506:	10 e0       	ldi	r17, 0x00	; 0
 508:	03 c0       	rjmp	.+6      	; 0x510 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
 50a:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
        i++;
 50e:	1f 5f       	subi	r17, 0xFF	; 255
  debug_tx_byte(',');
}

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 510:	fe 01       	movw	r30, r28
 512:	e1 0f       	add	r30, r17
 514:	f1 1d       	adc	r31, r1
 516:	80 81       	ld	r24, Z
 518:	88 23       	and	r24, r24
 51a:	b9 f7       	brne	.-18     	; 0x50a <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	08 95       	ret

00000524 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
 524:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
  debug_tx_nl();
 528:	0e 94 70 02 	call	0x4e0	; 0x4e0 <debug_tx_nl>
}
 52c:	08 95       	ret

0000052e <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
 52e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
  debug_tx_sp();
 532:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_sp>
}
 536:	08 95       	ret

00000538 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
 538:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
  debug_tx_cm();
 53c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <debug_tx_cm>
}
 540:	08 95       	ret

00000542 <debug_determine_digit_numbers>:

void debug_determine_digit_numbers(uint32_t num){
 542:	bf 92       	push	r11
 544:	cf 92       	push	r12
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	6b 01       	movw	r12, r22
 552:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 554:	61 15       	cp	r22, r1
 556:	71 05       	cpc	r23, r1
 558:	81 05       	cpc	r24, r1
 55a:	91 05       	cpc	r25, r1
 55c:	31 f4       	brne	.+12     	; 0x56a <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
 55e:	10 92 38 01 	sts	0x0138, r1
    debug.input_num_digits=1;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 40 01 	sts	0x0140, r24
 568:	23 c0       	rjmp	.+70     	; 0x5b0 <debug_determine_digit_numbers+0x6e>
 56a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 56c:	0b 2d       	mov	r16, r11
 56e:	10 e0       	ldi	r17, 0x00	; 0
 570:	0c 5e       	subi	r16, 0xEC	; 236
 572:	1e 4f       	sbci	r17, 0xFE	; 254
 574:	c7 01       	movw	r24, r14
 576:	b6 01       	movw	r22, r12
 578:	2a e0       	ldi	r18, 0x0A	; 10
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	0e 94 14 04 	call	0x828	; 0x828 <__udivmodsi4>
 584:	f8 01       	movw	r30, r16
 586:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
 588:	c7 01       	movw	r24, r14
 58a:	b6 01       	movw	r22, r12
 58c:	2a e0       	ldi	r18, 0x0A	; 10
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	0e 94 14 04 	call	0x828	; 0x828 <__udivmodsi4>
 598:	c9 01       	movw	r24, r18
 59a:	da 01       	movw	r26, r20
 59c:	6c 01       	movw	r12, r24
 59e:	7d 01       	movw	r14, r26
      i++;
 5a0:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 5a2:	c1 14       	cp	r12, r1
 5a4:	d1 04       	cpc	r13, r1
 5a6:	e1 04       	cpc	r14, r1
 5a8:	f1 04       	cpc	r15, r1
 5aa:	01 f7       	brne	.-64     	; 0x56c <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 5ac:	b0 92 40 01 	sts	0x0140, r11
  }
}
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	df 90       	pop	r13
 5ba:	cf 90       	pop	r12
 5bc:	bf 90       	pop	r11
 5be:	08 95       	ret

000005c0 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
 5c0:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 5c2:	10 91 40 01 	lds	r17, 0x0140
 5c6:	09 c0       	rjmp	.+18     	; 0x5da <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 5c8:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 5ca:	e1 2f       	mov	r30, r17
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	ec 5e       	subi	r30, 0xEC	; 236
 5d0:	fe 4f       	sbci	r31, 0xFE	; 254
 5d2:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
 5d4:	80 5d       	subi	r24, 0xD0	; 208
 5d6:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 5da:	11 23       	and	r17, r17
 5dc:	a9 f7       	brne	.-22     	; 0x5c8 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
 5de:	1f 91       	pop	r17
 5e0:	08 95       	ret

000005e2 <debug_tx_number>:

void debug_tx_number(int32_t num){
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	7b 01       	movw	r14, r22
 5ec:	8c 01       	movw	r16, r24
  if(num<0){
 5ee:	97 ff       	sbrs	r25, 7
 5f0:	0b c0       	rjmp	.+22     	; 0x608 <debug_tx_number+0x26>
    debug_tx_byte('-');
 5f2:	8d e2       	ldi	r24, 0x2D	; 45
 5f4:	0e 94 05 01 	call	0x20a	; 0x20a <debug_tx_byte>
	num=-num;
 5f8:	10 95       	com	r17
 5fa:	00 95       	com	r16
 5fc:	f0 94       	com	r15
 5fe:	e0 94       	com	r14
 600:	e1 1c       	adc	r14, r1
 602:	f1 1c       	adc	r15, r1
 604:	01 1d       	adc	r16, r1
 606:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
 608:	c8 01       	movw	r24, r16
 60a:	b7 01       	movw	r22, r14
 60c:	0e 94 a1 02 	call	0x542	; 0x542 <debug_determine_digit_numbers>
  debug_tx_number_digits();
 610:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <debug_tx_number_digits>
}
 614:	1f 91       	pop	r17
 616:	0f 91       	pop	r16
 618:	ff 90       	pop	r15
 61a:	ef 90       	pop	r14
 61c:	08 95       	ret

0000061e <debug_tx_number_nl>:

void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
 61e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <debug_tx_number>
  debug_tx_nl();
 622:	0e 94 70 02 	call	0x4e0	; 0x4e0 <debug_tx_nl>
}
 626:	08 95       	ret

00000628 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
 628:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <debug_tx_number>
  debug_tx_sp();
 62c:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_sp>
}
 630:	08 95       	ret

00000632 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
 632:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <debug_tx_number>
  debug_tx_text(",");
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
}
 63e:	08 95       	ret

00000640 <debug_tx_number_hex_nl>:

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
 640:	0e 94 c0 01 	call	0x380	; 0x380 <debug_tx_hex>
  debug_tx_nl();
 644:	0e 94 70 02 	call	0x4e0	; 0x4e0 <debug_tx_nl>
}
 648:	08 95       	ret

0000064a <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
 64a:	0e 94 c0 01 	call	0x380	; 0x380 <debug_tx_hex>
  debug_tx_sp();
 64e:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_sp>
}
 652:	08 95       	ret

00000654 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
 654:	0e 94 c0 01 	call	0x380	; 0x380 <debug_tx_hex>
  debug_tx_text(",");
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
}
 660:	08 95       	ret

00000662 <debug_tx_parameter_nl>:

void debug_tx_parameter_nl(char *name, int32_t num){
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	7a 01       	movw	r14, r20
 66c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 66e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
  debug_tx_sp();
 672:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_sp>
  debug_tx_number_nl(num);
 676:	c8 01       	movw	r24, r16
 678:	b7 01       	movw	r22, r14
 67a:	0e 94 0f 03 	call	0x61e	; 0x61e <debug_tx_number_nl>
}
 67e:	1f 91       	pop	r17
 680:	0f 91       	pop	r16
 682:	ff 90       	pop	r15
 684:	ef 90       	pop	r14
 686:	08 95       	ret

00000688 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	7a 01       	movw	r14, r20
 692:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 694:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
  debug_tx_sp();
 698:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_sp>
  debug_tx_number_sp(num);
 69c:	c8 01       	movw	r24, r16
 69e:	b7 01       	movw	r22, r14
 6a0:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_number_sp>
}
 6a4:	1f 91       	pop	r17
 6a6:	0f 91       	pop	r16
 6a8:	ff 90       	pop	r15
 6aa:	ef 90       	pop	r14
 6ac:	08 95       	ret

000006ae <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
 6ae:	ef 92       	push	r14
 6b0:	ff 92       	push	r15
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	7a 01       	movw	r14, r20
 6b8:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 6ba:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
  debug_tx_sp();
 6be:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_sp>
  debug_tx_number_cm(num);
 6c2:	c8 01       	movw	r24, r16
 6c4:	b7 01       	movw	r22, r14
 6c6:	0e 94 19 03 	call	0x632	; 0x632 <debug_tx_number_cm>
}
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	08 95       	ret

000006d4 <debug_tx_parameter_hex_nl>:

void debug_tx_parameter_hex_nl(char *name, int32_t num){
 6d4:	ef 92       	push	r14
 6d6:	ff 92       	push	r15
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	7a 01       	movw	r14, r20
 6de:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 6e0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
  debug_tx_sp();
 6e4:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_sp>
  debug_tx_number_hex_nl(num);
 6e8:	c8 01       	movw	r24, r16
 6ea:	b7 01       	movw	r22, r14
 6ec:	0e 94 20 03 	call	0x640	; 0x640 <debug_tx_number_hex_nl>
}
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	ff 90       	pop	r15
 6f6:	ef 90       	pop	r14
 6f8:	08 95       	ret

000006fa <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
 6fa:	ef 92       	push	r14
 6fc:	ff 92       	push	r15
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	7a 01       	movw	r14, r20
 704:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 706:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
  debug_tx_sp();
 70a:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_sp>
  debug_tx_number_hex_sp(num);
 70e:	c8 01       	movw	r24, r16
 710:	b7 01       	movw	r22, r14
 712:	0e 94 25 03 	call	0x64a	; 0x64a <debug_tx_number_hex_sp>
}
 716:	1f 91       	pop	r17
 718:	0f 91       	pop	r16
 71a:	ff 90       	pop	r15
 71c:	ef 90       	pop	r14
 71e:	08 95       	ret

00000720 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	7a 01       	movw	r14, r20
 72a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 72c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <debug_tx_text>
  debug_tx_sp();
 730:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_sp>
  debug_tx_number_hex_cm(num);
 734:	c8 01       	movw	r24, r16
 736:	b7 01       	movw	r22, r14
 738:	0e 94 2a 03 	call	0x654	; 0x654 <debug_tx_number_hex_cm>
}
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	08 95       	ret

00000746 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
 746:	e4 e1       	ldi	r30, 0x14	; 20
 748:	f1 e0       	ldi	r31, 0x01	; 1
 74a:	e8 0f       	add	r30, r24
 74c:	f1 1d       	adc	r31, r1
 74e:	83 81       	ldd	r24, Z+3	; 0x03
}
 750:	08 95       	ret

00000752 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 752:	80 91 37 01 	lds	r24, 0x0137
}
 756:	08 95       	ret

00000758 <debug_flush_buf>:

void debug_flush_buf(void){
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 75c:	fc 01       	movw	r30, r24
 75e:	ec 5e       	subi	r30, 0xEC	; 236
 760:	fe 4f       	sbci	r31, 0xFE	; 254
 762:	13 82       	std	Z+3, r1	; 0x03
 764:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 766:	80 32       	cpi	r24, 0x20	; 32
 768:	91 05       	cpc	r25, r1
 76a:	c1 f7       	brne	.-16     	; 0x75c <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 76c:	10 92 37 01 	sts	0x0137, r1
}
 770:	08 95       	ret

00000772 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
 772:	80 91 16 01 	lds	r24, 0x0116
}
 776:	08 95       	ret

00000778 <debug_init>:

void debug_init(void){
  debug_struct_init();
 778:	0e 94 75 00 	call	0xea	; 0xea <debug_struct_init>
  debug_timings_init();
 77c:	0e 94 91 00 	call	0x122	; 0x122 <debug_timings_init>
  debug_gpio_init();
 780:	0e 94 b6 00 	call	0x16c	; 0x16c <debug_gpio_init>
}
 784:	08 95       	ret

00000786 <__vector_5>:


ISR(ISR_PCINT_VECT){
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	2f 93       	push	r18
 792:	3f 93       	push	r19
 794:	4f 93       	push	r20
 796:	5f 93       	push	r21
 798:	6f 93       	push	r22
 79a:	7f 93       	push	r23
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
 7a0:	af 93       	push	r26
 7a2:	bf 93       	push	r27
 7a4:	ef 93       	push	r30
 7a6:	ff 93       	push	r31
  debug.databsy=1;
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	80 93 16 01 	sts	0x0116, r24
  uint8_t val=debug_rx_byte();
 7ae:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debug_rx_byte>
 7b2:	98 2f       	mov	r25, r24
  if(debug.error==0){
 7b4:	80 91 14 01 	lds	r24, 0x0114
 7b8:	88 23       	and	r24, r24
 7ba:	99 f4       	brne	.+38     	; 0x7e2 <__vector_5+0x5c>
    debug.buf[debug.bufindex]=val;
 7bc:	e0 91 37 01 	lds	r30, 0x0137
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	ec 5e       	subi	r30, 0xEC	; 236
 7c4:	fe 4f       	sbci	r31, 0xFE	; 254
 7c6:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
 7c8:	80 91 37 01 	lds	r24, 0x0137
 7cc:	8f 5f       	subi	r24, 0xFF	; 255
 7ce:	80 93 37 01 	sts	0x0137, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
 7d2:	80 91 37 01 	lds	r24, 0x0137
 7d6:	81 32       	cpi	r24, 0x21	; 33
 7d8:	10 f0       	brcs	.+4      	; 0x7de <__vector_5+0x58>
	  debug.bufindex=0;
 7da:	10 92 37 01 	sts	0x0137, r1
	}
    debug_timer_start();
 7de:	0e 94 a4 00 	call	0x148	; 0x148 <debug_timer_start>
  }
}
 7e2:	ff 91       	pop	r31
 7e4:	ef 91       	pop	r30
 7e6:	bf 91       	pop	r27
 7e8:	af 91       	pop	r26
 7ea:	9f 91       	pop	r25
 7ec:	8f 91       	pop	r24
 7ee:	7f 91       	pop	r23
 7f0:	6f 91       	pop	r22
 7f2:	5f 91       	pop	r21
 7f4:	4f 91       	pop	r20
 7f6:	3f 91       	pop	r19
 7f8:	2f 91       	pop	r18
 7fa:	0f 90       	pop	r0
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	0f 90       	pop	r0
 800:	1f 90       	pop	r1
 802:	18 95       	reti

00000804 <__vector_13>:

ISR(TIMER1_OVF_vect){
 804:	1f 92       	push	r1
 806:	0f 92       	push	r0
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	0f 92       	push	r0
 80c:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 80e:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 812:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 814:	16 bc       	out	0x26, r1	; 38
}

ISR(TIMER1_OVF_vect){
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
 816:	59 9a       	sbi	0x0b, 1	; 11
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
 818:	59 98       	cbi	0x0b, 1	; 11
  #endif
  debug.databsy=0;
 81a:	10 92 16 01 	sts	0x0116, r1
}
 81e:	0f 90       	pop	r0
 820:	0f be       	out	0x3f, r0	; 63
 822:	0f 90       	pop	r0
 824:	1f 90       	pop	r1
 826:	18 95       	reti

00000828 <__udivmodsi4>:
 828:	a1 e2       	ldi	r26, 0x21	; 33
 82a:	1a 2e       	mov	r1, r26
 82c:	aa 1b       	sub	r26, r26
 82e:	bb 1b       	sub	r27, r27
 830:	fd 01       	movw	r30, r26
 832:	0d c0       	rjmp	.+26     	; 0x84e <__udivmodsi4_ep>

00000834 <__udivmodsi4_loop>:
 834:	aa 1f       	adc	r26, r26
 836:	bb 1f       	adc	r27, r27
 838:	ee 1f       	adc	r30, r30
 83a:	ff 1f       	adc	r31, r31
 83c:	a2 17       	cp	r26, r18
 83e:	b3 07       	cpc	r27, r19
 840:	e4 07       	cpc	r30, r20
 842:	f5 07       	cpc	r31, r21
 844:	20 f0       	brcs	.+8      	; 0x84e <__udivmodsi4_ep>
 846:	a2 1b       	sub	r26, r18
 848:	b3 0b       	sbc	r27, r19
 84a:	e4 0b       	sbc	r30, r20
 84c:	f5 0b       	sbc	r31, r21

0000084e <__udivmodsi4_ep>:
 84e:	66 1f       	adc	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	1a 94       	dec	r1
 858:	69 f7       	brne	.-38     	; 0x834 <__udivmodsi4_loop>
 85a:	60 95       	com	r22
 85c:	70 95       	com	r23
 85e:	80 95       	com	r24
 860:	90 95       	com	r25
 862:	9b 01       	movw	r18, r22
 864:	ac 01       	movw	r20, r24
 866:	bd 01       	movw	r22, r26
 868:	cf 01       	movw	r24, r30
 86a:	08 95       	ret

0000086c <_exit>:
 86c:	f8 94       	cli

0000086e <__stop_program>:
 86e:	ff cf       	rjmp	.-2      	; 0x86e <__stop_program>
