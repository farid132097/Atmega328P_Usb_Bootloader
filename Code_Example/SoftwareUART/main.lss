
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000076e  00000802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800102  00800102  00000804  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003d8  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4d  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f6  00000000  00000000  00001669  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fd  00000000  00000000  0000195f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000603  00000000  00000000  0000295a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002f5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define  OnDelay  10
#define  OffDelay 1000

int main(void){
  
  debug_init();
  a6:	0e 94 28 03 	call	0x650	; 0x650 <debug_init>
  DDRD  |= (1<<4);
  aa:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  ac:	5c 98       	cbi	0x0b, 4	; 11
  sei();
  ae:	78 94       	sei
  while(1){
    
    //PORTD |= (1<<4);
	//debug_tx_text_nl("Hello World! -> Software Serial test");
	//PORTD &=~(1<<4);
	if(debug_rx_byte()!=0){
  b0:	0e 94 06 01 	call	0x20c	; 0x20c <debug_rx_byte>
  b4:	88 23       	and	r24, r24
  b6:	e1 f3       	breq	.-8      	; 0xb0 <main+0xa>
	  debug_tx_byte('a');
  b8:	81 e6       	ldi	r24, 0x61	; 97
  ba:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
	  debug_rx_byte_clear();
  be:	0e 94 09 01 	call	0x212	; 0x212 <debug_rx_byte_clear>
  c2:	f6 cf       	rjmp	.-20     	; 0xb0 <main+0xa>

000000c4 <debug_struct_init>:


debug_t debug;

void debug_struct_init(void){
  debug.error=0;
  c4:	10 92 02 01 	sts	0x0102, r1
  debug.dr=0;
  c8:	10 92 03 01 	sts	0x0103, r1
  cc:	e4 e0       	ldi	r30, 0x04	; 4
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
  d0:	11 92       	st	Z+, r1
debug_t debug;

void debug_struct_init(void){
  debug.error=0;
  debug.dr=0;
  for(uint8_t i=0;i<8;i++){
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	ec 30       	cpi	r30, 0x0C	; 12
  d6:	f8 07       	cpc	r31, r24
  d8:	d9 f7       	brne	.-10     	; 0xd0 <debug_struct_init+0xc>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
  da:	10 82       	st	Z, r1
  debug.count=0;
  dc:	12 82       	std	Z+2, r1	; 0x02
  de:	11 82       	std	Z+1, r1	; 0x01
  debug.loop_counter=0;
  e0:	14 82       	std	Z+4, r1	; 0x04
  e2:	13 82       	std	Z+3, r1	; 0x03
  debug.loop_counter_sts=0;
  e4:	15 82       	std	Z+5, r1	; 0x05
  debug.reset_sts=0;
  e6:	16 82       	std	Z+6, r1	; 0x06
}
  e8:	08 95       	ret

000000ea <debug_timings_init>:
  TIFR0=0x00;
  #define DEBUG_TIMER0_DELAY_TICKS DEBUG_TIMER_DELAY_TICKS
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCCR1A=0x00;
  ea:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=(1<<CS10);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 81 00 	sts	0x0081, r24
  TCCR1C=0x00;
  f4:	10 92 82 00 	sts	0x0082, r1
  TIMSK1=0x00;
  f8:	10 92 6f 00 	sts	0x006F, r1
  TIFR1=0x00;
  fc:	16 ba       	out	0x16, r1	; 22
  TIMSK2=0x00;
  TIFR2=0x00;
  #define DEBUG_TIMER2_DELAY_TICKS DEBUG_TIMER_DELAY_TICKS
  #endif
  
  PCICR |=(1<<PCIE2);
  fe:	e8 e6       	ldi	r30, 0x68	; 104
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
  PCMSK2|=(1<<PCINT21);
 108:	ed e6       	ldi	r30, 0x6D	; 109
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	80 83       	st	Z, r24
  sei();
 112:	78 94       	sei
}
 114:	08 95       	ret

00000116 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
 116:	56 9a       	sbi	0x0a, 6	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 118:	5e 9a       	sbi	0x0b, 6	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
 11a:	55 98       	cbi	0x0a, 5	; 10
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
 11c:	5d 9a       	sbi	0x0b, 5	; 11
}
 11e:	08 95       	ret

00000120 <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 120:	5e 9a       	sbi	0x0b, 6	; 11
}
 122:	08 95       	ret

00000124 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 124:	5e 98       	cbi	0x0b, 6	; 11
}
 126:	08 95       	ret

00000128 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	11 f4       	brne	.+4      	; 0x130 <debug_tx_set+0x8>
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 12c:	5e 9a       	sbi	0x0b, 6	; 11
 12e:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 130:	5e 98       	cbi	0x0b, 6	; 11
 132:	08 95       	ret

00000134 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 134:	89 b1       	in	r24, 0x09	; 9
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	25 e0       	ldi	r18, 0x05	; 5
 13a:	96 95       	lsr	r25
 13c:	87 95       	ror	r24
 13e:	2a 95       	dec	r18
 140:	e1 f7       	brne	.-8      	; 0x13a <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
 142:	81 70       	andi	r24, 0x01	; 1
 144:	08 95       	ret

00000146 <debug_delay>:

void debug_delay(uint16_t val){
 146:	9c 01       	movw	r18, r24
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 148:	10 92 85 00 	sts	0x0085, r1
 14c:	10 92 84 00 	sts	0x0084, r1
  while(TCNT1<val){}
 150:	80 91 84 00 	lds	r24, 0x0084
 154:	90 91 85 00 	lds	r25, 0x0085
 158:	82 17       	cp	r24, r18
 15a:	93 07       	cpc	r25, r19
 15c:	c8 f3       	brcs	.-14     	; 0x150 <debug_delay+0xa>
  
  #ifdef DEBUG_USE_TIMER2
  TCNT2=0;
  while(TCNT2<val){}
  #endif
}
 15e:	08 95       	ret

00000160 <debug_tx_byte>:

void debug_tx_byte(uint8_t val){
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	2a 97       	sbiw	r28, 0x0a	; 10
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 174:	fe 01       	movw	r30, r28
 176:	31 96       	adiw	r30, 0x01	; 1
 178:	9a e0       	ldi	r25, 0x0A	; 10
 17a:	df 01       	movw	r26, r30
 17c:	1d 92       	st	X+, r1
 17e:	9a 95       	dec	r25
 180:	e9 f7       	brne	.-6      	; 0x17c <debug_tx_byte+0x1c>
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	9a 87       	std	Y+10, r25	; 0x0a
 186:	fe 01       	movw	r30, r28
 188:	32 96       	adiw	r30, 0x02	; 2
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 18e:	48 2f       	mov	r20, r24
 190:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 192:	61 e0       	ldi	r22, 0x01	; 1
}

void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 194:	ca 01       	movw	r24, r20
 196:	02 2e       	mov	r0, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <debug_tx_byte+0x3e>
 19a:	95 95       	asr	r25
 19c:	87 95       	ror	r24
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <debug_tx_byte+0x3a>
 1a2:	80 ff       	sbrs	r24, 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <debug_tx_byte+0x4a>
	  buf[i+1]=1;
 1a6:	60 83       	st	Z, r22
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <debug_tx_byte+0x4c>
	}else{
	  buf[i+1]=0;
 1aa:	10 82       	st	Z, r1
 1ac:	2f 5f       	subi	r18, 0xFF	; 255
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	31 96       	adiw	r30, 0x01	; 1
  #endif
}

void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 1b2:	28 30       	cpi	r18, 0x08	; 8
 1b4:	31 05       	cpc	r19, r1
 1b6:	71 f7       	brne	.-36     	; 0x194 <debug_tx_byte+0x34>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 1b8:	2f b7       	in	r18, 0x3f	; 63
  if(sreg & (1<<7)){
 1ba:	27 ff       	sbrs	r18, 7
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <debug_tx_byte+0x60>
    cli();
 1be:	f8 94       	cli
 1c0:	fe 01       	movw	r30, r28
 1c2:	31 96       	adiw	r30, 0x01	; 1
  }
  for(uint8_t i=0;i<10;i++){
 1c4:	ae 01       	movw	r20, r28
 1c6:	45 5f       	subi	r20, 0xF5	; 245
 1c8:	5f 4f       	sbci	r21, 0xFF	; 255
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 1ca:	80 81       	ld	r24, Z
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	11 f4       	brne	.+4      	; 0x1d4 <debug_tx_byte+0x74>
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 1d0:	5e 9a       	sbi	0x0b, 6	; 11
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <debug_tx_byte+0x76>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 1d4:	5e 98       	cbi	0x0b, 6	; 11
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 1d6:	10 92 85 00 	sts	0x0085, r1
 1da:	10 92 84 00 	sts	0x0084, r1
  while(TCNT1<val){}
 1de:	80 91 84 00 	lds	r24, 0x0084
 1e2:	90 91 85 00 	lds	r25, 0x0085
 1e6:	8e 5c       	subi	r24, 0xCE	; 206
 1e8:	94 40       	sbci	r25, 0x04	; 4
 1ea:	c8 f3       	brcs	.-14     	; 0x1de <debug_tx_byte+0x7e>
 1ec:	31 96       	adiw	r30, 0x01	; 1
  }
  uint8_t sreg=SREG;
  if(sreg & (1<<7)){
    cli();
  }
  for(uint8_t i=0;i<10;i++){
 1ee:	e4 17       	cp	r30, r20
 1f0:	f5 07       	cpc	r31, r21
 1f2:	59 f7       	brne	.-42     	; 0x1ca <debug_tx_byte+0x6a>
    debug_tx_set(buf[i]);
	debug_delay(DEBUG_TIMER_DELAY_TICKS);
  }
  if(sreg & (1<<7)){
 1f4:	27 ff       	sbrs	r18, 7
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <debug_tx_byte+0x9a>
    sei();
 1f8:	78 94       	sei
  }
}
 1fa:	2a 96       	adiw	r28, 0x0a	; 10
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <debug_rx_byte>:

uint8_t debug_rx_byte(void){
  return debug.dr;
 20c:	80 91 03 01 	lds	r24, 0x0103
}
 210:	08 95       	ret

00000212 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.dr=0;
 212:	10 92 03 01 	sts	0x0103, r1
}
 216:	08 95       	ret

00000218 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.dr=val;
 218:	80 93 03 01 	sts	0x0103, r24
}
 21c:	08 95       	ret

0000021e <debug_tx_hex>:

void debug_tx_hex(uint32_t val){
 21e:	bf 92       	push	r11
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	7b 01       	movw	r14, r22
 232:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	e8 16       	cp	r14, r24
 238:	f1 04       	cpc	r15, r1
 23a:	01 05       	cpc	r16, r1
 23c:	11 05       	cpc	r17, r1
 23e:	09 f0       	breq	.+2      	; 0x242 <debug_tx_hex+0x24>
 240:	30 f4       	brcc	.+12     	; 0x24e <debug_tx_hex+0x30>
 242:	c8 e0       	ldi	r28, 0x08	; 8
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	52 e0       	ldi	r21, 0x02	; 2
 248:	c5 2e       	mov	r12, r21
 24a:	d1 2c       	mov	r13, r1
 24c:	14 c0       	rjmp	.+40     	; 0x276 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	e8 16       	cp	r14, r24
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	f8 06       	cpc	r15, r24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 07       	cpc	r16, r24
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	18 07       	cpc	r17, r24
 25e:	30 f0       	brcs	.+12     	; 0x26c <debug_tx_hex+0x4e>
 260:	c0 e2       	ldi	r28, 0x20	; 32
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	48 e0       	ldi	r20, 0x08	; 8
 266:	c4 2e       	mov	r12, r20
 268:	d1 2c       	mov	r13, r1
 26a:	05 c0       	rjmp	.+10     	; 0x276 <debug_tx_hex+0x58>
 26c:	c0 e1       	ldi	r28, 0x10	; 16
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	34 e0       	ldi	r19, 0x04	; 4
 272:	c3 2e       	mov	r12, r19
 274:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
  debug_tx_byte('x');
 27c:	88 e7       	ldi	r24, 0x78	; 120
 27e:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
 282:	bb 24       	eor	r11, r11
 284:	17 c0       	rjmp	.+46     	; 0x2b4 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 286:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 288:	d8 01       	movw	r26, r16
 28a:	c7 01       	movw	r24, r14
 28c:	0c 2e       	mov	r0, r28
 28e:	04 c0       	rjmp	.+8      	; 0x298 <debug_tx_hex+0x7a>
 290:	b6 95       	lsr	r27
 292:	a7 95       	ror	r26
 294:	97 95       	ror	r25
 296:	87 95       	ror	r24
 298:	0a 94       	dec	r0
 29a:	d2 f7       	brpl	.-12     	; 0x290 <debug_tx_hex+0x72>
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 2a2:	8a 30       	cpi	r24, 0x0A	; 10
 2a4:	91 05       	cpc	r25, r1
 2a6:	10 f0       	brcs	.+4      	; 0x2ac <debug_tx_hex+0x8e>
	    hex_digit+=55;
 2a8:	c7 96       	adiw	r24, 0x37	; 55
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
 2ac:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
 2ae:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 2b2:	b3 94       	inc	r11
 2b4:	8b 2d       	mov	r24, r11
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	8c 15       	cp	r24, r12
 2ba:	9d 05       	cpc	r25, r13
 2bc:	20 f3       	brcs	.-56     	; 0x286 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	bf 90       	pop	r11
 2d0:	08 95       	ret

000002d2 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
 2d2:	af 92       	push	r10
 2d4:	bf 92       	push	r11
 2d6:	cf 92       	push	r12
 2d8:	df 92       	push	r13
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	7b 01       	movw	r14, r22
 2e8:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 2ea:	6f 3f       	cpi	r22, 0xFF	; 255
 2ec:	71 05       	cpc	r23, r1
 2ee:	81 05       	cpc	r24, r1
 2f0:	91 05       	cpc	r25, r1
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <debug_tx_bin+0x24>
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <debug_tx_bin+0x2a>
 2f6:	e7 e0       	ldi	r30, 0x07	; 7
 2f8:	de 2e       	mov	r13, r30
 2fa:	0d c0       	rjmp	.+26     	; 0x316 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 2fc:	60 30       	cpi	r22, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	73 07       	cpc	r23, r19
 302:	31 e0       	ldi	r19, 0x01	; 1
 304:	83 07       	cpc	r24, r19
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	93 07       	cpc	r25, r19
 30a:	18 f0       	brcs	.+6      	; 0x312 <debug_tx_bin+0x40>
 30c:	7f e1       	ldi	r23, 0x1F	; 31
 30e:	d7 2e       	mov	r13, r23
 310:	02 c0       	rjmp	.+4      	; 0x316 <debug_tx_bin+0x44>
 312:	6f e0       	ldi	r22, 0x0F	; 15
 314:	d6 2e       	mov	r13, r22
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
  debug_tx_byte('b');
 31c:	82 e6       	ldi	r24, 0x62	; 98
 31e:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
 326:	cd 2c       	mov	r12, r13
 328:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 32a:	56 01       	movw	r10, r12
 32c:	08 94       	sec
 32e:	a1 1c       	adc	r10, r1
 330:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 332:	c6 01       	movw	r24, r12
 334:	8c 1b       	sub	r24, r28
 336:	9d 0b       	sbc	r25, r29
 338:	a8 01       	movw	r20, r16
 33a:	97 01       	movw	r18, r14
 33c:	04 c0       	rjmp	.+8      	; 0x346 <debug_tx_bin+0x74>
 33e:	56 95       	lsr	r21
 340:	47 95       	ror	r20
 342:	37 95       	ror	r19
 344:	27 95       	ror	r18
 346:	8a 95       	dec	r24
 348:	d2 f7       	brpl	.-12     	; 0x33e <debug_tx_bin+0x6c>
 34a:	da 01       	movw	r26, r20
 34c:	c9 01       	movw	r24, r18
 34e:	81 70       	andi	r24, 0x01	; 1
 350:	90 70       	andi	r25, 0x00	; 0
 352:	89 2b       	or	r24, r25
 354:	11 f0       	breq	.+4      	; 0x35a <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
 356:	81 e3       	ldi	r24, 0x31	; 49
 358:	01 c0       	rjmp	.+2      	; 0x35c <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
 35a:	80 e3       	ldi	r24, 0x30	; 48
 35c:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
 360:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 362:	ca 15       	cp	r28, r10
 364:	db 05       	cpc	r29, r11
 366:	29 f7       	brne	.-54     	; 0x332 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	df 90       	pop	r13
 376:	cf 90       	pop	r12
 378:	bf 90       	pop	r11
 37a:	af 90       	pop	r10
 37c:	08 95       	ret

0000037e <debug_tx_nl>:

void debug_tx_nl(void){
  debug_tx_byte('\r');
 37e:	8d e0       	ldi	r24, 0x0D	; 13
 380:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
  debug_tx_byte('\n');
 384:	8a e0       	ldi	r24, 0x0A	; 10
 386:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
}
 38a:	08 95       	ret

0000038c <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
 38c:	80 e2       	ldi	r24, 0x20	; 32
 38e:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
}
 392:	08 95       	ret

00000394 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
 394:	8c e2       	ldi	r24, 0x2C	; 44
 396:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
}
 39a:	08 95       	ret

0000039c <debug_tx_text>:

void debug_tx_text(char *str){
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
 3a4:	10 e0       	ldi	r17, 0x00	; 0
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
 3a8:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
        i++;
 3ac:	1f 5f       	subi	r17, 0xFF	; 255
  debug_tx_byte(',');
}

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 3ae:	fe 01       	movw	r30, r28
 3b0:	e1 0f       	add	r30, r17
 3b2:	f1 1d       	adc	r31, r1
 3b4:	80 81       	ld	r24, Z
 3b6:	88 23       	and	r24, r24
 3b8:	b9 f7       	brne	.-18     	; 0x3a8 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	08 95       	ret

000003c2 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
 3c2:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
  debug_tx_nl();
 3c6:	0e 94 bf 01 	call	0x37e	; 0x37e <debug_tx_nl>
}
 3ca:	08 95       	ret

000003cc <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
 3cc:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
  debug_tx_sp();
 3d0:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_tx_sp>
}
 3d4:	08 95       	ret

000003d6 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
 3d6:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
  debug_tx_cm();
 3da:	0e 94 ca 01 	call	0x394	; 0x394 <debug_tx_cm>
}
 3de:	08 95       	ret

000003e0 <debug_determine_digit_numbers>:

void debug_determine_digit_numbers(uint32_t num){
 3e0:	bf 92       	push	r11
 3e2:	cf 92       	push	r12
 3e4:	df 92       	push	r13
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	6b 01       	movw	r12, r22
 3f0:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 3f2:	61 15       	cp	r22, r1
 3f4:	71 05       	cpc	r23, r1
 3f6:	81 05       	cpc	r24, r1
 3f8:	91 05       	cpc	r25, r1
 3fa:	31 f4       	brne	.+12     	; 0x408 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
 3fc:	10 92 04 01 	sts	0x0104, r1
    debug.input_num_digits=1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 0c 01 	sts	0x010C, r24
 406:	23 c0       	rjmp	.+70     	; 0x44e <debug_determine_digit_numbers+0x6e>
 408:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 40a:	0b 2d       	mov	r16, r11
 40c:	10 e0       	ldi	r17, 0x00	; 0
 40e:	0e 5f       	subi	r16, 0xFE	; 254
 410:	1e 4f       	sbci	r17, 0xFE	; 254
 412:	c7 01       	movw	r24, r14
 414:	b6 01       	movw	r22, r12
 416:	2a e0       	ldi	r18, 0x0A	; 10
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	0e 94 93 03 	call	0x726	; 0x726 <__udivmodsi4>
 422:	f8 01       	movw	r30, r16
 424:	62 83       	std	Z+2, r22	; 0x02
      num/=10;
 426:	c7 01       	movw	r24, r14
 428:	b6 01       	movw	r22, r12
 42a:	2a e0       	ldi	r18, 0x0A	; 10
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	0e 94 93 03 	call	0x726	; 0x726 <__udivmodsi4>
 436:	c9 01       	movw	r24, r18
 438:	da 01       	movw	r26, r20
 43a:	6c 01       	movw	r12, r24
 43c:	7d 01       	movw	r14, r26
      i++;
 43e:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 440:	c1 14       	cp	r12, r1
 442:	d1 04       	cpc	r13, r1
 444:	e1 04       	cpc	r14, r1
 446:	f1 04       	cpc	r15, r1
 448:	01 f7       	brne	.-64     	; 0x40a <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 44a:	b0 92 0c 01 	sts	0x010C, r11
  }
}
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	ff 90       	pop	r15
 454:	ef 90       	pop	r14
 456:	df 90       	pop	r13
 458:	cf 90       	pop	r12
 45a:	bf 90       	pop	r11
 45c:	08 95       	ret

0000045e <debug_tx_number_digits>:

void debug_tx_number_digits(void){
 45e:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 460:	10 91 0c 01 	lds	r17, 0x010C
 464:	09 c0       	rjmp	.+18     	; 0x478 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 466:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 468:	e1 2f       	mov	r30, r17
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	ee 5f       	subi	r30, 0xFE	; 254
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	82 81       	ldd	r24, Z+2	; 0x02
    temp+=48;
    debug_tx_byte(temp);
 472:	80 5d       	subi	r24, 0xD0	; 208
 474:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 478:	11 23       	and	r17, r17
 47a:	a9 f7       	brne	.-22     	; 0x466 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
 47c:	1f 91       	pop	r17
 47e:	08 95       	ret

00000480 <debug_tx_number>:

void debug_tx_number(int32_t num){
 480:	ef 92       	push	r14
 482:	ff 92       	push	r15
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	7b 01       	movw	r14, r22
 48a:	8c 01       	movw	r16, r24
  if(num<0){
 48c:	97 ff       	sbrs	r25, 7
 48e:	0b c0       	rjmp	.+22     	; 0x4a6 <debug_tx_number+0x26>
    debug_tx_byte('-');
 490:	8d e2       	ldi	r24, 0x2D	; 45
 492:	0e 94 b0 00 	call	0x160	; 0x160 <debug_tx_byte>
	num=-num;
 496:	10 95       	com	r17
 498:	00 95       	com	r16
 49a:	f0 94       	com	r15
 49c:	e0 94       	com	r14
 49e:	e1 1c       	adc	r14, r1
 4a0:	f1 1c       	adc	r15, r1
 4a2:	01 1d       	adc	r16, r1
 4a4:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
 4a6:	c8 01       	movw	r24, r16
 4a8:	b7 01       	movw	r22, r14
 4aa:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <debug_determine_digit_numbers>
  debug_tx_number_digits();
 4ae:	0e 94 2f 02 	call	0x45e	; 0x45e <debug_tx_number_digits>
}
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	ef 90       	pop	r14
 4ba:	08 95       	ret

000004bc <debug_tx_number_nl>:

void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
 4bc:	0e 94 40 02 	call	0x480	; 0x480 <debug_tx_number>
  debug_tx_nl();
 4c0:	0e 94 bf 01 	call	0x37e	; 0x37e <debug_tx_nl>
}
 4c4:	08 95       	ret

000004c6 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
 4c6:	0e 94 40 02 	call	0x480	; 0x480 <debug_tx_number>
  debug_tx_sp();
 4ca:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_tx_sp>
}
 4ce:	08 95       	ret

000004d0 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
 4d0:	0e 94 40 02 	call	0x480	; 0x480 <debug_tx_number>
  debug_tx_text(",");
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
}
 4dc:	08 95       	ret

000004de <debug_tx_number_hex_nl>:

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
 4de:	0e 94 0f 01 	call	0x21e	; 0x21e <debug_tx_hex>
  debug_tx_nl();
 4e2:	0e 94 bf 01 	call	0x37e	; 0x37e <debug_tx_nl>
}
 4e6:	08 95       	ret

000004e8 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
 4e8:	0e 94 0f 01 	call	0x21e	; 0x21e <debug_tx_hex>
  debug_tx_sp();
 4ec:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_tx_sp>
}
 4f0:	08 95       	ret

000004f2 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
 4f2:	0e 94 0f 01 	call	0x21e	; 0x21e <debug_tx_hex>
  debug_tx_text(",");
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
}
 4fe:	08 95       	ret

00000500 <debug_tx_parameter_nl>:

void debug_tx_parameter_nl(char *name, int32_t num){
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	7a 01       	movw	r14, r20
 50a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 50c:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
  debug_tx_sp();
 510:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_tx_sp>
  debug_tx_number_nl(num);
 514:	c8 01       	movw	r24, r16
 516:	b7 01       	movw	r22, r14
 518:	0e 94 5e 02 	call	0x4bc	; 0x4bc <debug_tx_number_nl>
}
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	08 95       	ret

00000526 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
 526:	ef 92       	push	r14
 528:	ff 92       	push	r15
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	7a 01       	movw	r14, r20
 530:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 532:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
  debug_tx_sp();
 536:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_tx_sp>
  debug_tx_number_sp(num);
 53a:	c8 01       	movw	r24, r16
 53c:	b7 01       	movw	r22, r14
 53e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <debug_tx_number_sp>
}
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	08 95       	ret

0000054c <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
 54c:	ef 92       	push	r14
 54e:	ff 92       	push	r15
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	7a 01       	movw	r14, r20
 556:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 558:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
  debug_tx_sp();
 55c:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_tx_sp>
  debug_tx_number_cm(num);
 560:	c8 01       	movw	r24, r16
 562:	b7 01       	movw	r22, r14
 564:	0e 94 68 02 	call	0x4d0	; 0x4d0 <debug_tx_number_cm>
}
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	08 95       	ret

00000572 <debug_tx_parameter_hex_nl>:

void debug_tx_parameter_hex_nl(char *name, int32_t num){
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	7a 01       	movw	r14, r20
 57c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 57e:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
  debug_tx_sp();
 582:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_tx_sp>
  debug_tx_number_hex_nl(num);
 586:	c8 01       	movw	r24, r16
 588:	b7 01       	movw	r22, r14
 58a:	0e 94 6f 02 	call	0x4de	; 0x4de <debug_tx_number_hex_nl>
}
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	08 95       	ret

00000598 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
 598:	ef 92       	push	r14
 59a:	ff 92       	push	r15
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	7a 01       	movw	r14, r20
 5a2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 5a4:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
  debug_tx_sp();
 5a8:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_tx_sp>
  debug_tx_number_hex_sp(num);
 5ac:	c8 01       	movw	r24, r16
 5ae:	b7 01       	movw	r22, r14
 5b0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <debug_tx_number_hex_sp>
}
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	08 95       	ret

000005be <debug_tx_parameter_hex_cm>:

void debug_tx_parameter_hex_cm(char *name, int32_t num){
 5be:	ef 92       	push	r14
 5c0:	ff 92       	push	r15
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	7a 01       	movw	r14, r20
 5c8:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 5ca:	0e 94 ce 01 	call	0x39c	; 0x39c <debug_tx_text>
  debug_tx_sp();
 5ce:	0e 94 c6 01 	call	0x38c	; 0x38c <debug_tx_sp>
  debug_tx_number_hex_cm(num);
 5d2:	c8 01       	movw	r24, r16
 5d4:	b7 01       	movw	r22, r14
 5d6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <debug_tx_number_hex_cm>
}
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	ff 90       	pop	r15
 5e0:	ef 90       	pop	r14
 5e2:	08 95       	ret

000005e4 <debug_loop_counter_inc>:

void debug_loop_counter_inc(void){
  debug.loop_counter++;
 5e4:	80 91 0f 01 	lds	r24, 0x010F
 5e8:	90 91 10 01 	lds	r25, 0x0110
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	90 93 10 01 	sts	0x0110, r25
 5f2:	80 93 0f 01 	sts	0x010F, r24
  if(debug.loop_counter>DEBUG_LP_CNT_LMT){
 5f6:	85 36       	cpi	r24, 0x65	; 101
 5f8:	91 05       	cpc	r25, r1
 5fa:	b8 f0       	brcs	.+46     	; 0x62a <debug_loop_counter_inc+0x46>
    debug.count++;
 5fc:	80 91 0d 01 	lds	r24, 0x010D
 600:	90 91 0e 01 	lds	r25, 0x010E
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	90 93 0e 01 	sts	0x010E, r25
 60a:	80 93 0d 01 	sts	0x010D, r24
	if(debug.count>65000){
 60e:	89 5e       	subi	r24, 0xE9	; 233
 610:	9d 4f       	sbci	r25, 0xFD	; 253
 612:	20 f0       	brcs	.+8      	; 0x61c <debug_loop_counter_inc+0x38>
	  debug.count=0;
 614:	10 92 0e 01 	sts	0x010E, r1
 618:	10 92 0d 01 	sts	0x010D, r1
	}
    debug.loop_counter=0;
 61c:	10 92 10 01 	sts	0x0110, r1
 620:	10 92 0f 01 	sts	0x010F, r1
	debug.loop_counter_sts=1;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	80 93 11 01 	sts	0x0111, r24
 62a:	08 95       	ret

0000062c <debug_get_count>:
  }
}

uint16_t debug_get_count(void){
  return debug.count;
}
 62c:	80 91 0d 01 	lds	r24, 0x010D
 630:	90 91 0e 01 	lds	r25, 0x010E
 634:	08 95       	ret

00000636 <debug_get_loop_counter>:

uint16_t debug_get_loop_counter(void){
  return debug.loop_counter;
}
 636:	80 91 0f 01 	lds	r24, 0x010F
 63a:	90 91 10 01 	lds	r25, 0x0110
 63e:	08 95       	ret

00000640 <debug_get_loop_counter_ovf>:

uint8_t debug_get_loop_counter_ovf(void){
  if(debug.loop_counter_sts){
 640:	80 91 11 01 	lds	r24, 0x0111
 644:	88 23       	and	r24, r24
 646:	19 f0       	breq	.+6      	; 0x64e <debug_get_loop_counter_ovf+0xe>
    debug.loop_counter_sts=0;
 648:	10 92 11 01 	sts	0x0111, r1
 64c:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
  }else{
    return 0;
  }
}
 64e:	08 95       	ret

00000650 <debug_init>:


void debug_init(void){
  debug_struct_init();
 650:	0e 94 62 00 	call	0xc4	; 0xc4 <debug_struct_init>
  debug_timings_init();
 654:	0e 94 75 00 	call	0xea	; 0xea <debug_timings_init>
  debug_gpio_init();
 658:	0e 94 8b 00 	call	0x116	; 0x116 <debug_gpio_init>
}
 65c:	08 95       	ret

0000065e <__vector_5>:


ISR(PCINT2_vect){
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
 668:	2f 93       	push	r18
 66a:	3f 93       	push	r19
 66c:	4f 93       	push	r20
 66e:	5f 93       	push	r21
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 674:	4d 99       	sbic	0x09, 5	; 9
 676:	4c c0       	rjmp	.+152    	; 0x710 <__vector_5+0xb2>
 678:	46 c0       	rjmp	.+140    	; 0x706 <__vector_5+0xa8>
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
  while(TCNT1<val){}
 67a:	80 91 84 00 	lds	r24, 0x0084
 67e:	90 91 85 00 	lds	r25, 0x0085
 682:	8e 54       	subi	r24, 0x4E	; 78
 684:	92 40       	sbci	r25, 0x02	; 2
 686:	c8 f3       	brcs	.-14     	; 0x67a <__vector_5+0x1c>
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	20 e0       	ldi	r18, 0x00	; 0
ISR(PCINT2_vect){
  if(debug_rx_get()==0){
	uint8_t val=0, sts=0;
	debug_delay(DEBUG_RX_HDELAY_TICKS);
	for(uint8_t i=0;i<10;i++){
	  if(i==0){
 68e:	22 23       	and	r18, r18
 690:	71 f4       	brne	.+28     	; 0x6ae <__vector_5+0x50>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 692:	4d 9b       	sbis	0x09, 5	; 9
 694:	41 e0       	ldi	r20, 0x01	; 1
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 696:	10 92 85 00 	sts	0x0085, r1
 69a:	10 92 84 00 	sts	0x0084, r1
  while(TCNT1<val){}
 69e:	80 91 84 00 	lds	r24, 0x0084
 6a2:	90 91 85 00 	lds	r25, 0x0085
 6a6:	8c 59       	subi	r24, 0x9C	; 156
 6a8:	94 40       	sbci	r25, 0x04	; 4
 6aa:	c8 f3       	brcs	.-14     	; 0x69e <__vector_5+0x40>
 6ac:	28 c0       	rjmp	.+80     	; 0x6fe <__vector_5+0xa0>
		  debug_tx_set(1);*/
		  sts=1;
		}
		debug_delay(DEBUG_RX_DELAY_TICKS);
      }
	  else if(i>=1 && i<=8){
 6ae:	82 2f       	mov	r24, r18
 6b0:	81 50       	subi	r24, 0x01	; 1
 6b2:	88 30       	cpi	r24, 0x08	; 8
 6b4:	c0 f4       	brcc	.+48     	; 0x6e6 <__vector_5+0x88>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 6b6:	89 b1       	in	r24, 0x09	; 9
		  sts=1;
		}
		debug_delay(DEBUG_RX_DELAY_TICKS);
      }
	  else if(i>=1 && i<=8){
		val|=debug_rx_get();
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	55 e0       	ldi	r21, 0x05	; 5
 6bc:	96 95       	lsr	r25
 6be:	87 95       	ror	r24
 6c0:	5a 95       	dec	r21
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <__vector_5+0x5e>
 6c4:	81 70       	andi	r24, 0x01	; 1
 6c6:	38 2b       	or	r19, r24
		/*debug_tx_set(0);
		debug_tx_set(1);*/
		if(i!=8){
 6c8:	28 30       	cpi	r18, 0x08	; 8
 6ca:	09 f0       	breq	.+2      	; 0x6ce <__vector_5+0x70>
		  val<<=1;
 6cc:	33 0f       	add	r19, r19
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 6ce:	10 92 85 00 	sts	0x0085, r1
 6d2:	10 92 84 00 	sts	0x0084, r1
  while(TCNT1<val){}
 6d6:	80 91 84 00 	lds	r24, 0x0084
 6da:	90 91 85 00 	lds	r25, 0x0085
 6de:	8c 59       	subi	r24, 0x9C	; 156
 6e0:	94 40       	sbci	r25, 0x04	; 4
 6e2:	c8 f3       	brcs	.-14     	; 0x6d6 <__vector_5+0x78>
 6e4:	0c c0       	rjmp	.+24     	; 0x6fe <__vector_5+0xa0>
		if(i!=8){
		  val<<=1;
		}
		debug_delay(DEBUG_RX_DELAY_TICKS);
	  }
	  else if(i==9){
 6e6:	29 30       	cpi	r18, 0x09	; 9
 6e8:	51 f4       	brne	.+20     	; 0x6fe <__vector_5+0xa0>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 6ea:	4d 9b       	sbis	0x09, 5	; 9
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <__vector_5+0x9c>
		}
		debug_delay(DEBUG_RX_DELAY_TICKS);
	  }
	  else if(i==9){
		if(debug_rx_get()==1){
		  sts&=1;
 6ee:	41 70       	andi	r20, 0x01	; 1
		  if(sts==1){
 6f0:	41 30       	cpi	r20, 0x01	; 1
 6f2:	19 f4       	brne	.+6      	; 0x6fa <__vector_5+0x9c>
void debug_rx_byte_clear(void){
  debug.dr=0;
}

void debug_rx_byte_set(uint8_t val){
  debug.dr=val;
 6f4:	30 93 03 01 	sts	0x0103, r19
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__vector_5+0xa0>
uint8_t debug_rx_byte(void){
  return debug.dr;
}

void debug_rx_byte_clear(void){
  debug.dr=0;
 6fa:	10 92 03 01 	sts	0x0103, r1

ISR(PCINT2_vect){
  if(debug_rx_get()==0){
	uint8_t val=0, sts=0;
	debug_delay(DEBUG_RX_HDELAY_TICKS);
	for(uint8_t i=0;i<10;i++){
 6fe:	2f 5f       	subi	r18, 0xFF	; 255
 700:	2a 30       	cpi	r18, 0x0A	; 10
 702:	29 f6       	brne	.-118    	; 0x68e <__vector_5+0x30>
 704:	05 c0       	rjmp	.+10     	; 0x710 <__vector_5+0xb2>
  TCNT0=0;
  while(TCNT0<val){}
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 706:	10 92 85 00 	sts	0x0085, r1
 70a:	10 92 84 00 	sts	0x0084, r1
 70e:	b5 cf       	rjmp	.-150    	; 0x67a <__vector_5+0x1c>
		  debug_rx_byte_clear();
		}
	  }
	}
  }
}
 710:	9f 91       	pop	r25
 712:	8f 91       	pop	r24
 714:	5f 91       	pop	r21
 716:	4f 91       	pop	r20
 718:	3f 91       	pop	r19
 71a:	2f 91       	pop	r18
 71c:	0f 90       	pop	r0
 71e:	0f be       	out	0x3f, r0	; 63
 720:	0f 90       	pop	r0
 722:	1f 90       	pop	r1
 724:	18 95       	reti

00000726 <__udivmodsi4>:
 726:	a1 e2       	ldi	r26, 0x21	; 33
 728:	1a 2e       	mov	r1, r26
 72a:	aa 1b       	sub	r26, r26
 72c:	bb 1b       	sub	r27, r27
 72e:	fd 01       	movw	r30, r26
 730:	0d c0       	rjmp	.+26     	; 0x74c <__udivmodsi4_ep>

00000732 <__udivmodsi4_loop>:
 732:	aa 1f       	adc	r26, r26
 734:	bb 1f       	adc	r27, r27
 736:	ee 1f       	adc	r30, r30
 738:	ff 1f       	adc	r31, r31
 73a:	a2 17       	cp	r26, r18
 73c:	b3 07       	cpc	r27, r19
 73e:	e4 07       	cpc	r30, r20
 740:	f5 07       	cpc	r31, r21
 742:	20 f0       	brcs	.+8      	; 0x74c <__udivmodsi4_ep>
 744:	a2 1b       	sub	r26, r18
 746:	b3 0b       	sbc	r27, r19
 748:	e4 0b       	sbc	r30, r20
 74a:	f5 0b       	sbc	r31, r21

0000074c <__udivmodsi4_ep>:
 74c:	66 1f       	adc	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	1a 94       	dec	r1
 756:	69 f7       	brne	.-38     	; 0x732 <__udivmodsi4_loop>
 758:	60 95       	com	r22
 75a:	70 95       	com	r23
 75c:	80 95       	com	r24
 75e:	90 95       	com	r25
 760:	9b 01       	movw	r18, r22
 762:	ac 01       	movw	r20, r24
 764:	bd 01       	movw	r22, r26
 766:	cf 01       	movw	r24, r30
 768:	08 95       	ret

0000076a <_exit>:
 76a:	f8 94       	cli

0000076c <__stop_program>:
 76c:	ff cf       	rjmp	.-2      	; 0x76c <__stop_program>
