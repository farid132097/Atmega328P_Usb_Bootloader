
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000014ce  00001562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  00800132  00800132  00001594  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000acf  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ac1  00000000  00000000  000020c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064d  00000000  00000000  00003b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014be  00000000  00000000  000041d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000680  00000000  00000000  00005690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bae  00000000  00000000  00005d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cae  00000000  00000000  000068be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000756c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ec       	ldi	r30, 0xCE	; 206
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3c       	cpi	r26, 0xCD	; 205
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "captouch.h"
#include "debug.h"

int main(void){
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29

  debug_init();
      b2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debug_init>
  CapTouch_Init();
      b6:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <CapTouch_Init>
      ba:	ee 24       	eor	r14, r14
      bc:	ff 24       	eor	r15, r15
      be:	87 01       	movw	r16, r14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c0:	c0 e6       	ldi	r28, 0x60	; 96
      c2:	da ee       	ldi	r29, 0xEA	; 234
  
  uint32_t ticks=0;
  while(1){
    
    CapTouch_Scan_Sensors(ticks);
      c4:	c8 01       	movw	r24, r16
      c6:	b7 01       	movw	r22, r14
      c8:	0e 94 3b 09 	call	0x1276	; 0x1276 <CapTouch_Scan_Sensors>
	ticks++;
      cc:	08 94       	sec
      ce:	e1 1c       	adc	r14, r1
      d0:	f1 1c       	adc	r15, r1
      d2:	01 1d       	adc	r16, r1
      d4:	11 1d       	adc	r17, r1
	debug_tx_number_nl(CapTouch_Get_Long_Press_Reg());
      d6:	0e 94 b0 09 	call	0x1360	; 0x1360 <CapTouch_Get_Long_Press_Reg>
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	a0 e0       	ldi	r26, 0x00	; 0
      de:	b0 e0       	ldi	r27, 0x00	; 0
      e0:	bc 01       	movw	r22, r24
      e2:	cd 01       	movw	r24, r26
      e4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <debug_tx_number_nl>
	
	
	if      (CapTouch_Get_Long_Press_Reg()==0b01){
      e8:	0e 94 b0 09 	call	0x1360	; 0x1360 <CapTouch_Get_Long_Press_Reg>
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	19 f4       	brne	.+6      	; 0xf6 <main+0x50>
	  debug_tx_text_nl("LP BT 0");
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	0d c0       	rjmp	.+26     	; 0x110 <main+0x6a>
	}else if(CapTouch_Get_Long_Press_Reg()==0b10){
      f6:	0e 94 b0 09 	call	0x1360	; 0x1360 <CapTouch_Get_Long_Press_Reg>
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	19 f4       	brne	.+6      	; 0x104 <main+0x5e>
	  debug_tx_text_nl("LP BT 1");
      fe:	88 e0       	ldi	r24, 0x08	; 8
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	06 c0       	rjmp	.+12     	; 0x110 <main+0x6a>
	}else if(CapTouch_Get_Long_Press_Reg()==0b11){
     104:	0e 94 b0 09 	call	0x1360	; 0x1360 <CapTouch_Get_Long_Press_Reg>
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	21 f4       	brne	.+8      	; 0x114 <main+0x6e>
	  debug_tx_text_nl("LP BT 1 & 0");
     10c:	80 e1       	ldi	r24, 0x10	; 16
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <debug_tx_text_nl>
     114:	ce 01       	movw	r24, r28
     116:	01 97       	sbiw	r24, 0x01	; 1
     118:	f1 f7       	brne	.-4      	; 0x116 <main+0x70>
     11a:	d4 cf       	rjmp	.-88     	; 0xc4 <main+0x1e>

0000011c <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     11c:	10 92 32 01 	sts	0x0132, r1
  debug.datareg=0;
     120:	10 92 33 01 	sts	0x0133, r1
  debug.databsy=1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 34 01 	sts	0x0134, r24
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     12e:	fc 01       	movw	r30, r24
     130:	ee 5c       	subi	r30, 0xCE	; 206
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	13 82       	std	Z+3, r1	; 0x03
     136:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     138:	80 32       	cpi	r24, 0x20	; 32
     13a:	91 05       	cpc	r25, r1
     13c:	c1 f7       	brne	.-16     	; 0x12e <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     13e:	10 92 55 01 	sts	0x0155, r1
     142:	e6 e5       	ldi	r30, 0x56	; 86
     144:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     146:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	ee 35       	cpi	r30, 0x5E	; 94
     14c:	f8 07       	cpc	r31, r24
     14e:	d9 f7       	brne	.-10     	; 0x146 <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     150:	10 82       	st	Z, r1
}
     152:	08 95       	ret

00000154 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     154:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     156:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     158:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     160:	e8 e6       	ldi	r30, 0x68	; 104
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	82 60       	ori	r24, 0x02	; 2
     168:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     16a:	ec e6       	ldi	r30, 0x6C	; 108
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	80 81       	ld	r24, Z
     170:	80 64       	ori	r24, 0x40	; 64
     172:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     174:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     176:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     178:	08 95       	ret

0000017a <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     17e:	ee e6       	ldi	r30, 0x6E	; 110
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	10 82       	st	Z, r1
  TCNT0 =200;
     184:	88 ec       	ldi	r24, 0xC8	; 200
     186:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     188:	84 e0       	ldi	r24, 0x04	; 4
     18a:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     190:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     192:	08 95       	ret

00000194 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     194:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     198:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     19a:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     19c:	08 95       	ret

0000019e <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     19e:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     1a0:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     1a2:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     1a4:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     1a6:	08 95       	ret

000001a8 <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     1a8:	5d 9a       	sbi	0x0b, 5	; 11
}
     1aa:	08 95       	ret

000001ac <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     1ac:	5d 98       	cbi	0x0b, 5	; 11
}
     1ae:	08 95       	ret

000001b0 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     1b4:	5d 9a       	sbi	0x0b, 5	; 11
     1b6:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     1b8:	5d 98       	cbi	0x0b, 5	; 11
     1ba:	08 95       	ret

000001bc <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     1bc:	86 b1       	in	r24, 0x06	; 6
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	26 e0       	ldi	r18, 0x06	; 6
     1c2:	96 95       	lsr	r25
     1c4:	87 95       	ror	r24
     1c6:	2a 95       	dec	r18
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     1ca:	81 70       	andi	r24, 0x01	; 1
     1cc:	08 95       	ret

000001ce <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     1ce:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     1d0:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     1d6:	86 b5       	in	r24, 0x26	; 38
     1d8:	82 33       	cpi	r24, 0x32	; 50
     1da:	e8 f3       	brcs	.-6      	; 0x1d6 <debug_delay+0x8>
    TCNT0=0;
     1dc:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     1de:	86 b5       	in	r24, 0x26	; 38
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	82 17       	cp	r24, r18
     1e4:	93 07       	cpc	r25, r19
     1e6:	d8 f3       	brcs	.-10     	; 0x1de <debug_delay+0x10>
  TCCR0B=0;
     1e8:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     1ea:	08 95       	ret

000001ec <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     1ec:	80 91 2a 01 	lds	r24, 0x012A
     1f0:	90 91 2b 01 	lds	r25, 0x012B
     1f4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     1f8:	08 95       	ret

000001fa <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     1fa:	80 91 2c 01 	lds	r24, 0x012C
     1fe:	90 91 2d 01 	lds	r25, 0x012D
     202:	0e 94 e7 00 	call	0x1ce	; 0x1ce <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     206:	08 95       	ret

00000208 <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     208:	80 91 2e 01 	lds	r24, 0x012E
     20c:	90 91 2f 01 	lds	r25, 0x012F
     210:	0e 94 e7 00 	call	0x1ce	; 0x1ce <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     214:	08 95       	ret

00000216 <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     216:	df 92       	push	r13
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	2a 97       	sbiw	r28, 0x0a	; 10
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	de bf       	out	0x3e, r29	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     234:	fe 01       	movw	r30, r28
     236:	31 96       	adiw	r30, 0x01	; 1
     238:	9a e0       	ldi	r25, 0x0A	; 10
     23a:	df 01       	movw	r26, r30
     23c:	1d 92       	st	X+, r1
     23e:	9a 95       	dec	r25
     240:	e9 f7       	brne	.-6      	; 0x23c <debug_tx_byte+0x26>
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	9a 87       	std	Y+10, r25	; 0x0a
     246:	fe 01       	movw	r30, r28
     248:	32 96       	adiw	r30, 0x02	; 2
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     24e:	48 2f       	mov	r20, r24
     250:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     252:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     254:	ca 01       	movw	r24, r20
     256:	02 2e       	mov	r0, r18
     258:	02 c0       	rjmp	.+4      	; 0x25e <debug_tx_byte+0x48>
     25a:	95 95       	asr	r25
     25c:	87 95       	ror	r24
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <debug_tx_byte+0x44>
     262:	80 ff       	sbrs	r24, 0
     264:	02 c0       	rjmp	.+4      	; 0x26a <debug_tx_byte+0x54>
	  buf[i+1]=1;
     266:	60 83       	st	Z, r22
     268:	01 c0       	rjmp	.+2      	; 0x26c <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     26a:	10 82       	st	Z, r1
     26c:	2f 5f       	subi	r18, 0xFF	; 255
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     272:	28 30       	cpi	r18, 0x08	; 8
     274:	31 05       	cpc	r19, r1
     276:	71 f7       	brne	.-36     	; 0x254 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     278:	df b6       	in	r13, 0x3f	; 63
  cli();
     27a:	f8 94       	cli
     27c:	8e 01       	movw	r16, r28
     27e:	0f 5f       	subi	r16, 0xFF	; 255
     280:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     282:	3b e0       	ldi	r19, 0x0B	; 11
     284:	e3 2e       	mov	r14, r19
     286:	f1 2c       	mov	r15, r1
     288:	ec 0e       	add	r14, r28
     28a:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     28c:	f8 01       	movw	r30, r16
     28e:	80 81       	ld	r24, Z
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	11 f4       	brne	.+4      	; 0x298 <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     294:	5d 9a       	sbi	0x0b, 5	; 11
     296:	01 c0       	rjmp	.+2      	; 0x29a <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     298:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     29a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <debug_delay_index_0>
     29e:	0f 5f       	subi	r16, 0xFF	; 255
     2a0:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     2a2:	0e 15       	cp	r16, r14
     2a4:	1f 05       	cpc	r17, r15
     2a6:	91 f7       	brne	.-28     	; 0x28c <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     2a8:	df be       	out	0x3f, r13	; 63
}
     2aa:	2a 96       	adiw	r28, 0x0a	; 10
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	cf 91       	pop	r28
     2b8:	df 91       	pop	r29
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	08 95       	ret

000002c6 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     2cc:	36 9b       	sbis	0x06, 6	; 6
     2ce:	21 c0       	rjmp	.+66     	; 0x312 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	17 c0       	rjmp	.+46     	; 0x302 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     2d4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     2d8:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     2da:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     2dc:	17 30       	cpi	r17, 0x07	; 7
     2de:	09 f0       	breq	.+2      	; 0x2e2 <debug_rx_byte+0x1c>
	    val>>=1;
     2e0:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     2e2:	1f 5f       	subi	r17, 0xFF	; 255
     2e4:	18 30       	cpi	r17, 0x08	; 8
     2e6:	b1 f7       	brne	.-20     	; 0x2d4 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     2e8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     2ec:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     2ee:	f6 fc       	sbrc	r15, 6
     2f0:	07 c0       	rjmp	.+14     	; 0x300 <debug_rx_byte+0x3a>
     2f2:	86 ff       	sbrs	r24, 6
     2f4:	05 c0       	rjmp	.+10     	; 0x300 <debug_rx_byte+0x3a>
	  debug.datareg=val;
     2f6:	00 93 33 01 	sts	0x0133, r16
	  debug.error=0x00;
     2fa:	10 92 32 01 	sts	0x0132, r1
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 32 01 	sts	0x0132, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     306:	80 91 33 01 	lds	r24, 0x0133
}
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     312:	0e 94 04 01 	call	0x208	; 0x208 <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     316:	f6 b0       	in	r15, 0x06	; 6
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	db cf       	rjmp	.-74     	; 0x2d4 <debug_rx_byte+0xe>

0000031e <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     31e:	80 91 33 01 	lds	r24, 0x0133
}
     322:	08 95       	ret

00000324 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     324:	10 92 33 01 	sts	0x0133, r1
}
     328:	08 95       	ret

0000032a <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     32a:	80 93 33 01 	sts	0x0133, r24
}
     32e:	08 95       	ret

00000330 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     330:	bf 92       	push	r11
     332:	cf 92       	push	r12
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	7b 01       	movw	r14, r22
     344:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	e8 16       	cp	r14, r24
     34a:	f1 04       	cpc	r15, r1
     34c:	01 05       	cpc	r16, r1
     34e:	11 05       	cpc	r17, r1
     350:	09 f0       	breq	.+2      	; 0x354 <debug_tx_hex+0x24>
     352:	30 f4       	brcc	.+12     	; 0x360 <debug_tx_hex+0x30>
     354:	c8 e0       	ldi	r28, 0x08	; 8
     356:	d0 e0       	ldi	r29, 0x00	; 0
     358:	62 e0       	ldi	r22, 0x02	; 2
     35a:	c6 2e       	mov	r12, r22
     35c:	d1 2c       	mov	r13, r1
     35e:	14 c0       	rjmp	.+40     	; 0x388 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	e8 16       	cp	r14, r24
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	f8 06       	cpc	r15, r24
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	08 07       	cpc	r16, r24
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	18 07       	cpc	r17, r24
     370:	30 f0       	brcs	.+12     	; 0x37e <debug_tx_hex+0x4e>
     372:	c0 e2       	ldi	r28, 0x20	; 32
     374:	d0 e0       	ldi	r29, 0x00	; 0
     376:	58 e0       	ldi	r21, 0x08	; 8
     378:	c5 2e       	mov	r12, r21
     37a:	d1 2c       	mov	r13, r1
     37c:	05 c0       	rjmp	.+10     	; 0x388 <debug_tx_hex+0x58>
     37e:	c0 e1       	ldi	r28, 0x10	; 16
     380:	d0 e0       	ldi	r29, 0x00	; 0
     382:	44 e0       	ldi	r20, 0x04	; 4
     384:	c4 2e       	mov	r12, r20
     386:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     388:	80 e3       	ldi	r24, 0x30	; 48
     38a:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
  debug_tx_byte('x');
     38e:	88 e7       	ldi	r24, 0x78	; 120
     390:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
     394:	bb 24       	eor	r11, r11
     396:	17 c0       	rjmp	.+46     	; 0x3c6 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     398:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     39a:	d8 01       	movw	r26, r16
     39c:	c7 01       	movw	r24, r14
     39e:	0c 2e       	mov	r0, r28
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <debug_tx_hex+0x7a>
     3a2:	b6 95       	lsr	r27
     3a4:	a7 95       	ror	r26
     3a6:	97 95       	ror	r25
     3a8:	87 95       	ror	r24
     3aa:	0a 94       	dec	r0
     3ac:	d2 f7       	brpl	.-12     	; 0x3a2 <debug_tx_hex+0x72>
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	8f 70       	andi	r24, 0x0F	; 15
     3b2:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     3b4:	8a 30       	cpi	r24, 0x0A	; 10
     3b6:	91 05       	cpc	r25, r1
     3b8:	10 f0       	brcs	.+4      	; 0x3be <debug_tx_hex+0x8e>
	    hex_digit+=55;
     3ba:	c7 96       	adiw	r24, 0x37	; 55
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     3be:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     3c0:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     3c4:	b3 94       	inc	r11
     3c6:	8b 2d       	mov	r24, r11
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	8c 15       	cp	r24, r12
     3cc:	9d 05       	cpc	r25, r13
     3ce:	20 f3       	brcs	.-56     	; 0x398 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	bf 90       	pop	r11
     3e2:	08 95       	ret

000003e4 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     3e4:	af 92       	push	r10
     3e6:	bf 92       	push	r11
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	7b 01       	movw	r14, r22
     3fa:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     3fc:	6f 3f       	cpi	r22, 0xFF	; 255
     3fe:	71 05       	cpc	r23, r1
     400:	81 05       	cpc	r24, r1
     402:	91 05       	cpc	r25, r1
     404:	09 f0       	breq	.+2      	; 0x408 <debug_tx_bin+0x24>
     406:	18 f4       	brcc	.+6      	; 0x40e <debug_tx_bin+0x2a>
     408:	f7 e0       	ldi	r31, 0x07	; 7
     40a:	df 2e       	mov	r13, r31
     40c:	0d c0       	rjmp	.+26     	; 0x428 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     40e:	60 30       	cpi	r22, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	73 07       	cpc	r23, r19
     414:	31 e0       	ldi	r19, 0x01	; 1
     416:	83 07       	cpc	r24, r19
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	93 07       	cpc	r25, r19
     41c:	18 f0       	brcs	.+6      	; 0x424 <debug_tx_bin+0x40>
     41e:	ef e1       	ldi	r30, 0x1F	; 31
     420:	de 2e       	mov	r13, r30
     422:	02 c0       	rjmp	.+4      	; 0x428 <debug_tx_bin+0x44>
     424:	7f e0       	ldi	r23, 0x0F	; 15
     426:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     428:	80 e3       	ldi	r24, 0x30	; 48
     42a:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
  debug_tx_byte('b');
     42e:	82 e6       	ldi	r24, 0x62	; 98
     430:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
     434:	c0 e0       	ldi	r28, 0x00	; 0
     436:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     438:	cd 2c       	mov	r12, r13
     43a:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     43c:	56 01       	movw	r10, r12
     43e:	08 94       	sec
     440:	a1 1c       	adc	r10, r1
     442:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     444:	c6 01       	movw	r24, r12
     446:	8c 1b       	sub	r24, r28
     448:	9d 0b       	sbc	r25, r29
     44a:	a8 01       	movw	r20, r16
     44c:	97 01       	movw	r18, r14
     44e:	04 c0       	rjmp	.+8      	; 0x458 <debug_tx_bin+0x74>
     450:	56 95       	lsr	r21
     452:	47 95       	ror	r20
     454:	37 95       	ror	r19
     456:	27 95       	ror	r18
     458:	8a 95       	dec	r24
     45a:	d2 f7       	brpl	.-12     	; 0x450 <debug_tx_bin+0x6c>
     45c:	da 01       	movw	r26, r20
     45e:	c9 01       	movw	r24, r18
     460:	81 70       	andi	r24, 0x01	; 1
     462:	90 70       	andi	r25, 0x00	; 0
     464:	89 2b       	or	r24, r25
     466:	11 f0       	breq	.+4      	; 0x46c <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     468:	81 e3       	ldi	r24, 0x31	; 49
     46a:	01 c0       	rjmp	.+2      	; 0x46e <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     46c:	80 e3       	ldi	r24, 0x30	; 48
     46e:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
     472:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     474:	ca 15       	cp	r28, r10
     476:	db 05       	cpc	r29, r11
     478:	29 f7       	brne	.-54     	; 0x444 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	bf 90       	pop	r11
     48c:	af 90       	pop	r10
     48e:	08 95       	ret

00000490 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     490:	8d e0       	ldi	r24, 0x0D	; 13
     492:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
  debug_tx_byte('\n');
     496:	8a e0       	ldi	r24, 0x0A	; 10
     498:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
}
     49c:	08 95       	ret

0000049e <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     49e:	80 e2       	ldi	r24, 0x20	; 32
     4a0:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
}
     4a4:	08 95       	ret

000004a6 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     4a6:	8c e2       	ldi	r24, 0x2C	; 44
     4a8:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
}
     4ac:	08 95       	ret

000004ae <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	ec 01       	movw	r28, r24
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     4ba:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
        i++;
     4be:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     4c0:	fe 01       	movw	r30, r28
     4c2:	e1 0f       	add	r30, r17
     4c4:	f1 1d       	adc	r31, r1
     4c6:	80 81       	ld	r24, Z
     4c8:	88 23       	and	r24, r24
     4ca:	b9 f7       	brne	.-18     	; 0x4ba <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	08 95       	ret

000004d4 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     4d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_nl();
     4d8:	0e 94 48 02 	call	0x490	; 0x490 <debug_tx_nl>
}
     4dc:	08 95       	ret

000004de <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     4de:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     4e2:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
}
     4e6:	08 95       	ret

000004e8 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     4e8:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_cm();
     4ec:	0e 94 53 02 	call	0x4a6	; 0x4a6 <debug_tx_cm>
}
     4f0:	08 95       	ret

000004f2 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	6b 01       	movw	r12, r22
     502:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     504:	61 15       	cp	r22, r1
     506:	71 05       	cpc	r23, r1
     508:	81 05       	cpc	r24, r1
     50a:	91 05       	cpc	r25, r1
     50c:	31 f4       	brne	.+12     	; 0x51a <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     50e:	10 92 56 01 	sts	0x0156, r1
    debug.input_num_digits=1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 5e 01 	sts	0x015E, r24
     518:	23 c0       	rjmp	.+70     	; 0x560 <debug_determine_digit_numbers+0x6e>
     51a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     51c:	0b 2d       	mov	r16, r11
     51e:	10 e0       	ldi	r17, 0x00	; 0
     520:	0e 5c       	subi	r16, 0xCE	; 206
     522:	1e 4f       	sbci	r17, 0xFE	; 254
     524:	c7 01       	movw	r24, r14
     526:	b6 01       	movw	r22, r12
     528:	2a e0       	ldi	r18, 0x0A	; 10
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	0e 94 28 0a 	call	0x1450	; 0x1450 <__udivmodsi4>
     534:	f8 01       	movw	r30, r16
     536:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     538:	c7 01       	movw	r24, r14
     53a:	b6 01       	movw	r22, r12
     53c:	2a e0       	ldi	r18, 0x0A	; 10
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	0e 94 28 0a 	call	0x1450	; 0x1450 <__udivmodsi4>
     548:	c9 01       	movw	r24, r18
     54a:	da 01       	movw	r26, r20
     54c:	6c 01       	movw	r12, r24
     54e:	7d 01       	movw	r14, r26
      i++;
     550:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     552:	c1 14       	cp	r12, r1
     554:	d1 04       	cpc	r13, r1
     556:	e1 04       	cpc	r14, r1
     558:	f1 04       	cpc	r15, r1
     55a:	01 f7       	brne	.-64     	; 0x51c <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     55c:	b0 92 5e 01 	sts	0x015E, r11
  }
}
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	cf 90       	pop	r12
     56c:	bf 90       	pop	r11
     56e:	08 95       	ret

00000570 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     570:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     572:	10 91 5e 01 	lds	r17, 0x015E
     576:	09 c0       	rjmp	.+18     	; 0x58a <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     578:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     57a:	e1 2f       	mov	r30, r17
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	ee 5c       	subi	r30, 0xCE	; 206
     580:	fe 4f       	sbci	r31, 0xFE	; 254
     582:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     584:	80 5d       	subi	r24, 0xD0	; 208
     586:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     58a:	11 23       	and	r17, r17
     58c:	a9 f7       	brne	.-22     	; 0x578 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     58e:	1f 91       	pop	r17
     590:	08 95       	ret

00000592 <debug_tx_number>:

void debug_tx_number(int32_t num){
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	7b 01       	movw	r14, r22
     59c:	8c 01       	movw	r16, r24
  if(num<0){
     59e:	97 ff       	sbrs	r25, 7
     5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <debug_tx_number+0x26>
    debug_tx_byte('-');
     5a2:	8d e2       	ldi	r24, 0x2D	; 45
     5a4:	0e 94 0b 01 	call	0x216	; 0x216 <debug_tx_byte>
	num=-num;
     5a8:	10 95       	com	r17
     5aa:	00 95       	com	r16
     5ac:	f0 94       	com	r15
     5ae:	e0 94       	com	r14
     5b0:	e1 1c       	adc	r14, r1
     5b2:	f1 1c       	adc	r15, r1
     5b4:	01 1d       	adc	r16, r1
     5b6:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     5b8:	c8 01       	movw	r24, r16
     5ba:	b7 01       	movw	r22, r14
     5bc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     5c0:	0e 94 b8 02 	call	0x570	; 0x570 <debug_tx_number_digits>
}
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	08 95       	ret

000005ce <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     5ce:	0e 94 c9 02 	call	0x592	; 0x592 <debug_tx_number>
  debug_tx_nl();
     5d2:	0e 94 48 02 	call	0x490	; 0x490 <debug_tx_nl>
}
     5d6:	08 95       	ret

000005d8 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     5d8:	0e 94 c9 02 	call	0x592	; 0x592 <debug_tx_number>
  debug_tx_sp();
     5dc:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
}
     5e0:	08 95       	ret

000005e2 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     5e2:	0e 94 c9 02 	call	0x592	; 0x592 <debug_tx_number>
  debug_tx_text(",");
     5e6:	8c e1       	ldi	r24, 0x1C	; 28
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
}
     5ee:	08 95       	ret

000005f0 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     5f0:	0e 94 98 01 	call	0x330	; 0x330 <debug_tx_hex>
  debug_tx_nl();
     5f4:	0e 94 48 02 	call	0x490	; 0x490 <debug_tx_nl>
}
     5f8:	08 95       	ret

000005fa <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     5fa:	0e 94 98 01 	call	0x330	; 0x330 <debug_tx_hex>
  debug_tx_sp();
     5fe:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
}
     602:	08 95       	ret

00000604 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     604:	0e 94 98 01 	call	0x330	; 0x330 <debug_tx_hex>
  debug_tx_text(",");
     608:	8c e1       	ldi	r24, 0x1C	; 28
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
}
     610:	08 95       	ret

00000612 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     612:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <debug_tx_bin>
  debug_tx_nl();
     616:	0e 94 48 02 	call	0x490	; 0x490 <debug_tx_nl>
}
     61a:	08 95       	ret

0000061c <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     61c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <debug_tx_bin>
  debug_tx_sp();
     620:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
}
     624:	08 95       	ret

00000626 <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     626:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <debug_tx_bin>
  debug_tx_text(",");
     62a:	8c e1       	ldi	r24, 0x1C	; 28
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
}
     632:	08 95       	ret

00000634 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	7a 01       	movw	r14, r20
     63e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     640:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     644:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
  debug_tx_number_nl(num);
     648:	c8 01       	movw	r24, r16
     64a:	b7 01       	movw	r22, r14
     64c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <debug_tx_number_nl>
}
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	ff 90       	pop	r15
     656:	ef 90       	pop	r14
     658:	08 95       	ret

0000065a <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	7a 01       	movw	r14, r20
     664:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     666:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     66a:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
  debug_tx_number_sp(num);
     66e:	c8 01       	movw	r24, r16
     670:	b7 01       	movw	r22, r14
     672:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <debug_tx_number_sp>
}
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	08 95       	ret

00000680 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	7a 01       	movw	r14, r20
     68a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     68c:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     690:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
  debug_tx_number_cm(num);
     694:	c8 01       	movw	r24, r16
     696:	b7 01       	movw	r22, r14
     698:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <debug_tx_number_cm>
}
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	08 95       	ret

000006a6 <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	7a 01       	movw	r14, r20
     6b0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     6b2:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     6b6:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     6ba:	c8 01       	movw	r24, r16
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <debug_tx_number_hex_nl>
}
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	08 95       	ret

000006cc <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	7a 01       	movw	r14, r20
     6d6:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     6d8:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     6dc:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     6e0:	c8 01       	movw	r24, r16
     6e2:	b7 01       	movw	r22, r14
     6e4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <debug_tx_number_hex_sp>
}
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	08 95       	ret

000006f2 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	7a 01       	movw	r14, r20
     6fc:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     6fe:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     702:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     706:	c8 01       	movw	r24, r16
     708:	b7 01       	movw	r22, r14
     70a:	0e 94 02 03 	call	0x604	; 0x604 <debug_tx_number_hex_cm>
}
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	08 95       	ret

00000718 <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	7a 01       	movw	r14, r20
     722:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     724:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     728:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     72c:	c8 01       	movw	r24, r16
     72e:	b7 01       	movw	r22, r14
     730:	0e 94 09 03 	call	0x612	; 0x612 <debug_tx_number_bin_nl>
}
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	08 95       	ret

0000073e <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	7a 01       	movw	r14, r20
     748:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     74a:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     74e:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     752:	c8 01       	movw	r24, r16
     754:	b7 01       	movw	r22, r14
     756:	0e 94 0e 03 	call	0x61c	; 0x61c <debug_tx_number_bin_sp>
}
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	08 95       	ret

00000764 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	7a 01       	movw	r14, r20
     76e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     770:	0e 94 57 02 	call	0x4ae	; 0x4ae <debug_tx_text>
  debug_tx_sp();
     774:	0e 94 4f 02 	call	0x49e	; 0x49e <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     778:	c8 01       	movw	r24, r16
     77a:	b7 01       	movw	r22, r14
     77c:	0e 94 13 03 	call	0x626	; 0x626 <debug_tx_number_bin_cm>
}
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	08 95       	ret

0000078a <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     78a:	e2 e3       	ldi	r30, 0x32	; 50
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	e8 0f       	add	r30, r24
     790:	f1 1d       	adc	r31, r1
     792:	83 81       	ldd	r24, Z+3	; 0x03
}
     794:	08 95       	ret

00000796 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     796:	80 91 55 01 	lds	r24, 0x0155
}
     79a:	08 95       	ret

0000079c <debug_flush_buf>:

void debug_flush_buf(void){
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     7a0:	fc 01       	movw	r30, r24
     7a2:	ee 5c       	subi	r30, 0xCE	; 206
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	13 82       	std	Z+3, r1	; 0x03
     7a8:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     7aa:	80 32       	cpi	r24, 0x20	; 32
     7ac:	91 05       	cpc	r25, r1
     7ae:	c1 f7       	brne	.-16     	; 0x7a0 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     7b0:	10 92 55 01 	sts	0x0155, r1
}
     7b4:	08 95       	ret

000007b6 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     7b6:	80 91 34 01 	lds	r24, 0x0134
}
     7ba:	08 95       	ret

000007bc <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     7bc:	80 91 34 01 	lds	r24, 0x0134
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     7c0:	88 23       	and	r24, r24
     7c2:	11 f0       	breq	.+4      	; 0x7c8 <debug_data_available_rx_buf+0xc>
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     7c8:	80 91 55 01 	lds	r24, 0x0155
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	88 23       	and	r24, r24
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <debug_data_available_rx_buf+0x18>
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     7d8:	89 2f       	mov	r24, r25
     7da:	08 95       	ret

000007dc <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     7dc:	80 91 55 01 	lds	r24, 0x0155
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     7e0:	08 95       	ret

000007e2 <debug_init>:

void debug_init(void){
  debug_struct_init();
     7e2:	0e 94 8e 00 	call	0x11c	; 0x11c <debug_struct_init>
  debug_timings_init();
     7e6:	0e 94 aa 00 	call	0x154	; 0x154 <debug_timings_init>
  debug_gpio_init();
     7ea:	0e 94 cf 00 	call	0x19e	; 0x19e <debug_gpio_init>
}
     7ee:	08 95       	ret

000007f0 <__vector_4>:


ISR(ISR_PCINT_VECT){
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	2f 93       	push	r18
     7fc:	3f 93       	push	r19
     7fe:	4f 93       	push	r20
     800:	5f 93       	push	r21
     802:	6f 93       	push	r22
     804:	7f 93       	push	r23
     806:	8f 93       	push	r24
     808:	9f 93       	push	r25
     80a:	af 93       	push	r26
     80c:	bf 93       	push	r27
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
  debug.databsy=1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	80 93 34 01 	sts	0x0134, r24
  uint8_t val=debug_rx_byte();
     818:	0e 94 63 01 	call	0x2c6	; 0x2c6 <debug_rx_byte>
     81c:	98 2f       	mov	r25, r24
  if(debug.error==0){
     81e:	80 91 32 01 	lds	r24, 0x0132
     822:	88 23       	and	r24, r24
     824:	99 f4       	brne	.+38     	; 0x84c <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     826:	e0 91 55 01 	lds	r30, 0x0155
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	ee 5c       	subi	r30, 0xCE	; 206
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     832:	80 91 55 01 	lds	r24, 0x0155
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	80 93 55 01 	sts	0x0155, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     83c:	80 91 55 01 	lds	r24, 0x0155
     840:	81 32       	cpi	r24, 0x21	; 33
     842:	10 f0       	brcs	.+4      	; 0x848 <__vector_4+0x58>
	  debug.bufindex=0;
     844:	10 92 55 01 	sts	0x0155, r1
	}
    debug_timer_start();
     848:	0e 94 bd 00 	call	0x17a	; 0x17a <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     84c:	ff 91       	pop	r31
     84e:	ef 91       	pop	r30
     850:	bf 91       	pop	r27
     852:	af 91       	pop	r26
     854:	9f 91       	pop	r25
     856:	8f 91       	pop	r24
     858:	7f 91       	pop	r23
     85a:	6f 91       	pop	r22
     85c:	5f 91       	pop	r21
     85e:	4f 91       	pop	r20
     860:	3f 91       	pop	r19
     862:	2f 91       	pop	r18
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <__vector_16>:

ISR(TIMER_OVF_VECT){
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     878:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     87c:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     87e:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     880:	10 92 34 01 	sts	0x0134, r1
}
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <CapTouch_Struct_Init>:
#ifdef CAPTOUCH_ENABLE_LPF
iir_lpf_t  IIR_LPF[CAPTOUCH_TOTAL_TOUCH_KEY*3];
#endif
  
void CapTouch_Struct_Init(void){
  CapTouch.Channel=0;
     88e:	10 92 5f 01 	sts	0x015F, r1
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY;i++){
    CapTouch.Result[i]=0;
     892:	10 92 60 01 	sts	0x0160, r1
    CapTouch.CalibrationValue[i]=0;
     896:	10 92 63 01 	sts	0x0163, r1
     89a:	10 92 62 01 	sts	0x0162, r1
    CapTouch.RawADC1[i]=0;
     89e:	10 92 67 01 	sts	0x0167, r1
     8a2:	10 92 66 01 	sts	0x0166, r1
    CapTouch.RawADC2[i]=0;
     8a6:	10 92 6b 01 	sts	0x016B, r1
     8aa:	10 92 6a 01 	sts	0x016A, r1
    CapTouch.RawDiffADC[i]=0;
     8ae:	10 92 6f 01 	sts	0x016F, r1
     8b2:	10 92 6e 01 	sts	0x016E, r1
    CapTouch.DiffThreshold[i]=CAPTOUCH_THRESHOLD;
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	90 93 73 01 	sts	0x0173, r25
     8be:	80 93 72 01 	sts	0x0172, r24
    CapTouch.TriggerMethod[i]=0;
     8c2:	10 92 76 01 	sts	0x0176, r1
    CapTouch.LastTouchState[i]=0;
     8c6:	10 92 78 01 	sts	0x0178, r1
    CapTouch.TouchDuration[i]=0;
     8ca:	10 92 7a 01 	sts	0x017A, r1
     8ce:	10 92 7b 01 	sts	0x017B, r1
     8d2:	10 92 7c 01 	sts	0x017C, r1
     8d6:	10 92 7d 01 	sts	0x017D, r1
    CapTouch.TouchDurationTemp[i]=0;
     8da:	10 92 82 01 	sts	0x0182, r1
     8de:	10 92 83 01 	sts	0x0183, r1
     8e2:	10 92 84 01 	sts	0x0184, r1
     8e6:	10 92 85 01 	sts	0x0185, r1
    CapTouch.MinShortPressTime=CAPTOUCH_SHORT_PRESS_TIME_MIN;
    CapTouch.MaxShortPressTime=CAPTOUCH_SHORT_PRESS_TIME_MAX;
    CapTouch.LongPressTime=CAPTOUCH_LONG_PRESS_TIME;
    CapTouch.LongPressFlag[i]=0;
     8ea:	10 92 90 01 	sts	0x0190, r1
	CapTouch.ShortPressReg=0;
	CapTouch.LongPressReg=0;
    CapTouch.UsingReferenceTimer=0;
    CapTouch.ErrorCode[i]=0;
     8ee:	10 92 95 01 	sts	0x0195, r1
#endif
  
void CapTouch_Struct_Init(void){
  CapTouch.Channel=0;
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY;i++){
    CapTouch.Result[i]=0;
     8f2:	10 92 61 01 	sts	0x0161, r1
    CapTouch.CalibrationValue[i]=0;
     8f6:	10 92 65 01 	sts	0x0165, r1
     8fa:	10 92 64 01 	sts	0x0164, r1
    CapTouch.RawADC1[i]=0;
     8fe:	10 92 69 01 	sts	0x0169, r1
     902:	10 92 68 01 	sts	0x0168, r1
    CapTouch.RawADC2[i]=0;
     906:	10 92 6d 01 	sts	0x016D, r1
     90a:	10 92 6c 01 	sts	0x016C, r1
    CapTouch.RawDiffADC[i]=0;
     90e:	10 92 71 01 	sts	0x0171, r1
     912:	10 92 70 01 	sts	0x0170, r1
    CapTouch.DiffThreshold[i]=CAPTOUCH_THRESHOLD;
     916:	90 93 75 01 	sts	0x0175, r25
     91a:	80 93 74 01 	sts	0x0174, r24
    CapTouch.TriggerMethod[i]=0;
     91e:	10 92 77 01 	sts	0x0177, r1
    CapTouch.LastTouchState[i]=0;
     922:	10 92 79 01 	sts	0x0179, r1
    CapTouch.TouchDuration[i]=0;
     926:	10 92 7e 01 	sts	0x017E, r1
     92a:	10 92 7f 01 	sts	0x017F, r1
     92e:	10 92 80 01 	sts	0x0180, r1
     932:	10 92 81 01 	sts	0x0181, r1
    CapTouch.TouchDurationTemp[i]=0;
     936:	10 92 86 01 	sts	0x0186, r1
     93a:	10 92 87 01 	sts	0x0187, r1
     93e:	10 92 88 01 	sts	0x0188, r1
     942:	10 92 89 01 	sts	0x0189, r1
    CapTouch.MinShortPressTime=CAPTOUCH_SHORT_PRESS_TIME_MIN;
    CapTouch.MaxShortPressTime=CAPTOUCH_SHORT_PRESS_TIME_MAX;
    CapTouch.LongPressTime=CAPTOUCH_LONG_PRESS_TIME;
    CapTouch.LongPressFlag[i]=0;
     946:	10 92 91 01 	sts	0x0191, r1
	CapTouch.ShortPressReg=0;
	CapTouch.LongPressReg=0;
    CapTouch.UsingReferenceTimer=0;
    CapTouch.ErrorCode[i]=0;
     94a:	10 92 96 01 	sts	0x0196, r1
     94e:	10 92 94 01 	sts	0x0194, r1
     952:	10 92 93 01 	sts	0x0193, r1
     956:	10 92 92 01 	sts	0x0192, r1
     95a:	84 e6       	ldi	r24, 0x64	; 100
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 93 8f 01 	sts	0x018F, r25
     962:	80 93 8e 01 	sts	0x018E, r24
     966:	82 e3       	ldi	r24, 0x32	; 50
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	90 93 8d 01 	sts	0x018D, r25
     96e:	80 93 8c 01 	sts	0x018C, r24
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	90 93 8b 01 	sts	0x018B, r25
     97a:	80 93 8a 01 	sts	0x018A, r24
  }
}
     97e:	08 95       	ret

00000980 <CapTouch_IIR_LPF_Struct_Init>:

#ifdef CAPTOUCH_ENABLE_LPF
void CapTouch_IIR_LPF_Struct_Init(void){
     980:	e7 e9       	ldi	r30, 0x97	; 151
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t start=2;
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY*3;i++){
    IIR_LPF[i].Alpha=CAPTOUCH_ENABLE_LPF;
     988:	22 e3       	ldi	r18, 0x32	; 50
     98a:	20 83       	st	Z, r18
	IIR_LPF[i].Input=0;
     98c:	11 82       	std	Z+1, r1	; 0x01
     98e:	12 82       	std	Z+2, r1	; 0x02
     990:	13 82       	std	Z+3, r1	; 0x03
     992:	14 82       	std	Z+4, r1	; 0x04
	IIR_LPF[i].Output=0;
     994:	15 82       	std	Z+5, r1	; 0x05
     996:	16 82       	std	Z+6, r1	; 0x06
     998:	17 82       	std	Z+7, r1	; 0x07
     99a:	10 86       	std	Z+8, r1	; 0x08
    if(i == start){
     99c:	89 17       	cp	r24, r25
     99e:	11 f4       	brne	.+4      	; 0x9a4 <CapTouch_IIR_LPF_Struct_Init+0x24>
      IIR_LPF[i].Alpha = CAPTOUCH_OUTPUT_LPF;
     9a0:	98 2f       	mov	r25, r24
     9a2:	9d 5f       	subi	r25, 0xFD	; 253
}

#ifdef CAPTOUCH_ENABLE_LPF
void CapTouch_IIR_LPF_Struct_Init(void){
  uint8_t start=2;
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY*3;i++){
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	39 96       	adiw	r30, 0x09	; 9
     9a8:	86 30       	cpi	r24, 0x06	; 6
     9aa:	79 f7       	brne	.-34     	; 0x98a <CapTouch_IIR_LPF_Struct_Init+0xa>
    if(i == start){
      IIR_LPF[i].Alpha = CAPTOUCH_OUTPUT_LPF;
      start+=3;
    }
  }
}
     9ac:	08 95       	ret

000009ae <CapTouch_IIR_LPF_Set_Alpha>:

void CapTouch_IIR_LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  IIR_LPF[lpf_index].Alpha = val;
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	fc 01       	movw	r30, r24
     9b2:	23 e0       	ldi	r18, 0x03	; 3
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	2a 95       	dec	r18
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <CapTouch_IIR_LPF_Set_Alpha+0x6>
     9bc:	e8 0f       	add	r30, r24
     9be:	f9 1f       	adc	r31, r25
     9c0:	e9 56       	subi	r30, 0x69	; 105
     9c2:	fe 4f       	sbci	r31, 0xFE	; 254
     9c4:	60 83       	st	Z, r22
}
     9c6:	08 95       	ret

000009c8 <CapTouch_IIR_LPF_Get_Alpha>:

uint8_t CapTouch_IIR_LPF_Get_Alpha(uint8_t lpf_index){
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	fc 01       	movw	r30, r24
     9cc:	33 e0       	ldi	r19, 0x03	; 3
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	3a 95       	dec	r19
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <CapTouch_IIR_LPF_Get_Alpha+0x6>
     9d6:	e8 0f       	add	r30, r24
     9d8:	f9 1f       	adc	r31, r25
     9da:	e9 56       	subi	r30, 0x69	; 105
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
  return IIR_LPF[lpf_index].Alpha;
}
     9de:	80 81       	ld	r24, Z
     9e0:	08 95       	ret

000009e2 <CapTouch_IIR_LPF_Get_Filtered_Value>:

int32_t CapTouch_IIR_LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     9e2:	6f 92       	push	r6
     9e4:	7f 92       	push	r7
     9e6:	8f 92       	push	r8
     9e8:	9f 92       	push	r9
     9ea:	af 92       	push	r10
     9ec:	bf 92       	push	r11
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	5a 01       	movw	r10, r20
     9fc:	6b 01       	movw	r12, r22
void CapTouch_IIR_LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  IIR_LPF[lpf_index].Alpha = val;
}

uint8_t CapTouch_IIR_LPF_Get_Alpha(uint8_t lpf_index){
  return IIR_LPF[lpf_index].Alpha;
     9fe:	90 e0       	ldi	r25, 0x00	; 0
}

int32_t CapTouch_IIR_LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=CapTouch_IIR_LPF_Get_Alpha(lpf_index);
     a00:	4c 01       	movw	r8, r24
     a02:	73 e0       	ldi	r23, 0x03	; 3
     a04:	88 0c       	add	r8, r8
     a06:	99 1c       	adc	r9, r9
     a08:	7a 95       	dec	r23
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <CapTouch_IIR_LPF_Get_Filtered_Value+0x22>
     a0c:	88 0e       	add	r8, r24
     a0e:	99 1e       	adc	r9, r25
     a10:	87 e9       	ldi	r24, 0x97	; 151
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	88 0e       	add	r8, r24
     a16:	99 1e       	adc	r9, r25
     a18:	f4 01       	movw	r30, r8
     a1a:	20 81       	ld	r18, Z
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	50 e0       	ldi	r21, 0x00	; 0
  tmp1*=val;
  int32_t tmp2=100;
  tmp2-=CapTouch_IIR_LPF_Get_Alpha(lpf_index);
     a22:	64 e6       	ldi	r22, 0x64	; 100
     a24:	e6 2e       	mov	r14, r22
     a26:	f1 2c       	mov	r15, r1
     a28:	01 2d       	mov	r16, r1
     a2a:	11 2d       	mov	r17, r1
     a2c:	e2 1a       	sub	r14, r18
     a2e:	f3 0a       	sbc	r15, r19
     a30:	04 0b       	sbc	r16, r20
     a32:	15 0b       	sbc	r17, r21
  tmp2*=IIR_LPF[lpf_index].Output ;
  IIR_LPF[lpf_index].Output = tmp1 + tmp2;
  IIR_LPF[lpf_index].Output/=100;
     a34:	c6 01       	movw	r24, r12
     a36:	b5 01       	movw	r22, r10
     a38:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsi3>
     a3c:	5b 01       	movw	r10, r22
     a3e:	6c 01       	movw	r12, r24
     a40:	45 e0       	ldi	r20, 0x05	; 5
     a42:	64 2e       	mov	r6, r20
     a44:	71 2c       	mov	r7, r1
     a46:	68 0c       	add	r6, r8
     a48:	79 1c       	adc	r7, r9
     a4a:	f4 01       	movw	r30, r8
     a4c:	25 81       	ldd	r18, Z+5	; 0x05
     a4e:	36 81       	ldd	r19, Z+6	; 0x06
     a50:	47 81       	ldd	r20, Z+7	; 0x07
     a52:	50 85       	ldd	r21, Z+8	; 0x08
     a54:	c8 01       	movw	r24, r16
     a56:	b7 01       	movw	r22, r14
     a58:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsi3>
     a5c:	a6 0e       	add	r10, r22
     a5e:	b7 1e       	adc	r11, r23
     a60:	c8 1e       	adc	r12, r24
     a62:	d9 1e       	adc	r13, r25
     a64:	c6 01       	movw	r24, r12
     a66:	b5 01       	movw	r22, r10
     a68:	24 e6       	ldi	r18, 0x64	; 100
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__divmodsi4>
     a74:	ca 01       	movw	r24, r20
     a76:	f4 01       	movw	r30, r8
     a78:	25 83       	std	Z+5, r18	; 0x05
     a7a:	f3 01       	movw	r30, r6
     a7c:	31 83       	std	Z+1, r19	; 0x01
     a7e:	42 83       	std	Z+2, r20	; 0x02
     a80:	93 83       	std	Z+3, r25	; 0x03
  return IIR_LPF[lpf_index].Output;
}
     a82:	b9 01       	movw	r22, r18
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	af 90       	pop	r10
     a94:	9f 90       	pop	r9
     a96:	8f 90       	pop	r8
     a98:	7f 90       	pop	r7
     a9a:	6f 90       	pop	r6
     a9c:	08 95       	ret

00000a9e <CapTouch_Set_Key_Pin_Input>:
#endif

void CapTouch_Set_Key_Pin_Input(uint8_t current_channel){
  CAPTOUCH_ADC_DDR &=~(1<<current_channel);
     a9e:	97 b1       	in	r25, 0x07	; 7
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <CapTouch_Set_Key_Pin_Input+0xc>
     aa6:	22 0f       	add	r18, r18
     aa8:	33 1f       	adc	r19, r19
     aaa:	8a 95       	dec	r24
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <CapTouch_Set_Key_Pin_Input+0x8>
     aae:	20 95       	com	r18
     ab0:	29 23       	and	r18, r25
     ab2:	27 b9       	out	0x07, r18	; 7
}
     ab4:	08 95       	ret

00000ab6 <CapTouch_Set_Key_Pin_Analog>:

void CapTouch_Set_Key_Pin_Analog(uint8_t current_channel){
  CAPTOUCH_ADC_DDR &=~(1<<current_channel);
     ab6:	97 b1       	in	r25, 0x07	; 7
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <CapTouch_Set_Key_Pin_Analog+0xc>
     abe:	22 0f       	add	r18, r18
     ac0:	33 1f       	adc	r19, r19
     ac2:	8a 95       	dec	r24
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <CapTouch_Set_Key_Pin_Analog+0x8>
     ac6:	20 95       	com	r18
     ac8:	92 23       	and	r25, r18
     aca:	97 b9       	out	0x07, r25	; 7
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
     acc:	88 b1       	in	r24, 0x08	; 8
     ace:	28 23       	and	r18, r24
     ad0:	28 b9       	out	0x08, r18	; 8
}
     ad2:	08 95       	ret

00000ad4 <CapTouch_Set_Key_Pin_Output>:

void CapTouch_Set_Key_Pin_Output(uint8_t current_channel){
  CAPTOUCH_ADC_DDR |= (1<<current_channel);
     ad4:	97 b1       	in	r25, 0x07	; 7
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <CapTouch_Set_Key_Pin_Output+0xc>
     adc:	22 0f       	add	r18, r18
     ade:	33 1f       	adc	r19, r19
     ae0:	8a 95       	dec	r24
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <CapTouch_Set_Key_Pin_Output+0x8>
     ae4:	92 2b       	or	r25, r18
     ae6:	97 b9       	out	0x07, r25	; 7
}
     ae8:	08 95       	ret

00000aea <CapTouch_Set_Key_Pin_Output_Low>:

void CapTouch_Set_Key_Pin_Output_Low(uint8_t current_channel){
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
     aea:	98 b1       	in	r25, 0x08	; 8
     aec:	21 e0       	ldi	r18, 0x01	; 1
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <CapTouch_Set_Key_Pin_Output_Low+0xc>
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	8a 95       	dec	r24
     af8:	e2 f7       	brpl	.-8      	; 0xaf2 <CapTouch_Set_Key_Pin_Output_Low+0x8>
     afa:	20 95       	com	r18
     afc:	29 23       	and	r18, r25
     afe:	28 b9       	out	0x08, r18	; 8
}
     b00:	08 95       	ret

00000b02 <CapTouch_Set_Key_Pin_Output_High>:

void CapTouch_Set_Key_Pin_Output_High(uint8_t current_channel){
  CAPTOUCH_ADC_PORT|=(1<<current_channel);
     b02:	98 b1       	in	r25, 0x08	; 8
     b04:	21 e0       	ldi	r18, 0x01	; 1
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <CapTouch_Set_Key_Pin_Output_High+0xc>
     b0a:	22 0f       	add	r18, r18
     b0c:	33 1f       	adc	r19, r19
     b0e:	8a 95       	dec	r24
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <CapTouch_Set_Key_Pin_Output_High+0x8>
     b12:	92 2b       	or	r25, r18
     b14:	98 b9       	out	0x08, r25	; 8
}
     b16:	08 95       	ret

00000b18 <CapTouch_ADC_Register_Config>:

void CapTouch_ADC_Register_Config(void){
  ADMUX =0x40;
     b18:	80 e4       	ldi	r24, 0x40	; 64
     b1a:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA=0x87;
     b1e:	87 e8       	ldi	r24, 0x87	; 135
     b20:	80 93 7a 00 	sts	0x007A, r24
}
     b24:	08 95       	ret

00000b26 <CapTouch_ADC_Wakeup>:

void CapTouch_ADC_Wakeup(void){
  ADCSRA|=(1<<ADEN);
     b26:	ea e7       	ldi	r30, 0x7A	; 122
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	80 68       	ori	r24, 0x80	; 128
     b2e:	80 83       	st	Z, r24
}
     b30:	08 95       	ret

00000b32 <CapTouch_ADC_Sleep>:

void CapTouch_ADC_Sleep(void){
  ADCSRA&=~(1<<ADEN);
     b32:	ea e7       	ldi	r30, 0x7A	; 122
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8f 77       	andi	r24, 0x7F	; 127
     b3a:	80 83       	st	Z, r24
}
     b3c:	08 95       	ret

00000b3e <CapTouch_ADC_Sample>:

uint16_t CapTouch_ADC_Sample(uint8_t channel){
  ADMUX=0x40|channel;
     b3e:	80 64       	ori	r24, 0x40	; 64
     b40:	80 93 7c 00 	sts	0x007C, r24
  if(ADCSRA!=0x87){
     b44:	80 91 7a 00 	lds	r24, 0x007A
     b48:	87 38       	cpi	r24, 0x87	; 135
     b4a:	19 f0       	breq	.+6      	; 0xb52 <CapTouch_ADC_Sample+0x14>
    ADCSRA=0x87;
     b4c:	87 e8       	ldi	r24, 0x87	; 135
     b4e:	80 93 7a 00 	sts	0x007A, r24
  }
  ADCSRA|=(1<<ADSC);
     b52:	80 91 7a 00 	lds	r24, 0x007A
     b56:	80 64       	ori	r24, 0x40	; 64
     b58:	80 93 7a 00 	sts	0x007A, r24
  while(!(ADCSRA & (1<<ADIF)));
     b5c:	80 91 7a 00 	lds	r24, 0x007A
     b60:	84 ff       	sbrs	r24, 4
     b62:	fc cf       	rjmp	.-8      	; 0xb5c <CapTouch_ADC_Sample+0x1e>
  ADCSRA|=(1<<ADIF);
     b64:	80 91 7a 00 	lds	r24, 0x007A
     b68:	80 61       	ori	r24, 0x10	; 16
     b6a:	80 93 7a 00 	sts	0x007A, r24
  return ADCW;
     b6e:	20 91 78 00 	lds	r18, 0x0078
     b72:	30 91 79 00 	lds	r19, 0x0079
}
     b76:	c9 01       	movw	r24, r18
     b78:	08 95       	ret

00000b7a <CapTouch_Precharge_SH_Cap>:
  CAPTOUCH_ADC_DDR &=~(1<<current_channel);
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
}

void CapTouch_Set_Key_Pin_Output(uint8_t current_channel){
  CAPTOUCH_ADC_DDR |= (1<<current_channel);
     b7a:	27 b1       	in	r18, 0x07	; 7
     b7c:	e0 e3       	ldi	r30, 0x30	; 48
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	e8 0f       	add	r30, r24
     b82:	f1 1d       	adc	r31, r1
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	00 80       	ld	r0, Z
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <CapTouch_Precharge_SH_Cap+0x16>
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	0a 94       	dec	r0
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <CapTouch_Precharge_SH_Cap+0x12>
     b94:	28 2b       	or	r18, r24
     b96:	27 b9       	out	0x07, r18	; 7
}

void CapTouch_Set_Key_Pin_Output_Low(uint8_t current_channel){
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
     b98:	28 b1       	in	r18, 0x08	; 8
     b9a:	80 95       	com	r24
     b9c:	82 23       	and	r24, r18
     b9e:	88 b9       	out	0x08, r24	; 8

void CapTouch_Precharge_SH_Cap(uint8_t current_channel){
  CapTouch_Set_Key_Pin_Output(CapTouch_Pins[current_channel]);
  CapTouch_Set_Key_Pin_Output_Low(CapTouch_Pins[current_channel]);
  for(uint8_t i=0;i<CAPTOUCH_PRECHARGE_SMPL;i++){
    CapTouch_ADC_Sample(CAPTOUCH_INT_VREF_ADC_CHANNEL);
     ba0:	86 e0       	ldi	r24, 0x06	; 6
     ba2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <CapTouch_ADC_Sample>
  }
}
     ba6:	08 95       	ret

00000ba8 <CapTouch_ADC_Sample1>:

void CapTouch_ADC_Sample1(uint8_t current_channel){
     ba8:	af 92       	push	r10
     baa:	bf 92       	push	r11
     bac:	cf 92       	push	r12
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
  CapTouch_Set_Key_Pin_Analog(CapTouch_Pins[current_channel]);
     bb8:	e8 2e       	mov	r14, r24
     bba:	ff 24       	eor	r15, r15
     bbc:	f0 e3       	ldi	r31, 0x30	; 48
     bbe:	cf 2e       	mov	r12, r31
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	df 2e       	mov	r13, r31
     bc4:	ce 0c       	add	r12, r14
     bc6:	df 1c       	adc	r13, r15
     bc8:	f6 01       	movw	r30, r12
     bca:	80 81       	ld	r24, Z
     bcc:	0e 94 5b 05 	call	0xab6	; 0xab6 <CapTouch_Set_Key_Pin_Analog>
  CapTouch.RawADC1[current_channel]=0;
     bd0:	57 01       	movw	r10, r14
     bd2:	aa 0c       	add	r10, r10
     bd4:	bb 1c       	adc	r11, r11
     bd6:	85 01       	movw	r16, r10
     bd8:	01 5a       	subi	r16, 0xA1	; 161
     bda:	1e 4f       	sbci	r17, 0xFE	; 254
     bdc:	f8 01       	movw	r30, r16
     bde:	10 86       	std	Z+8, r1	; 0x08
     be0:	17 82       	std	Z+7, r1	; 0x07
  for(uint8_t i=0;i<CAPTOUCH_SAMPLE1_SMPL;i++){
    CapTouch.RawADC1[current_channel]+=CapTouch_ADC_Sample(CapTouch_Pins[current_channel]);
     be2:	f6 01       	movw	r30, r12
     be4:	80 81       	ld	r24, Z
     be6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <CapTouch_ADC_Sample>
     bea:	ac 01       	movw	r20, r24
     bec:	f8 01       	movw	r30, r16
     bee:	90 87       	std	Z+8, r25	; 0x08
     bf0:	87 83       	std	Z+7, r24	; 0x07
  }
  #ifdef CAPTOUCH_ENABLE_LPF
	CapTouch.RawADC1[current_channel] = CapTouch_IIR_LPF_Get_Filtered_Value((current_channel*3) ,CapTouch.RawADC1[current_channel]);
     bf2:	66 27       	eor	r22, r22
     bf4:	57 fd       	sbrc	r21, 7
     bf6:	60 95       	com	r22
     bf8:	76 2f       	mov	r23, r22
     bfa:	8a 2d       	mov	r24, r10
     bfc:	8e 0d       	add	r24, r14
     bfe:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <CapTouch_IIR_LPF_Get_Filtered_Value>
     c02:	f8 01       	movw	r30, r16
     c04:	70 87       	std	Z+8, r23	; 0x08
     c06:	67 83       	std	Z+7, r22	; 0x07
  #endif
}
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	bf 90       	pop	r11
     c16:	af 90       	pop	r10
     c18:	08 95       	ret

00000c1a <CapTouch_Precharge_Button>:
  CAPTOUCH_ADC_DDR &=~(1<<current_channel);
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
}

void CapTouch_Set_Key_Pin_Output(uint8_t current_channel){
  CAPTOUCH_ADC_DDR |= (1<<current_channel);
     c1a:	27 b1       	in	r18, 0x07	; 7
     c1c:	e0 e3       	ldi	r30, 0x30	; 48
     c1e:	f1 e0       	ldi	r31, 0x01	; 1
     c20:	e8 0f       	add	r30, r24
     c22:	f1 1d       	adc	r31, r1
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	00 80       	ld	r0, Z
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <CapTouch_Precharge_Button+0x16>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <CapTouch_Precharge_Button+0x12>
     c34:	28 2b       	or	r18, r24
     c36:	27 b9       	out	0x07, r18	; 7
void CapTouch_Set_Key_Pin_Output_Low(uint8_t current_channel){
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
}

void CapTouch_Set_Key_Pin_Output_High(uint8_t current_channel){
  CAPTOUCH_ADC_PORT|=(1<<current_channel);
     c38:	28 b1       	in	r18, 0x08	; 8
     c3a:	82 2b       	or	r24, r18
     c3c:	88 b9       	out	0x08, r24	; 8

void CapTouch_Precharge_Button(uint8_t current_channel){
  CapTouch_Set_Key_Pin_Output(CapTouch_Pins[current_channel]);
  CapTouch_Set_Key_Pin_Output_High(CapTouch_Pins[current_channel]);
  for(uint8_t i=0;i<CAPTOUCH_DISCHARGE_SMPL;i++){
    CapTouch_ADC_Sample(CAPTOUCH_INT_GND_ADC_CHANNEL);
     c3e:	8f e0       	ldi	r24, 0x0F	; 15
     c40:	0e 94 9f 05 	call	0xb3e	; 0xb3e <CapTouch_ADC_Sample>
  }
}
     c44:	08 95       	ret

00000c46 <CapTouch_ADC_Sample2>:

void CapTouch_ADC_Sample2(uint8_t current_channel){
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
  CapTouch_Set_Key_Pin_Analog(CapTouch_Pins[current_channel]);
     c56:	e8 2e       	mov	r14, r24
     c58:	ff 24       	eor	r15, r15
     c5a:	10 e3       	ldi	r17, 0x30	; 48
     c5c:	a1 2e       	mov	r10, r17
     c5e:	11 e0       	ldi	r17, 0x01	; 1
     c60:	b1 2e       	mov	r11, r17
     c62:	ae 0c       	add	r10, r14
     c64:	bf 1c       	adc	r11, r15
     c66:	f5 01       	movw	r30, r10
     c68:	80 81       	ld	r24, Z
     c6a:	0e 94 5b 05 	call	0xab6	; 0xab6 <CapTouch_Set_Key_Pin_Analog>
  CapTouch.RawADC2[current_channel]=0;
     c6e:	87 01       	movw	r16, r14
     c70:	00 0f       	add	r16, r16
     c72:	11 1f       	adc	r17, r17
     c74:	af e5       	ldi	r26, 0x5F	; 95
     c76:	ca 2e       	mov	r12, r26
     c78:	a1 e0       	ldi	r26, 0x01	; 1
     c7a:	da 2e       	mov	r13, r26
     c7c:	c0 0e       	add	r12, r16
     c7e:	d1 1e       	adc	r13, r17
     c80:	f6 01       	movw	r30, r12
     c82:	14 86       	std	Z+12, r1	; 0x0c
     c84:	13 86       	std	Z+11, r1	; 0x0b
  for(uint8_t i=0;i<CAPTOUCH_SAMPLE2_SMPL;i++){
    CapTouch.RawADC2[current_channel]+=CapTouch_ADC_Sample(CapTouch_Pins[current_channel]);
     c86:	f5 01       	movw	r30, r10
     c88:	80 81       	ld	r24, Z
     c8a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <CapTouch_ADC_Sample>
     c8e:	ac 01       	movw	r20, r24
     c90:	f6 01       	movw	r30, r12
     c92:	94 87       	std	Z+12, r25	; 0x0c
     c94:	83 87       	std	Z+11, r24	; 0x0b
  }
  #ifdef CAPTOUCH_ENABLE_LPF
	CapTouch.RawADC2[current_channel] = CapTouch_IIR_LPF_Get_Filtered_Value((current_channel*3)+1 ,CapTouch.RawADC2[current_channel]);
     c96:	0e 0d       	add	r16, r14
     c98:	1f 1d       	adc	r17, r15
     c9a:	66 27       	eor	r22, r22
     c9c:	57 fd       	sbrc	r21, 7
     c9e:	60 95       	com	r22
     ca0:	76 2f       	mov	r23, r22
     ca2:	80 2f       	mov	r24, r16
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <CapTouch_IIR_LPF_Get_Filtered_Value>
     caa:	f6 01       	movw	r30, r12
     cac:	74 87       	std	Z+12, r23	; 0x0c
     cae:	63 87       	std	Z+11, r22	; 0x0b
  #endif
}
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	af 90       	pop	r10
     cc0:	08 95       	ret

00000cc2 <CapTouch_Read_Delta>:

void CapTouch_Read_Delta(uint8_t current_channel){
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	08 2f       	mov	r16, r24
  CapTouch_Precharge_SH_Cap(current_channel);
     ccc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <CapTouch_Precharge_SH_Cap>
  CapTouch_ADC_Sample1(current_channel);
     cd0:	80 2f       	mov	r24, r16
     cd2:	0e 94 d4 05 	call	0xba8	; 0xba8 <CapTouch_ADC_Sample1>
  CapTouch_Precharge_Button(current_channel);
     cd6:	80 2f       	mov	r24, r16
     cd8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <CapTouch_Precharge_Button>
  CapTouch_ADC_Sample2(current_channel);
     cdc:	80 2f       	mov	r24, r16
     cde:	0e 94 23 06 	call	0xc46	; 0xc46 <CapTouch_ADC_Sample2>
  int delta=CapTouch.RawADC1[current_channel];
     ce2:	10 e0       	ldi	r17, 0x00	; 0
     ce4:	c8 01       	movw	r24, r16
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	2f e5       	ldi	r18, 0x5F	; 95
     cec:	e2 2e       	mov	r14, r18
     cee:	21 e0       	ldi	r18, 0x01	; 1
     cf0:	f2 2e       	mov	r15, r18
     cf2:	e8 0e       	add	r14, r24
     cf4:	f9 1e       	adc	r15, r25
     cf6:	f7 01       	movw	r30, r14
     cf8:	47 81       	ldd	r20, Z+7	; 0x07
     cfa:	50 85       	ldd	r21, Z+8	; 0x08
  delta-=CapTouch.RawADC2[current_channel];
     cfc:	23 85       	ldd	r18, Z+11	; 0x0b
     cfe:	34 85       	ldd	r19, Z+12	; 0x0c
     d00:	42 1b       	sub	r20, r18
     d02:	53 0b       	sbc	r21, r19
  CapTouch.RawDiffADC[current_channel]=delta;
     d04:	50 8b       	std	Z+16, r21	; 0x10
     d06:	47 87       	std	Z+15, r20	; 0x0f
  #ifdef CAPTOUCH_ENABLE_LPF
    CapTouch.RawDiffADC[current_channel] = CapTouch_IIR_LPF_Get_Filtered_Value((current_channel*3)+2, delta);
     d08:	80 0f       	add	r24, r16
     d0a:	91 1f       	adc	r25, r17
     d0c:	66 27       	eor	r22, r22
     d0e:	57 fd       	sbrc	r21, 7
     d10:	60 95       	com	r22
     d12:	76 2f       	mov	r23, r22
     d14:	8e 5f       	subi	r24, 0xFE	; 254
     d16:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <CapTouch_IIR_LPF_Get_Filtered_Value>
     d1a:	f7 01       	movw	r30, r14
     d1c:	70 8b       	std	Z+16, r23	; 0x10
     d1e:	67 87       	std	Z+15, r22	; 0x0f
  #endif
}
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	08 95       	ret

00000d2a <CapTouch_Calibration>:


void CapTouch_Calibration(void){
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	28 97       	sbiw	r28, 0x08	; 8
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
  int32_t sum[CAPTOUCH_TOTAL_TOUCH_KEY];
  for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
	sum[key]=0;
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	1a 82       	std	Y+2, r1	; 0x02
     d4e:	1b 82       	std	Y+3, r1	; 0x03
     d50:	1c 82       	std	Y+4, r1	; 0x04
     d52:	1d 82       	std	Y+5, r1	; 0x05
     d54:	1e 82       	std	Y+6, r1	; 0x06
     d56:	1f 82       	std	Y+7, r1	; 0x07
     d58:	18 86       	std	Y+8, r1	; 0x08
     d5a:	cc 24       	eor	r12, r12
     d5c:	dd 24       	eor	r13, r13
  }

  for(int i=0;i<CAPTOUCH_CALIBRATION_SAMPLES;i++){
    for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
      CapTouch_Read_Delta(key);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	0e 94 61 06 	call	0xcc2	; 0xcc2 <CapTouch_Read_Delta>
      sum[key]+=CapTouch.RawDiffADC[key];
     d64:	80 91 6e 01 	lds	r24, 0x016E
     d68:	90 91 6f 01 	lds	r25, 0x016F
     d6c:	aa 27       	eor	r26, r26
     d6e:	97 fd       	sbrc	r25, 7
     d70:	a0 95       	com	r26
     d72:	ba 2f       	mov	r27, r26
     d74:	29 81       	ldd	r18, Y+1	; 0x01
     d76:	3a 81       	ldd	r19, Y+2	; 0x02
     d78:	4b 81       	ldd	r20, Y+3	; 0x03
     d7a:	5c 81       	ldd	r21, Y+4	; 0x04
     d7c:	28 0f       	add	r18, r24
     d7e:	39 1f       	adc	r19, r25
     d80:	4a 1f       	adc	r20, r26
     d82:	5b 1f       	adc	r21, r27
     d84:	29 83       	std	Y+1, r18	; 0x01
     d86:	3a 83       	std	Y+2, r19	; 0x02
     d88:	4b 83       	std	Y+3, r20	; 0x03
     d8a:	5c 83       	std	Y+4, r21	; 0x04
	sum[key]=0;
  }

  for(int i=0;i<CAPTOUCH_CALIBRATION_SAMPLES;i++){
    for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
      CapTouch_Read_Delta(key);
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <CapTouch_Read_Delta>
      sum[key]+=CapTouch.RawDiffADC[key];
     d92:	80 91 70 01 	lds	r24, 0x0170
     d96:	90 91 71 01 	lds	r25, 0x0171
     d9a:	aa 27       	eor	r26, r26
     d9c:	97 fd       	sbrc	r25, 7
     d9e:	a0 95       	com	r26
     da0:	ba 2f       	mov	r27, r26
     da2:	ed 80       	ldd	r14, Y+5	; 0x05
     da4:	fe 80       	ldd	r15, Y+6	; 0x06
     da6:	0f 81       	ldd	r16, Y+7	; 0x07
     da8:	18 85       	ldd	r17, Y+8	; 0x08
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	0a 1f       	adc	r16, r26
     db0:	1b 1f       	adc	r17, r27
     db2:	ed 82       	std	Y+5, r14	; 0x05
     db4:	fe 82       	std	Y+6, r15	; 0x06
     db6:	0f 83       	std	Y+7, r16	; 0x07
     db8:	18 87       	std	Y+8, r17	; 0x08
  int32_t sum[CAPTOUCH_TOTAL_TOUCH_KEY];
  for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
	sum[key]=0;
  }

  for(int i=0;i<CAPTOUCH_CALIBRATION_SAMPLES;i++){
     dba:	08 94       	sec
     dbc:	c1 1c       	adc	r12, r1
     dbe:	d1 1c       	adc	r13, r1
     dc0:	80 e2       	ldi	r24, 0x20	; 32
     dc2:	c8 16       	cp	r12, r24
     dc4:	d1 04       	cpc	r13, r1
     dc6:	59 f6       	brne	.-106    	; 0xd5e <CapTouch_Calibration+0x34>
      sum[key]+=CapTouch.RawDiffADC[key];
	}
  }
  
  for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
	sum[key]/=CAPTOUCH_CALIBRATION_SAMPLES;
     dc8:	69 81       	ldd	r22, Y+1	; 0x01
     dca:	7a 81       	ldd	r23, Y+2	; 0x02
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	20 e2       	ldi	r18, 0x20	; 32
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__divmodsi4>
     ddc:	c9 01       	movw	r24, r18
    CapTouch.CalibrationValue[key]=sum[key]-CapTouch.DiffThreshold[key];
     dde:	20 91 72 01 	lds	r18, 0x0172
     de2:	30 91 73 01 	lds	r19, 0x0173
     de6:	82 1b       	sub	r24, r18
     de8:	93 0b       	sbc	r25, r19
     dea:	90 93 63 01 	sts	0x0163, r25
     dee:	80 93 62 01 	sts	0x0162, r24
     df2:	c8 01       	movw	r24, r16
     df4:	b7 01       	movw	r22, r14
     df6:	20 e2       	ldi	r18, 0x20	; 32
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__divmodsi4>
     e02:	80 91 74 01 	lds	r24, 0x0174
     e06:	90 91 75 01 	lds	r25, 0x0175
     e0a:	28 1b       	sub	r18, r24
     e0c:	39 0b       	sbc	r19, r25
     e0e:	30 93 65 01 	sts	0x0165, r19
     e12:	20 93 64 01 	sts	0x0164, r18
  }
}
     e16:	28 96       	adiw	r28, 0x08	; 8
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	df 90       	pop	r13
     e30:	cf 90       	pop	r12
     e32:	08 95       	ret

00000e34 <CapTouch_Response>:


void CapTouch_Response(uint8_t current_channel){
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	08 2f       	mov	r16, r24
  CapTouch_Read_Delta(current_channel);
     e3a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <CapTouch_Read_Delta>
  if(CapTouch.CalibrationValue[current_channel] > CapTouch.RawDiffADC[current_channel]){
     e3e:	10 e0       	ldi	r17, 0x00	; 0
     e40:	f8 01       	movw	r30, r16
     e42:	ee 0f       	add	r30, r30
     e44:	ff 1f       	adc	r31, r31
     e46:	e1 5a       	subi	r30, 0xA1	; 161
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	23 81       	ldd	r18, Z+3	; 0x03
     e4c:	34 81       	ldd	r19, Z+4	; 0x04
     e4e:	87 85       	ldd	r24, Z+15	; 0x0f
     e50:	90 89       	ldd	r25, Z+16	; 0x10
     e52:	f8 01       	movw	r30, r16
     e54:	e1 5a       	subi	r30, 0xA1	; 161
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	82 17       	cp	r24, r18
     e5a:	93 07       	cpc	r25, r19
     e5c:	1c f4       	brge	.+6      	; 0xe64 <CapTouch_Response+0x30>
    CapTouch.Result[current_channel]=1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	81 83       	std	Z+1, r24	; 0x01
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <CapTouch_Response+0x32>
  }else{
    CapTouch.Result[current_channel]=0;
     e64:	11 82       	std	Z+1, r1	; 0x01
  }
}
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <CapTouch_Check_Trigger>:

void CapTouch_Check_Trigger(uint8_t current_channel){
     e6c:	1f 93       	push	r17
     e6e:	18 2f       	mov	r17, r24
  uint8_t current_state=0;
  CapTouch_Response(current_channel);
     e70:	0e 94 1a 07 	call	0xe34	; 0xe34 <CapTouch_Response>
  current_state=CapTouch.Result[current_channel];
     e74:	a1 2f       	mov	r26, r17
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	fd 01       	movw	r30, r26
     e7a:	e1 5a       	subi	r30, 0xA1	; 161
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
  if((CapTouch.LastTouchState[current_channel]==0) && (current_state==1)){
     e80:	81 8d       	ldd	r24, Z+25	; 0x19
     e82:	88 23       	and	r24, r24
     e84:	29 f4       	brne	.+10     	; 0xe90 <CapTouch_Check_Trigger+0x24>
     e86:	91 30       	cpi	r25, 0x01	; 1
     e88:	71 f4       	brne	.+28     	; 0xea6 <CapTouch_Check_Trigger+0x3a>
    CapTouch.LongPressFlag[current_channel]=0;     //Rising Edge
     e8a:	11 aa       	std	Z+49, r1	; 0x31
    CapTouch.TriggerMethod[current_channel]=0x01;
     e8c:	97 8b       	std	Z+23, r25	; 0x17
     e8e:	0f c0       	rjmp	.+30     	; 0xeae <CapTouch_Check_Trigger+0x42>
  }else if((CapTouch.LastTouchState[current_channel]==1) && (current_state==0)){
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	49 f4       	brne	.+18     	; 0xea6 <CapTouch_Check_Trigger+0x3a>
     e94:	99 23       	and	r25, r25
     e96:	11 f4       	brne	.+4      	; 0xe9c <CapTouch_Check_Trigger+0x30>
    CapTouch.TriggerMethod[current_channel]=0x04;  //Falling Edge
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <CapTouch_Check_Trigger+0x36>
  }else if((CapTouch.LastTouchState[current_channel]==1) && (current_state==1)){
     e9c:	91 30       	cpi	r25, 0x01	; 1
     e9e:	19 f4       	brne	.+6      	; 0xea6 <CapTouch_Check_Trigger+0x3a>
    CapTouch.TriggerMethod[current_channel]=0x02;  //Constant Touched
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	87 8b       	std	Z+23, r24	; 0x17
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <CapTouch_Check_Trigger+0x42>
  }else{
    CapTouch.TriggerMethod[current_channel]=0x00;  //No Touch Event Occured
     ea6:	fd 01       	movw	r30, r26
     ea8:	e1 5a       	subi	r30, 0xA1	; 161
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	17 8a       	std	Z+23, r1	; 0x17
  }
  CapTouch.LastTouchState[current_channel]=current_state;
     eae:	a1 5a       	subi	r26, 0xA1	; 161
     eb0:	be 4f       	sbci	r27, 0xFE	; 254
     eb2:	59 96       	adiw	r26, 0x19	; 25
     eb4:	9c 93       	st	X, r25
}
     eb6:	1f 91       	pop	r17
     eb8:	08 95       	ret

00000eba <CapTouch_Check_Touch_Duration>:


void CapTouch_Check_Touch_Duration(uint8_t current_channel, uint32_t refernce_time){
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	18 2f       	mov	r17, r24
     ec8:	04 2f       	mov	r16, r20
     eca:	f5 2e       	mov	r15, r21
     ecc:	e6 2e       	mov	r14, r22
     ece:	d7 2e       	mov	r13, r23
  int32_t duration=0;
  CapTouch_Check_Trigger(current_channel);
     ed0:	0e 94 36 07 	call	0xe6c	; 0xe6c <CapTouch_Check_Trigger>
  if(CapTouch.TriggerMethod[current_channel] == 0x01){
     ed4:	61 2f       	mov	r22, r17
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	fb 01       	movw	r30, r22
     eda:	e1 5a       	subi	r30, 0xA1	; 161
     edc:	fe 4f       	sbci	r31, 0xFE	; 254
     ede:	17 89       	ldd	r17, Z+23	; 0x17
     ee0:	11 30       	cpi	r17, 0x01	; 1
     ee2:	01 f5       	brne	.+64     	; 0xf24 <CapTouch_Check_Touch_Duration+0x6a>
    CapTouch.UsingReferenceTimer|=(1<<current_channel);
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	06 2e       	mov	r0, r22
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <CapTouch_Check_Touch_Duration+0x36>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <CapTouch_Check_Touch_Duration+0x32>
     ef4:	20 91 94 01 	lds	r18, 0x0194
     ef8:	28 2b       	or	r18, r24
     efa:	20 93 94 01 	sts	0x0194, r18
    CapTouch.TouchDurationTemp[current_channel]=refernce_time;
     efe:	fb 01       	movw	r30, r22
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	ee 0f       	add	r30, r30
     f06:	ff 1f       	adc	r31, r31
     f08:	e1 5a       	subi	r30, 0xA1	; 161
     f0a:	fe 4f       	sbci	r31, 0xFE	; 254
     f0c:	df 01       	movw	r26, r30
     f0e:	93 96       	adiw	r26, 0x23	; 35
     f10:	03 a3       	std	Z+35, r16	; 0x23
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	fc 92       	st	X, r15
     f16:	11 97       	sbiw	r26, 0x01	; 1
     f18:	12 96       	adiw	r26, 0x02	; 2
     f1a:	ec 92       	st	X, r14
     f1c:	12 97       	sbiw	r26, 0x02	; 2
     f1e:	13 96       	adiw	r26, 0x03	; 3
     f20:	dc 92       	st	X, r13
     f22:	49 c0       	rjmp	.+146    	; 0xfb6 <CapTouch_Check_Touch_Duration+0xfc>
  }else if( (CapTouch.TriggerMethod[current_channel] == 0x04) || (CapTouch.TriggerMethod[current_channel] == 0x02) ){
     f24:	14 30       	cpi	r17, 0x04	; 4
     f26:	11 f0       	breq	.+4      	; 0xf2c <CapTouch_Check_Touch_Duration+0x72>
     f28:	12 30       	cpi	r17, 0x02	; 2
     f2a:	b1 f5       	brne	.+108    	; 0xf98 <CapTouch_Check_Touch_Duration+0xde>
    duration = refernce_time;
     f2c:	20 2f       	mov	r18, r16
     f2e:	3f 2d       	mov	r19, r15
     f30:	4e 2d       	mov	r20, r14
     f32:	5d 2d       	mov	r21, r13
    duration-=CapTouch.TouchDurationTemp[current_channel];
     f34:	fb 01       	movw	r30, r22
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
     f3e:	e1 5a       	subi	r30, 0xA1	; 161
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	83 a1       	ldd	r24, Z+35	; 0x23
     f44:	94 a1       	ldd	r25, Z+36	; 0x24
     f46:	a5 a1       	ldd	r26, Z+37	; 0x25
     f48:	b6 a1       	ldd	r27, Z+38	; 0x26
     f4a:	69 01       	movw	r12, r18
     f4c:	7a 01       	movw	r14, r20
     f4e:	c8 1a       	sub	r12, r24
     f50:	d9 0a       	sbc	r13, r25
     f52:	ea 0a       	sbc	r14, r26
     f54:	fb 0a       	sbc	r15, r27
    if(duration>=0){
     f56:	f7 fc       	sbrc	r15, 7
     f58:	04 c0       	rjmp	.+8      	; 0xf62 <CapTouch_Check_Touch_Duration+0xa8>
      CapTouch.TouchDuration[current_channel]=duration;
     f5a:	c3 8e       	std	Z+27, r12	; 0x1b
     f5c:	d4 8e       	std	Z+28, r13	; 0x1c
     f5e:	e5 8e       	std	Z+29, r14	; 0x1d
     f60:	f6 8e       	std	Z+30, r15	; 0x1e
    }
    if(CapTouch.TriggerMethod[current_channel]==0x04){
     f62:	14 30       	cpi	r17, 0x04	; 4
     f64:	41 f5       	brne	.+80     	; 0xfb6 <CapTouch_Check_Touch_Duration+0xfc>
      CapTouch.TouchDurationTemp[current_channel]=refernce_time;
     f66:	fb 01       	movw	r30, r22
     f68:	ee 0f       	add	r30, r30
     f6a:	ff 1f       	adc	r31, r31
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	e1 5a       	subi	r30, 0xA1	; 161
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
     f74:	23 a3       	std	Z+35, r18	; 0x23
     f76:	34 a3       	std	Z+36, r19	; 0x24
     f78:	45 a3       	std	Z+37, r20	; 0x25
     f7a:	56 a3       	std	Z+38, r21	; 0x26
      CapTouch.UsingReferenceTimer&=~(1<<current_channel);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <CapTouch_Check_Touch_Duration+0xcc>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	6a 95       	dec	r22
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <CapTouch_Check_Touch_Duration+0xc8>
     f8a:	80 95       	com	r24
     f8c:	20 91 94 01 	lds	r18, 0x0194
     f90:	82 23       	and	r24, r18
     f92:	80 93 94 01 	sts	0x0194, r24
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <CapTouch_Check_Touch_Duration+0xfc>
    }
  }
  else{
    CapTouch.TouchDuration[current_channel]=0;
     f98:	fb 01       	movw	r30, r22
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	e1 5a       	subi	r30, 0xA1	; 161
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	13 8e       	std	Z+27, r1	; 0x1b
     fa8:	14 8e       	std	Z+28, r1	; 0x1c
     faa:	15 8e       	std	Z+29, r1	; 0x1d
     fac:	16 8e       	std	Z+30, r1	; 0x1e
    CapTouch.TouchDurationTemp[current_channel]=0;
     fae:	13 a2       	std	Z+35, r1	; 0x23
     fb0:	14 a2       	std	Z+36, r1	; 0x24
     fb2:	15 a2       	std	Z+37, r1	; 0x25
     fb4:	16 a2       	std	Z+38, r1	; 0x26
  }
}
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	08 95       	ret

00000fc4 <CapTouch_Short_Pressed>:
  CapTouch_Long_Pressed_Filtered();
}

uint8_t CapTouch_Short_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if(CapTouch.TriggerMethod[current_channel]==0x04){
     fc4:	a8 2f       	mov	r26, r24
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	fd 01       	movw	r30, r26
     fca:	e1 5a       	subi	r30, 0xA1	; 161
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	87 89       	ldd	r24, Z+23	; 0x17
     fd0:	84 30       	cpi	r24, 0x04	; 4
     fd2:	29 f5       	brne	.+74     	; 0x101e <CapTouch_Short_Pressed+0x5a>
    if((CapTouch.TouchDuration[current_channel]>=CapTouch.MinShortPressTime) && (CapTouch.TouchDuration[current_channel]<=CapTouch.MaxShortPressTime)){
     fd4:	aa 0f       	add	r26, r26
     fd6:	bb 1f       	adc	r27, r27
     fd8:	aa 0f       	add	r26, r26
     fda:	bb 1f       	adc	r27, r27
     fdc:	a1 5a       	subi	r26, 0xA1	; 161
     fde:	be 4f       	sbci	r27, 0xFE	; 254
     fe0:	5b 96       	adiw	r26, 0x1b	; 27
     fe2:	2d 91       	ld	r18, X+
     fe4:	3d 91       	ld	r19, X+
     fe6:	4d 91       	ld	r20, X+
     fe8:	5c 91       	ld	r21, X
     fea:	5e 97       	sbiw	r26, 0x1e	; 30
     fec:	80 91 8a 01 	lds	r24, 0x018A
     ff0:	90 91 8b 01 	lds	r25, 0x018B
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	28 17       	cp	r18, r24
     ffa:	39 07       	cpc	r19, r25
     ffc:	4a 07       	cpc	r20, r26
     ffe:	5b 07       	cpc	r21, r27
    1000:	74 f0       	brlt	.+28     	; 0x101e <CapTouch_Short_Pressed+0x5a>
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	80 91 8c 01 	lds	r24, 0x018C
    1008:	90 91 8d 01 	lds	r25, 0x018D
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	82 17       	cp	r24, r18
    1012:	93 07       	cpc	r25, r19
    1014:	a4 07       	cpc	r26, r20
    1016:	b5 07       	cpc	r27, r21
    1018:	1c f0       	brlt	.+6      	; 0x1020 <CapTouch_Short_Pressed+0x5c>
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <CapTouch_Short_Pressed+0x5c>
    101e:	60 e0       	ldi	r22, 0x00	; 0
      sts=1;
    }
  }
  return sts;
}
    1020:	86 2f       	mov	r24, r22
    1022:	08 95       	ret

00001024 <CapTouch_Long_Pressed>:

uint8_t CapTouch_Long_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if((CapTouch.TouchDuration[current_channel]>CapTouch.LongPressTime) && (CapTouch.LongPressFlag[current_channel]==0)){
    1024:	68 2f       	mov	r22, r24
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	fb 01       	movw	r30, r22
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	e1 5a       	subi	r30, 0xA1	; 161
    1034:	fe 4f       	sbci	r31, 0xFE	; 254
    1036:	80 91 8e 01 	lds	r24, 0x018E
    103a:	90 91 8f 01 	lds	r25, 0x018F
    103e:	a0 e0       	ldi	r26, 0x00	; 0
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	23 8d       	ldd	r18, Z+27	; 0x1b
    1044:	34 8d       	ldd	r19, Z+28	; 0x1c
    1046:	45 8d       	ldd	r20, Z+29	; 0x1d
    1048:	56 8d       	ldd	r21, Z+30	; 0x1e
    104a:	82 17       	cp	r24, r18
    104c:	93 07       	cpc	r25, r19
    104e:	a4 07       	cpc	r26, r20
    1050:	b5 07       	cpc	r27, r21
    1052:	4c f4       	brge	.+18     	; 0x1066 <CapTouch_Long_Pressed+0x42>
    1054:	fb 01       	movw	r30, r22
    1056:	e1 5a       	subi	r30, 0xA1	; 161
    1058:	fe 4f       	sbci	r31, 0xFE	; 254
    105a:	81 a9       	ldd	r24, Z+49	; 0x31
    105c:	88 23       	and	r24, r24
    105e:	19 f4       	brne	.+6      	; 0x1066 <CapTouch_Long_Pressed+0x42>
    CapTouch.LongPressFlag[current_channel]=1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	81 ab       	std	Z+49, r24	; 0x31
    1064:	08 95       	ret
    1066:	80 e0       	ldi	r24, 0x00	; 0
    sts=1;
  }
  return sts;
}
    1068:	08 95       	ret

0000106a <CapTouch_Constant_Pressed>:

uint8_t CapTouch_Constant_Pressed(uint8_t current_channel){
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
  uint8_t sts=0;
  if((CapTouch.TriggerMethod[current_channel]==0x02) && (CapTouch.TouchDuration[current_channel]>CapTouch.MinShortPressTime)){
    106e:	c8 2f       	mov	r28, r24
    1070:	d0 e0       	ldi	r29, 0x00	; 0
    1072:	fe 01       	movw	r30, r28
    1074:	e1 5a       	subi	r30, 0xA1	; 161
    1076:	fe 4f       	sbci	r31, 0xFE	; 254
    1078:	87 89       	ldd	r24, Z+23	; 0x17
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	11 f0       	breq	.+4      	; 0x1082 <CapTouch_Constant_Pressed+0x18>
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	17 c0       	rjmp	.+46     	; 0x10b0 <CapTouch_Constant_Pressed+0x46>
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	cc 0f       	add	r28, r28
    1086:	dd 1f       	adc	r29, r29
    1088:	cc 0f       	add	r28, r28
    108a:	dd 1f       	adc	r29, r29
    108c:	c1 5a       	subi	r28, 0xA1	; 161
    108e:	de 4f       	sbci	r29, 0xFE	; 254
    1090:	80 91 8a 01 	lds	r24, 0x018A
    1094:	90 91 8b 01 	lds	r25, 0x018B
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    109e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    10a0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    10a2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    10a4:	82 17       	cp	r24, r18
    10a6:	93 07       	cpc	r25, r19
    10a8:	a4 07       	cpc	r26, r20
    10aa:	b5 07       	cpc	r27, r21
    10ac:	0c f4       	brge	.+2      	; 0x10b0 <CapTouch_Constant_Pressed+0x46>
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    sts=1;
  }
  return sts;
}
    10b0:	86 2f       	mov	r24, r22
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <CapTouch_Short_Pressed_Filtered>:



uint8_t CapTouch_Short_Pressed_Filtered(uint8_t current_channel){
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	78 2f       	mov	r23, r24
    10be:	ea e7       	ldi	r30, 0x7A	; 122
    10c0:	f1 e0       	ldi	r31, 0x01	; 1
    10c2:	61 e0       	ldi	r22, 0x01	; 1
  uint8_t  sts=0, res=1;
  for(uint8_t i=0;i<current_channel;i++){
    10c4:	c8 2f       	mov	r28, r24
    10c6:	d0 e0       	ldi	r29, 0x00	; 0
    10c8:	9e 01       	movw	r18, r28
    10ca:	22 0f       	add	r18, r18
    10cc:	33 1f       	adc	r19, r19
    10ce:	22 0f       	add	r18, r18
    10d0:	33 1f       	adc	r19, r19
    10d2:	a9 01       	movw	r20, r18
    10d4:	4e 0f       	add	r20, r30
    10d6:	5f 1f       	adc	r21, r31
    10d8:	0a c0       	rjmp	.+20     	; 0x10ee <CapTouch_Short_Pressed_Filtered+0x36>
    if(CapTouch_Get_Touch_Duration(i)!=0){
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	a2 81       	ldd	r26, Z+2	; 0x02
    10e0:	b3 81       	ldd	r27, Z+3	; 0x03
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	a1 05       	cpc	r26, r1
    10e6:	b1 05       	cpc	r27, r1
    10e8:	09 f0       	breq	.+2      	; 0x10ec <CapTouch_Short_Pressed_Filtered+0x34>
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	34 96       	adiw	r30, 0x04	; 4



uint8_t CapTouch_Short_Pressed_Filtered(uint8_t current_channel){
  uint8_t  sts=0, res=1;
  for(uint8_t i=0;i<current_channel;i++){
    10ee:	e4 17       	cp	r30, r20
    10f0:	f5 07       	cpc	r31, r21
    10f2:	99 f7       	brne	.-26     	; 0x10da <CapTouch_Short_Pressed_Filtered+0x22>
    if(CapTouch_Get_Touch_Duration(i)!=0){
	  res=0;
	}
  }
  
  if( (res == 1) && CapTouch_Short_Pressed(current_channel) ){
    10f4:	61 30       	cpi	r22, 0x01	; 1
    10f6:	d9 f5       	brne	.+118    	; 0x116e <CapTouch_Short_Pressed_Filtered+0xb6>
  CapTouch_Long_Pressed_Filtered();
}

uint8_t CapTouch_Short_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if(CapTouch.TriggerMethod[current_channel]==0x04){
    10f8:	c1 5a       	subi	r28, 0xA1	; 161
    10fa:	de 4f       	sbci	r29, 0xFE	; 254
    10fc:	8f 89       	ldd	r24, Y+23	; 0x17
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	b1 f5       	brne	.+108    	; 0x116e <CapTouch_Short_Pressed_Filtered+0xb6>
    if((CapTouch.TouchDuration[current_channel]>=CapTouch.MinShortPressTime) && (CapTouch.TouchDuration[current_channel]<=CapTouch.MaxShortPressTime)){
    1102:	21 5a       	subi	r18, 0xA1	; 161
    1104:	3e 4f       	sbci	r19, 0xFE	; 254
    1106:	f9 01       	movw	r30, r18
    1108:	23 8d       	ldd	r18, Z+27	; 0x1b
    110a:	34 8d       	ldd	r19, Z+28	; 0x1c
    110c:	45 8d       	ldd	r20, Z+29	; 0x1d
    110e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1110:	80 91 8a 01 	lds	r24, 0x018A
    1114:	90 91 8b 01 	lds	r25, 0x018B
    1118:	a0 e0       	ldi	r26, 0x00	; 0
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	28 17       	cp	r18, r24
    111e:	39 07       	cpc	r19, r25
    1120:	4a 07       	cpc	r20, r26
    1122:	5b 07       	cpc	r21, r27
    1124:	24 f1       	brlt	.+72     	; 0x116e <CapTouch_Short_Pressed_Filtered+0xb6>
    1126:	80 91 8c 01 	lds	r24, 0x018C
    112a:	90 91 8d 01 	lds	r25, 0x018D
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	82 17       	cp	r24, r18
    1134:	93 07       	cpc	r25, r19
    1136:	a4 07       	cpc	r26, r20
    1138:	b5 07       	cpc	r27, r21
    113a:	cc f0       	brlt	.+50     	; 0x116e <CapTouch_Short_Pressed_Filtered+0xb6>
  }else{
    res=0;
  }
  
  if(res == 1){
    for(uint8_t i=current_channel+1;i<CAPTOUCH_TOTAL_TOUCH_KEY;i++){
    113c:	27 2f       	mov	r18, r23
    113e:	2f 5f       	subi	r18, 0xFF	; 255
    1140:	31 e0       	ldi	r19, 0x01	; 1
    1142:	12 c0       	rjmp	.+36     	; 0x1168 <CapTouch_Short_Pressed_Filtered+0xb0>
      if(CapTouch_Get_Touch_Duration(i)!=0){
    1144:	e2 2f       	mov	r30, r18
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	e1 5a       	subi	r30, 0xA1	; 161
    1152:	fe 4f       	sbci	r31, 0xFE	; 254
    1154:	83 8d       	ldd	r24, Z+27	; 0x1b
    1156:	94 8d       	ldd	r25, Z+28	; 0x1c
    1158:	a5 8d       	ldd	r26, Z+29	; 0x1d
    115a:	b6 8d       	ldd	r27, Z+30	; 0x1e
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	a1 05       	cpc	r26, r1
    1160:	b1 05       	cpc	r27, r1
    1162:	09 f0       	breq	.+2      	; 0x1166 <CapTouch_Short_Pressed_Filtered+0xae>
    1164:	30 e0       	ldi	r19, 0x00	; 0
  }else{
    res=0;
  }
  
  if(res == 1){
    for(uint8_t i=current_channel+1;i<CAPTOUCH_TOTAL_TOUCH_KEY;i++){
    1166:	2f 5f       	subi	r18, 0xFF	; 255
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	60 f3       	brcs	.-40     	; 0x1144 <CapTouch_Short_Pressed_Filtered+0x8c>
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <CapTouch_Short_Pressed_Filtered+0xb8>
    116e:	30 e0       	ldi	r19, 0x00	; 0
	  }
	}
  }
  
  return sts;
}
    1170:	83 2f       	mov	r24, r19
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	08 95       	ret

00001178 <CapTouch_Long_Pressed_Filtered>:

uint8_t CapTouch_Long_Pressed_Filtered(void){
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
  return sts;
}

uint8_t CapTouch_Long_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if((CapTouch.TouchDuration[current_channel]>CapTouch.LongPressTime) && (CapTouch.LongPressFlag[current_channel]==0)){
    1188:	60 91 8e 01 	lds	r22, 0x018E
    118c:	70 91 8f 01 	lds	r23, 0x018F
    1190:	9b 01       	movw	r18, r22
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	80 91 7a 01 	lds	r24, 0x017A
    119a:	90 91 7b 01 	lds	r25, 0x017B
    119e:	a0 91 7c 01 	lds	r26, 0x017C
    11a2:	b0 91 7d 01 	lds	r27, 0x017D
    11a6:	28 17       	cp	r18, r24
    11a8:	39 07       	cpc	r19, r25
    11aa:	4a 07       	cpc	r20, r26
    11ac:	5b 07       	cpc	r21, r27
    11ae:	54 f4       	brge	.+20     	; 0x11c4 <CapTouch_Long_Pressed_Filtered+0x4c>
    11b0:	80 91 90 01 	lds	r24, 0x0190
    11b4:	88 23       	and	r24, r24
    11b6:	31 f4       	brne	.+12     	; 0x11c4 <CapTouch_Long_Pressed_Filtered+0x4c>
    CapTouch.LongPressFlag[current_channel]=1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 90 01 	sts	0x0190, r24
    11be:	11 e0       	ldi	r17, 0x01	; 1
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <CapTouch_Long_Pressed_Filtered+0x50>
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
  return sts;
}

uint8_t CapTouch_Long_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if((CapTouch.TouchDuration[current_channel]>CapTouch.LongPressTime) && (CapTouch.LongPressFlag[current_channel]==0)){
    11c8:	c0 90 7e 01 	lds	r12, 0x017E
    11cc:	d0 90 7f 01 	lds	r13, 0x017F
    11d0:	e0 90 80 01 	lds	r14, 0x0180
    11d4:	f0 90 81 01 	lds	r15, 0x0181
    11d8:	2c 15       	cp	r18, r12
    11da:	3d 05       	cpc	r19, r13
    11dc:	4e 05       	cpc	r20, r14
    11de:	5f 05       	cpc	r21, r15
    11e0:	54 f4       	brge	.+20     	; 0x11f6 <CapTouch_Long_Pressed_Filtered+0x7e>
    11e2:	80 91 91 01 	lds	r24, 0x0191
    11e6:	88 23       	and	r24, r24
    11e8:	31 f4       	brne	.+12     	; 0x11f6 <CapTouch_Long_Pressed_Filtered+0x7e>
    CapTouch.LongPressFlag[current_channel]=1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	80 93 91 01 	sts	0x0191, r24
uint8_t CapTouch_Long_Pressed_Filtered(void){
  uint8_t  sts=0, lt_chnl=0, res=0;
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY; i++){
    if(CapTouch_Long_Pressed(i)){
	  lt_chnl=i;
	  sts |= (1<<i);
    11f0:	12 60       	ori	r17, 0x02	; 2
    11f2:	01 e0       	ldi	r16, 0x01	; 1
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <CapTouch_Long_Pressed_Filtered+0x84>
    11f6:	00 e0       	ldi	r16, 0x00	; 0
	  res=1;
    }
  }
  if(res==1){
    11f8:	91 30       	cpi	r25, 0x01	; 1
    11fa:	89 f5       	brne	.+98     	; 0x125e <CapTouch_Long_Pressed_Filtered+0xe6>
    for(uint8_t i=0; i<lt_chnl; i++){
      if(CapTouch_Get_Touch_Duration(i)>=(CapTouch.LongPressTime/2)){
    11fc:	76 95       	lsr	r23
    11fe:	67 95       	ror	r22
    1200:	ab 01       	movw	r20, r22
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	ca e7       	ldi	r28, 0x7A	; 122
    1208:	d1 e0       	ldi	r29, 0x01	; 1
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	1a c0       	rjmp	.+52     	; 0x1244 <CapTouch_Long_Pressed_Filtered+0xcc>
    1210:	f9 01       	movw	r30, r18
int CapTouch_Get_Calibration_Value(uint8_t current_channel){
  return CapTouch.CalibrationValue[current_channel];
}

int32_t CapTouch_Get_Touch_Duration(uint8_t current_channel){
  return CapTouch.TouchDuration[current_channel];
    1212:	89 91       	ld	r24, Y+
    1214:	99 91       	ld	r25, Y+
    1216:	a9 91       	ld	r26, Y+
    1218:	b9 91       	ld	r27, Y+
    121a:	2f 5f       	subi	r18, 0xFF	; 255
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
	  res=1;
    }
  }
  if(res==1){
    for(uint8_t i=0; i<lt_chnl; i++){
      if(CapTouch_Get_Touch_Duration(i)>=(CapTouch.LongPressTime/2)){
    121e:	84 17       	cp	r24, r20
    1220:	95 07       	cpc	r25, r21
    1222:	a6 07       	cpc	r26, r22
    1224:	b7 07       	cpc	r27, r23
    1226:	74 f0       	brlt	.+28     	; 0x1244 <CapTouch_Long_Pressed_Filtered+0xcc>
	    sts |= (1<<i);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 2e       	mov	r0, r30
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <CapTouch_Long_Pressed_Filtered+0xbc>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <CapTouch_Long_Pressed_Filtered+0xb8>
    1238:	18 2b       	or	r17, r24
		CapTouch.LongPressFlag[i]=1;
    123a:	e1 5a       	subi	r30, 0xA1	; 161
    123c:	fe 4f       	sbci	r31, 0xFE	; 254
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	81 ab       	std	Z+49, r24	; 0x31
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <CapTouch_Long_Pressed_Filtered+0xd0>
	  sts |= (1<<i);
	  res=1;
    }
  }
  if(res==1){
    for(uint8_t i=0; i<lt_chnl; i++){
    1244:	20 17       	cp	r18, r16
    1246:	20 f3       	brcs	.-56     	; 0x1210 <CapTouch_Long_Pressed_Filtered+0x98>
	    sts |= (1<<i);
		CapTouch.LongPressFlag[i]=1;
	    break;
	  }
    }
    for(uint8_t i=lt_chnl+1; i<CAPTOUCH_TOTAL_TOUCH_KEY; i++){
    1248:	00 23       	and	r16, r16
    124a:	49 f4       	brne	.+18     	; 0x125e <CapTouch_Long_Pressed_Filtered+0xe6>
      if(CapTouch_Get_Touch_Duration(i)>=(CapTouch.LongPressTime/2)){
    124c:	c4 16       	cp	r12, r20
    124e:	d5 06       	cpc	r13, r21
    1250:	e6 06       	cpc	r14, r22
    1252:	f7 06       	cpc	r15, r23
    1254:	24 f0       	brlt	.+8      	; 0x125e <CapTouch_Long_Pressed_Filtered+0xe6>
	    sts |= (1<<i);
    1256:	12 60       	ori	r17, 0x02	; 2
		CapTouch.LongPressFlag[i]=1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 91 01 	sts	0x0191, r24
	    break;
	  }
    }
  }
  CapTouch.LongPressReg=sts;
    125e:	10 93 93 01 	sts	0x0193, r17
  return sts;
}
    1262:	81 2f       	mov	r24, r17
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	cf 90       	pop	r12
    1274:	08 95       	ret

00001276 <CapTouch_Scan_Sensors>:
    CapTouch.TouchDurationTemp[current_channel]=0;
  }
}


void CapTouch_Scan_Sensors(uint32_t refernce_time){
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	6b 01       	movw	r12, r22
    1284:	7c 01       	movw	r14, r24
  ADMUX =0x40;
  ADCSRA=0x87;
}

void CapTouch_ADC_Wakeup(void){
  ADCSRA|=(1<<ADEN);
    1286:	0a e7       	ldi	r16, 0x7A	; 122
    1288:	10 e0       	ldi	r17, 0x00	; 0
    128a:	f8 01       	movw	r30, r16
    128c:	80 81       	ld	r24, Z
    128e:	80 68       	ori	r24, 0x80	; 128
    1290:	80 83       	st	Z, r24


void CapTouch_Scan_Sensors(uint32_t refernce_time){
  #ifdef CAPTOUCH_AUTO_PWR_DOWN
    CapTouch_ADC_Wakeup();
	CapTouch_ADC_Sample(0);
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	0e 94 9f 05 	call	0xb3e	; 0xb3e <CapTouch_ADC_Sample>
  #endif
  for(uint8_t channel=0;channel<CAPTOUCH_TOTAL_TOUCH_KEY;channel++){
    for(uint8_t i=0; i<CAPTOUCH_CHECK_DUR_SMPL;i++){
      CapTouch_Check_Touch_Duration(channel, refernce_time);
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	b7 01       	movw	r22, r14
    129c:	a6 01       	movw	r20, r12
    129e:	0e 94 5d 07 	call	0xeba	; 0xeba <CapTouch_Check_Touch_Duration>
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	b7 01       	movw	r22, r14
    12a6:	a6 01       	movw	r20, r12
    12a8:	0e 94 5d 07 	call	0xeba	; 0xeba <CapTouch_Check_Touch_Duration>
void CapTouch_ADC_Wakeup(void){
  ADCSRA|=(1<<ADEN);
}

void CapTouch_ADC_Sleep(void){
  ADCSRA&=~(1<<ADEN);
    12ac:	f8 01       	movw	r30, r16
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 77       	andi	r24, 0x7F	; 127
    12b2:	80 83       	st	Z, r24
  #ifdef CAPTOUCH_AUTO_PWR_DOWN
    CapTouch_ADC_Sleep();
  #endif
  
  //long press added
  CapTouch_Long_Pressed_Filtered();
    12b4:	0e 94 bc 08 	call	0x1178	; 0x1178 <CapTouch_Long_Pressed_Filtered>
}
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	08 95       	ret

000012c6 <CapTouch_Set_Short_Press_Min_Time>:
  CapTouch.LongPressReg=sts;
  return sts;
}

void CapTouch_Set_Short_Press_Min_Time(uint8_t val){
  CapTouch.MinShortPressTime=val;
    12c6:	80 93 8a 01 	sts	0x018A, r24
    12ca:	10 92 8b 01 	sts	0x018B, r1
}
    12ce:	08 95       	ret

000012d0 <CapTouch_Set_Short_Press_Max_Time>:

void CapTouch_Set_Short_Press_Max_Time(uint8_t val){
  CapTouch.MaxShortPressTime=val;
    12d0:	80 93 8c 01 	sts	0x018C, r24
    12d4:	10 92 8d 01 	sts	0x018D, r1
}
    12d8:	08 95       	ret

000012da <CapTouch_Set_Long_Press_Time>:

void CapTouch_Set_Long_Press_Time(uint8_t val){
  CapTouch.LongPressTime=val;
    12da:	80 93 8e 01 	sts	0x018E, r24
    12de:	10 92 8f 01 	sts	0x018F, r1
}
    12e2:	08 95       	ret

000012e4 <CapTouch_Get_RawADC1>:

int CapTouch_Get_RawADC1(uint8_t current_channel){
    12e4:	e8 2f       	mov	r30, r24
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	e1 5a       	subi	r30, 0xA1	; 161
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
  return CapTouch.RawADC1[current_channel];
}
    12f0:	87 81       	ldd	r24, Z+7	; 0x07
    12f2:	90 85       	ldd	r25, Z+8	; 0x08
    12f4:	08 95       	ret

000012f6 <CapTouch_Get_RawADC2>:

int CapTouch_Get_RawADC2(uint8_t current_channel){
    12f6:	e8 2f       	mov	r30, r24
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	e1 5a       	subi	r30, 0xA1	; 161
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
  return CapTouch.RawADC2[current_channel];
}
    1302:	83 85       	ldd	r24, Z+11	; 0x0b
    1304:	94 85       	ldd	r25, Z+12	; 0x0c
    1306:	08 95       	ret

00001308 <CapTouch_Get_RawDifferentialADC>:

int CapTouch_Get_RawDifferentialADC(uint8_t current_channel){
    1308:	e8 2f       	mov	r30, r24
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	ee 0f       	add	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	e1 5a       	subi	r30, 0xA1	; 161
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
  return CapTouch.RawDiffADC[current_channel];
}
    1314:	87 85       	ldd	r24, Z+15	; 0x0f
    1316:	90 89       	ldd	r25, Z+16	; 0x10
    1318:	08 95       	ret

0000131a <CapTouch_Get_Calibration_Value>:

int CapTouch_Get_Calibration_Value(uint8_t current_channel){
    131a:	e8 2f       	mov	r30, r24
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	e1 5a       	subi	r30, 0xA1	; 161
    1324:	fe 4f       	sbci	r31, 0xFE	; 254
  return CapTouch.CalibrationValue[current_channel];
}
    1326:	83 81       	ldd	r24, Z+3	; 0x03
    1328:	94 81       	ldd	r25, Z+4	; 0x04
    132a:	08 95       	ret

0000132c <CapTouch_Get_Touch_Duration>:

int32_t CapTouch_Get_Touch_Duration(uint8_t current_channel){
    132c:	e8 2f       	mov	r30, r24
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	e1 5a       	subi	r30, 0xA1	; 161
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	df 01       	movw	r26, r30
    133e:	5b 96       	adiw	r26, 0x1b	; 27
    1340:	63 8d       	ldd	r22, Z+27	; 0x1b
    1342:	11 96       	adiw	r26, 0x01	; 1
    1344:	7c 91       	ld	r23, X
    1346:	11 97       	sbiw	r26, 0x01	; 1
  return CapTouch.TouchDuration[current_channel];
}
    1348:	12 96       	adiw	r26, 0x02	; 2
    134a:	8c 91       	ld	r24, X
    134c:	12 97       	sbiw	r26, 0x02	; 2
    134e:	13 96       	adiw	r26, 0x03	; 3
    1350:	9c 91       	ld	r25, X
    1352:	08 95       	ret

00001354 <CapTouch_Get_Touch_Response>:

uint8_t CapTouch_Get_Touch_Response(uint8_t current_channel){
    1354:	ef e5       	ldi	r30, 0x5F	; 95
    1356:	f1 e0       	ldi	r31, 0x01	; 1
    1358:	e8 0f       	add	r30, r24
    135a:	f1 1d       	adc	r31, r1
  return CapTouch.Result[current_channel];
}
    135c:	81 81       	ldd	r24, Z+1	; 0x01
    135e:	08 95       	ret

00001360 <CapTouch_Get_Long_Press_Reg>:

uint8_t CapTouch_Get_Long_Press_Reg(void){
  return CapTouch.LongPressReg;
}
    1360:	80 91 93 01 	lds	r24, 0x0193
    1364:	08 95       	ret

00001366 <CapTouch_Get_Reference_Timer_Use_Flag>:

uint8_t CapTouch_Get_Reference_Timer_Use_Flag(void){
    1366:	80 91 94 01 	lds	r24, 0x0194
    136a:	81 11       	cpse	r24, r1
    136c:	81 e0       	ldi	r24, 0x01	; 1
  if(CapTouch.UsingReferenceTimer){
    return 1;
  }else{
    return 0;
  }
}
    136e:	08 95       	ret

00001370 <CapTouch_Get_ErrorCode>:

uint8_t CapTouch_Get_ErrorCode(uint8_t current_channel){
    1370:	ef e5       	ldi	r30, 0x5F	; 95
    1372:	f1 e0       	ldi	r31, 0x01	; 1
    1374:	e8 0f       	add	r30, r24
    1376:	f1 1d       	adc	r31, r1
  return CapTouch.ErrorCode[current_channel];
}
    1378:	86 a9       	ldd	r24, Z+54	; 0x36
    137a:	08 95       	ret

0000137c <CapTouch_Get_Debug_Data>:

void CapTouch_Get_Debug_Data(uint8_t current_channel, int *data_out){
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	eb 01       	movw	r28, r22
  data_out[0]=8;
    1382:	28 e0       	ldi	r18, 0x08	; 8
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	39 83       	std	Y+1, r19	; 0x01
    1388:	28 83       	st	Y, r18
  data_out[1]=current_channel;
    138a:	a8 2f       	mov	r26, r24
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	bb 83       	std	Y+3, r27	; 0x03
    1390:	aa 83       	std	Y+2, r26	; 0x02
  data_out[2]=CapTouch_Get_RawADC1(current_channel);
    1392:	fd 01       	movw	r30, r26
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	e1 5a       	subi	r30, 0xA1	; 161
    139a:	fe 4f       	sbci	r31, 0xFE	; 254
    139c:	87 81       	ldd	r24, Z+7	; 0x07
    139e:	90 85       	ldd	r25, Z+8	; 0x08
    13a0:	9d 83       	std	Y+5, r25	; 0x05
    13a2:	8c 83       	std	Y+4, r24	; 0x04
  data_out[3]=CapTouch_Get_RawADC2(current_channel);
    13a4:	83 85       	ldd	r24, Z+11	; 0x0b
    13a6:	94 85       	ldd	r25, Z+12	; 0x0c
    13a8:	9f 83       	std	Y+7, r25	; 0x07
    13aa:	8e 83       	std	Y+6, r24	; 0x06
  data_out[4]=CapTouch_Get_RawDifferentialADC(current_channel);
    13ac:	87 85       	ldd	r24, Z+15	; 0x0f
    13ae:	90 89       	ldd	r25, Z+16	; 0x10
    13b0:	99 87       	std	Y+9, r25	; 0x09
    13b2:	88 87       	std	Y+8, r24	; 0x08
  data_out[5]=CapTouch_Get_Calibration_Value(current_channel);
    13b4:	83 81       	ldd	r24, Z+3	; 0x03
    13b6:	94 81       	ldd	r25, Z+4	; 0x04
    13b8:	9b 87       	std	Y+11, r25	; 0x0b
    13ba:	8a 87       	std	Y+10, r24	; 0x0a
  data_out[6]=CapTouch_Get_Touch_Duration(current_channel);
    13bc:	fd 01       	movw	r30, r26
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	e1 5a       	subi	r30, 0xA1	; 161
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	83 8d       	ldd	r24, Z+27	; 0x1b
    13cc:	94 8d       	ldd	r25, Z+28	; 0x1c
    13ce:	9d 87       	std	Y+13, r25	; 0x0d
    13d0:	8c 87       	std	Y+12, r24	; 0x0c
  data_out[7]=CapTouch_Get_Touch_Response(current_channel);
    13d2:	a1 5a       	subi	r26, 0xA1	; 161
    13d4:	be 4f       	sbci	r27, 0xFE	; 254
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	8c 91       	ld	r24, X
    13da:	8e 87       	std	Y+14, r24	; 0x0e
    13dc:	1f 86       	std	Y+15, r1	; 0x0f
  data_out[8]=CapTouch_Get_Reference_Timer_Use_Flag();
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	80 91 94 01 	lds	r24, 0x0194
    13e6:	88 23       	and	r24, r24
    13e8:	11 f0       	breq	.+4      	; 0x13ee <CapTouch_Get_Debug_Data+0x72>
    13ea:	21 e0       	ldi	r18, 0x01	; 1
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	39 8b       	std	Y+17, r19	; 0x11
    13f0:	28 8b       	std	Y+16, r18	; 0x10
}
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <CapTouch_Init>:

void CapTouch_Init(void){
  CapTouch_Struct_Init();
    13f8:	0e 94 47 04 	call	0x88e	; 0x88e <CapTouch_Struct_Init>
  #ifdef CAPTOUCH_ENABLE_LPF
    CapTouch_IIR_LPF_Struct_Init();
    13fc:	0e 94 c0 04 	call	0x980	; 0x980 <CapTouch_IIR_LPF_Struct_Init>
void CapTouch_Set_Key_Pin_Output_High(uint8_t current_channel){
  CAPTOUCH_ADC_PORT|=(1<<current_channel);
}

void CapTouch_ADC_Register_Config(void){
  ADMUX =0x40;
    1400:	80 e4       	ldi	r24, 0x40	; 64
    1402:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA=0x87;
    1406:	87 e8       	ldi	r24, 0x87	; 135
    1408:	80 93 7a 00 	sts	0x007A, r24
  CapTouch_Struct_Init();
  #ifdef CAPTOUCH_ENABLE_LPF
    CapTouch_IIR_LPF_Struct_Init();
  #endif
  CapTouch_ADC_Register_Config();
  CapTouch_Calibration();
    140c:	0e 94 95 06 	call	0xd2a	; 0xd2a <CapTouch_Calibration>
}
    1410:	08 95       	ret

00001412 <__mulsi3>:
    1412:	62 9f       	mul	r22, r18
    1414:	d0 01       	movw	r26, r0
    1416:	73 9f       	mul	r23, r19
    1418:	f0 01       	movw	r30, r0
    141a:	82 9f       	mul	r24, r18
    141c:	e0 0d       	add	r30, r0
    141e:	f1 1d       	adc	r31, r1
    1420:	64 9f       	mul	r22, r20
    1422:	e0 0d       	add	r30, r0
    1424:	f1 1d       	adc	r31, r1
    1426:	92 9f       	mul	r25, r18
    1428:	f0 0d       	add	r31, r0
    142a:	83 9f       	mul	r24, r19
    142c:	f0 0d       	add	r31, r0
    142e:	74 9f       	mul	r23, r20
    1430:	f0 0d       	add	r31, r0
    1432:	65 9f       	mul	r22, r21
    1434:	f0 0d       	add	r31, r0
    1436:	99 27       	eor	r25, r25
    1438:	72 9f       	mul	r23, r18
    143a:	b0 0d       	add	r27, r0
    143c:	e1 1d       	adc	r30, r1
    143e:	f9 1f       	adc	r31, r25
    1440:	63 9f       	mul	r22, r19
    1442:	b0 0d       	add	r27, r0
    1444:	e1 1d       	adc	r30, r1
    1446:	f9 1f       	adc	r31, r25
    1448:	bd 01       	movw	r22, r26
    144a:	cf 01       	movw	r24, r30
    144c:	11 24       	eor	r1, r1
    144e:	08 95       	ret

00001450 <__udivmodsi4>:
    1450:	a1 e2       	ldi	r26, 0x21	; 33
    1452:	1a 2e       	mov	r1, r26
    1454:	aa 1b       	sub	r26, r26
    1456:	bb 1b       	sub	r27, r27
    1458:	fd 01       	movw	r30, r26
    145a:	0d c0       	rjmp	.+26     	; 0x1476 <__udivmodsi4_ep>

0000145c <__udivmodsi4_loop>:
    145c:	aa 1f       	adc	r26, r26
    145e:	bb 1f       	adc	r27, r27
    1460:	ee 1f       	adc	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	a2 17       	cp	r26, r18
    1466:	b3 07       	cpc	r27, r19
    1468:	e4 07       	cpc	r30, r20
    146a:	f5 07       	cpc	r31, r21
    146c:	20 f0       	brcs	.+8      	; 0x1476 <__udivmodsi4_ep>
    146e:	a2 1b       	sub	r26, r18
    1470:	b3 0b       	sbc	r27, r19
    1472:	e4 0b       	sbc	r30, r20
    1474:	f5 0b       	sbc	r31, r21

00001476 <__udivmodsi4_ep>:
    1476:	66 1f       	adc	r22, r22
    1478:	77 1f       	adc	r23, r23
    147a:	88 1f       	adc	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	1a 94       	dec	r1
    1480:	69 f7       	brne	.-38     	; 0x145c <__udivmodsi4_loop>
    1482:	60 95       	com	r22
    1484:	70 95       	com	r23
    1486:	80 95       	com	r24
    1488:	90 95       	com	r25
    148a:	9b 01       	movw	r18, r22
    148c:	ac 01       	movw	r20, r24
    148e:	bd 01       	movw	r22, r26
    1490:	cf 01       	movw	r24, r30
    1492:	08 95       	ret

00001494 <__divmodsi4>:
    1494:	97 fb       	bst	r25, 7
    1496:	09 2e       	mov	r0, r25
    1498:	05 26       	eor	r0, r21
    149a:	0e d0       	rcall	.+28     	; 0x14b8 <__divmodsi4_neg1>
    149c:	57 fd       	sbrc	r21, 7
    149e:	04 d0       	rcall	.+8      	; 0x14a8 <__divmodsi4_neg2>
    14a0:	d7 df       	rcall	.-82     	; 0x1450 <__udivmodsi4>
    14a2:	0a d0       	rcall	.+20     	; 0x14b8 <__divmodsi4_neg1>
    14a4:	00 1c       	adc	r0, r0
    14a6:	38 f4       	brcc	.+14     	; 0x14b6 <__divmodsi4_exit>

000014a8 <__divmodsi4_neg2>:
    14a8:	50 95       	com	r21
    14aa:	40 95       	com	r20
    14ac:	30 95       	com	r19
    14ae:	21 95       	neg	r18
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	4f 4f       	sbci	r20, 0xFF	; 255
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255

000014b6 <__divmodsi4_exit>:
    14b6:	08 95       	ret

000014b8 <__divmodsi4_neg1>:
    14b8:	f6 f7       	brtc	.-4      	; 0x14b6 <__divmodsi4_exit>
    14ba:	90 95       	com	r25
    14bc:	80 95       	com	r24
    14be:	70 95       	com	r23
    14c0:	61 95       	neg	r22
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	08 95       	ret

000014ca <_exit>:
    14ca:	f8 94       	cli

000014cc <__stop_program>:
    14cc:	ff cf       	rjmp	.-2      	; 0x14cc <__stop_program>
