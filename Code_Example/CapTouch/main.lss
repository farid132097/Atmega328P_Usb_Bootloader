
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000149e  00001532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000149e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  00800132  00800132  00001564  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000aaf  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001aad  00000000  00000000  00002073  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064e  00000000  00000000  00003b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000149b  00000000  00000000  0000416e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000670  00000000  00000000  0000560c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b77  00000000  00000000  00005c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ce2  00000000  00000000  000067f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000074d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 2a 04 	jmp	0x854	; 0x854 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e9       	ldi	r30, 0x9E	; 158
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3c       	cpi	r26, 0xCB	; 203
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "captouch.h"
#include "debug.h"

int main(void){
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29

  debug_init();
      b2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <debug_init>
  CapTouch_Init();
      b6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <CapTouch_Init>
      ba:	ee 24       	eor	r14, r14
      bc:	ff 24       	eor	r15, r15
      be:	87 01       	movw	r16, r14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c0:	c0 e6       	ldi	r28, 0x60	; 96
      c2:	da ee       	ldi	r29, 0xEA	; 234
  
  uint32_t ticks=0;
  while(1){
    
    CapTouch_Scan_Sensors(ticks);
      c4:	c8 01       	movw	r24, r16
      c6:	b7 01       	movw	r22, r14
      c8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <CapTouch_Scan_Sensors>
	ticks++;
      cc:	08 94       	sec
      ce:	e1 1c       	adc	r14, r1
      d0:	f1 1c       	adc	r15, r1
      d2:	01 1d       	adc	r16, r1
      d4:	11 1d       	adc	r17, r1
	
	uint8_t sts=CapTouch_Long_Pressed_Filtered();
      d6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <CapTouch_Long_Pressed_Filtered>
	
	if(sts==0b01){
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	19 f4       	brne	.+6      	; 0xe4 <main+0x3e>
	  debug_tx_text_nl("LP BT 0");
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	91 e0       	ldi	r25, 0x01	; 1
      e2:	09 c0       	rjmp	.+18     	; 0xf6 <main+0x50>
	}else if(sts==0b10){
      e4:	82 30       	cpi	r24, 0x02	; 2
      e6:	19 f4       	brne	.+6      	; 0xee <main+0x48>
	  debug_tx_text_nl("LP BT 1");
      e8:	88 e0       	ldi	r24, 0x08	; 8
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	04 c0       	rjmp	.+8      	; 0xf6 <main+0x50>
	}else if(sts==0b11){
      ee:	83 30       	cpi	r24, 0x03	; 3
      f0:	21 f4       	brne	.+8      	; 0xfa <main+0x54>
	  debug_tx_text_nl("LP BT 1 & 0");
      f2:	80 e1       	ldi	r24, 0x10	; 16
      f4:	91 e0       	ldi	r25, 0x01	; 1
      f6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <debug_tx_text_nl>
      fa:	ce 01       	movw	r24, r28
      fc:	01 97       	sbiw	r24, 0x01	; 1
      fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x56>
     100:	e1 cf       	rjmp	.-62     	; 0xc4 <main+0x1e>

00000102 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     102:	10 92 32 01 	sts	0x0132, r1
  debug.datareg=0;
     106:	10 92 33 01 	sts	0x0133, r1
  debug.databsy=1;
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	80 93 34 01 	sts	0x0134, r24
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     114:	fc 01       	movw	r30, r24
     116:	ee 5c       	subi	r30, 0xCE	; 206
     118:	fe 4f       	sbci	r31, 0xFE	; 254
     11a:	13 82       	std	Z+3, r1	; 0x03
     11c:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     11e:	80 32       	cpi	r24, 0x20	; 32
     120:	91 05       	cpc	r25, r1
     122:	c1 f7       	brne	.-16     	; 0x114 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     124:	10 92 55 01 	sts	0x0155, r1
     128:	e6 e5       	ldi	r30, 0x56	; 86
     12a:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     12c:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	ee 35       	cpi	r30, 0x5E	; 94
     132:	f8 07       	cpc	r31, r24
     134:	d9 f7       	brne	.-10     	; 0x12c <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     136:	10 82       	st	Z, r1
}
     138:	08 95       	ret

0000013a <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     13a:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     13c:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     13e:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     146:	e8 e6       	ldi	r30, 0x68	; 104
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	82 60       	ori	r24, 0x02	; 2
     14e:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     150:	ec e6       	ldi	r30, 0x6C	; 108
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 64       	ori	r24, 0x40	; 64
     158:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     15a:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     15c:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     15e:	08 95       	ret

00000160 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     164:	ee e6       	ldi	r30, 0x6E	; 110
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	10 82       	st	Z, r1
  TCNT0 =200;
     16a:	88 ec       	ldi	r24, 0xC8	; 200
     16c:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     16e:	84 e0       	ldi	r24, 0x04	; 4
     170:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     176:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     178:	08 95       	ret

0000017a <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     17a:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     17e:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     180:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     182:	08 95       	ret

00000184 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     184:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     186:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     188:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     18a:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     18c:	08 95       	ret

0000018e <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     18e:	5d 9a       	sbi	0x0b, 5	; 11
}
     190:	08 95       	ret

00000192 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     192:	5d 98       	cbi	0x0b, 5	; 11
}
     194:	08 95       	ret

00000196 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	11 f4       	brne	.+4      	; 0x19e <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     19a:	5d 9a       	sbi	0x0b, 5	; 11
     19c:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     19e:	5d 98       	cbi	0x0b, 5	; 11
     1a0:	08 95       	ret

000001a2 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     1a2:	86 b1       	in	r24, 0x06	; 6
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	26 e0       	ldi	r18, 0x06	; 6
     1a8:	96 95       	lsr	r25
     1aa:	87 95       	ror	r24
     1ac:	2a 95       	dec	r18
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     1b0:	81 70       	andi	r24, 0x01	; 1
     1b2:	08 95       	ret

000001b4 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     1b4:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     1b6:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     1bc:	86 b5       	in	r24, 0x26	; 38
     1be:	82 33       	cpi	r24, 0x32	; 50
     1c0:	e8 f3       	brcs	.-6      	; 0x1bc <debug_delay+0x8>
    TCNT0=0;
     1c2:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     1c4:	86 b5       	in	r24, 0x26	; 38
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	82 17       	cp	r24, r18
     1ca:	93 07       	cpc	r25, r19
     1cc:	d8 f3       	brcs	.-10     	; 0x1c4 <debug_delay+0x10>
  TCCR0B=0;
     1ce:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     1d0:	08 95       	ret

000001d2 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     1d2:	80 91 2a 01 	lds	r24, 0x012A
     1d6:	90 91 2b 01 	lds	r25, 0x012B
     1da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     1de:	08 95       	ret

000001e0 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     1e0:	80 91 2c 01 	lds	r24, 0x012C
     1e4:	90 91 2d 01 	lds	r25, 0x012D
     1e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     1ec:	08 95       	ret

000001ee <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     1ee:	80 91 2e 01 	lds	r24, 0x012E
     1f2:	90 91 2f 01 	lds	r25, 0x012F
     1f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     1fa:	08 95       	ret

000001fc <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     1fc:	df 92       	push	r13
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	df 93       	push	r29
     208:	cf 93       	push	r28
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	2a 97       	sbiw	r28, 0x0a	; 10
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     21a:	fe 01       	movw	r30, r28
     21c:	31 96       	adiw	r30, 0x01	; 1
     21e:	9a e0       	ldi	r25, 0x0A	; 10
     220:	df 01       	movw	r26, r30
     222:	1d 92       	st	X+, r1
     224:	9a 95       	dec	r25
     226:	e9 f7       	brne	.-6      	; 0x222 <debug_tx_byte+0x26>
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	fe 01       	movw	r30, r28
     22e:	32 96       	adiw	r30, 0x02	; 2
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     234:	48 2f       	mov	r20, r24
     236:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     238:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     23a:	ca 01       	movw	r24, r20
     23c:	02 2e       	mov	r0, r18
     23e:	02 c0       	rjmp	.+4      	; 0x244 <debug_tx_byte+0x48>
     240:	95 95       	asr	r25
     242:	87 95       	ror	r24
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <debug_tx_byte+0x44>
     248:	80 ff       	sbrs	r24, 0
     24a:	02 c0       	rjmp	.+4      	; 0x250 <debug_tx_byte+0x54>
	  buf[i+1]=1;
     24c:	60 83       	st	Z, r22
     24e:	01 c0       	rjmp	.+2      	; 0x252 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     250:	10 82       	st	Z, r1
     252:	2f 5f       	subi	r18, 0xFF	; 255
     254:	3f 4f       	sbci	r19, 0xFF	; 255
     256:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     258:	28 30       	cpi	r18, 0x08	; 8
     25a:	31 05       	cpc	r19, r1
     25c:	71 f7       	brne	.-36     	; 0x23a <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     25e:	df b6       	in	r13, 0x3f	; 63
  cli();
     260:	f8 94       	cli
     262:	8e 01       	movw	r16, r28
     264:	0f 5f       	subi	r16, 0xFF	; 255
     266:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     268:	3b e0       	ldi	r19, 0x0B	; 11
     26a:	e3 2e       	mov	r14, r19
     26c:	f1 2c       	mov	r15, r1
     26e:	ec 0e       	add	r14, r28
     270:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     272:	f8 01       	movw	r30, r16
     274:	80 81       	ld	r24, Z
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	11 f4       	brne	.+4      	; 0x27e <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     27a:	5d 9a       	sbi	0x0b, 5	; 11
     27c:	01 c0       	rjmp	.+2      	; 0x280 <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     27e:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     280:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <debug_delay_index_0>
     284:	0f 5f       	subi	r16, 0xFF	; 255
     286:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     288:	0e 15       	cp	r16, r14
     28a:	1f 05       	cpc	r17, r15
     28c:	91 f7       	brne	.-28     	; 0x272 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     28e:	df be       	out	0x3f, r13	; 63
}
     290:	2a 96       	adiw	r28, 0x0a	; 10
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	08 95       	ret

000002ac <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     2ac:	ff 92       	push	r15
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     2b2:	36 9b       	sbis	0x06, 6	; 6
     2b4:	21 c0       	rjmp	.+66     	; 0x2f8 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	17 c0       	rjmp	.+46     	; 0x2e8 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     2ba:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     2be:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     2c0:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     2c2:	17 30       	cpi	r17, 0x07	; 7
     2c4:	09 f0       	breq	.+2      	; 0x2c8 <debug_rx_byte+0x1c>
	    val>>=1;
     2c6:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     2c8:	1f 5f       	subi	r17, 0xFF	; 255
     2ca:	18 30       	cpi	r17, 0x08	; 8
     2cc:	b1 f7       	brne	.-20     	; 0x2ba <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     2ce:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     2d2:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     2d4:	f6 fc       	sbrc	r15, 6
     2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <debug_rx_byte+0x3a>
     2d8:	86 ff       	sbrs	r24, 6
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <debug_rx_byte+0x3a>
	  debug.datareg=val;
     2dc:	00 93 33 01 	sts	0x0133, r16
	  debug.error=0x00;
     2e0:	10 92 32 01 	sts	0x0132, r1
     2e4:	03 c0       	rjmp	.+6      	; 0x2ec <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	80 93 32 01 	sts	0x0132, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     2ec:	80 91 33 01 	lds	r24, 0x0133
}
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	ff 90       	pop	r15
     2f6:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     2f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     2fc:	f6 b0       	in	r15, 0x06	; 6
     2fe:	00 e0       	ldi	r16, 0x00	; 0
     300:	10 e0       	ldi	r17, 0x00	; 0
     302:	db cf       	rjmp	.-74     	; 0x2ba <debug_rx_byte+0xe>

00000304 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     304:	80 91 33 01 	lds	r24, 0x0133
}
     308:	08 95       	ret

0000030a <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     30a:	10 92 33 01 	sts	0x0133, r1
}
     30e:	08 95       	ret

00000310 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     310:	80 93 33 01 	sts	0x0133, r24
}
     314:	08 95       	ret

00000316 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     316:	bf 92       	push	r11
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	7b 01       	movw	r14, r22
     32a:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	e8 16       	cp	r14, r24
     330:	f1 04       	cpc	r15, r1
     332:	01 05       	cpc	r16, r1
     334:	11 05       	cpc	r17, r1
     336:	09 f0       	breq	.+2      	; 0x33a <debug_tx_hex+0x24>
     338:	30 f4       	brcc	.+12     	; 0x346 <debug_tx_hex+0x30>
     33a:	c8 e0       	ldi	r28, 0x08	; 8
     33c:	d0 e0       	ldi	r29, 0x00	; 0
     33e:	62 e0       	ldi	r22, 0x02	; 2
     340:	c6 2e       	mov	r12, r22
     342:	d1 2c       	mov	r13, r1
     344:	14 c0       	rjmp	.+40     	; 0x36e <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	e8 16       	cp	r14, r24
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	f8 06       	cpc	r15, r24
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	08 07       	cpc	r16, r24
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	18 07       	cpc	r17, r24
     356:	30 f0       	brcs	.+12     	; 0x364 <debug_tx_hex+0x4e>
     358:	c0 e2       	ldi	r28, 0x20	; 32
     35a:	d0 e0       	ldi	r29, 0x00	; 0
     35c:	58 e0       	ldi	r21, 0x08	; 8
     35e:	c5 2e       	mov	r12, r21
     360:	d1 2c       	mov	r13, r1
     362:	05 c0       	rjmp	.+10     	; 0x36e <debug_tx_hex+0x58>
     364:	c0 e1       	ldi	r28, 0x10	; 16
     366:	d0 e0       	ldi	r29, 0x00	; 0
     368:	44 e0       	ldi	r20, 0x04	; 4
     36a:	c4 2e       	mov	r12, r20
     36c:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     36e:	80 e3       	ldi	r24, 0x30	; 48
     370:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
  debug_tx_byte('x');
     374:	88 e7       	ldi	r24, 0x78	; 120
     376:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
     37a:	bb 24       	eor	r11, r11
     37c:	17 c0       	rjmp	.+46     	; 0x3ac <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     37e:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     380:	d8 01       	movw	r26, r16
     382:	c7 01       	movw	r24, r14
     384:	0c 2e       	mov	r0, r28
     386:	04 c0       	rjmp	.+8      	; 0x390 <debug_tx_hex+0x7a>
     388:	b6 95       	lsr	r27
     38a:	a7 95       	ror	r26
     38c:	97 95       	ror	r25
     38e:	87 95       	ror	r24
     390:	0a 94       	dec	r0
     392:	d2 f7       	brpl	.-12     	; 0x388 <debug_tx_hex+0x72>
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	8f 70       	andi	r24, 0x0F	; 15
     398:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     39a:	8a 30       	cpi	r24, 0x0A	; 10
     39c:	91 05       	cpc	r25, r1
     39e:	10 f0       	brcs	.+4      	; 0x3a4 <debug_tx_hex+0x8e>
	    hex_digit+=55;
     3a0:	c7 96       	adiw	r24, 0x37	; 55
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     3a4:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     3a6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     3aa:	b3 94       	inc	r11
     3ac:	8b 2d       	mov	r24, r11
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	8c 15       	cp	r24, r12
     3b2:	9d 05       	cpc	r25, r13
     3b4:	20 f3       	brcs	.-56     	; 0x37e <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	08 95       	ret

000003ca <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     3ca:	af 92       	push	r10
     3cc:	bf 92       	push	r11
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	7b 01       	movw	r14, r22
     3e0:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     3e2:	6f 3f       	cpi	r22, 0xFF	; 255
     3e4:	71 05       	cpc	r23, r1
     3e6:	81 05       	cpc	r24, r1
     3e8:	91 05       	cpc	r25, r1
     3ea:	09 f0       	breq	.+2      	; 0x3ee <debug_tx_bin+0x24>
     3ec:	18 f4       	brcc	.+6      	; 0x3f4 <debug_tx_bin+0x2a>
     3ee:	f7 e0       	ldi	r31, 0x07	; 7
     3f0:	df 2e       	mov	r13, r31
     3f2:	0d c0       	rjmp	.+26     	; 0x40e <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     3f4:	60 30       	cpi	r22, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	73 07       	cpc	r23, r19
     3fa:	31 e0       	ldi	r19, 0x01	; 1
     3fc:	83 07       	cpc	r24, r19
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	93 07       	cpc	r25, r19
     402:	18 f0       	brcs	.+6      	; 0x40a <debug_tx_bin+0x40>
     404:	ef e1       	ldi	r30, 0x1F	; 31
     406:	de 2e       	mov	r13, r30
     408:	02 c0       	rjmp	.+4      	; 0x40e <debug_tx_bin+0x44>
     40a:	7f e0       	ldi	r23, 0x0F	; 15
     40c:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     40e:	80 e3       	ldi	r24, 0x30	; 48
     410:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
  debug_tx_byte('b');
     414:	82 e6       	ldi	r24, 0x62	; 98
     416:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
     41a:	c0 e0       	ldi	r28, 0x00	; 0
     41c:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     41e:	cd 2c       	mov	r12, r13
     420:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     422:	56 01       	movw	r10, r12
     424:	08 94       	sec
     426:	a1 1c       	adc	r10, r1
     428:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     42a:	c6 01       	movw	r24, r12
     42c:	8c 1b       	sub	r24, r28
     42e:	9d 0b       	sbc	r25, r29
     430:	a8 01       	movw	r20, r16
     432:	97 01       	movw	r18, r14
     434:	04 c0       	rjmp	.+8      	; 0x43e <debug_tx_bin+0x74>
     436:	56 95       	lsr	r21
     438:	47 95       	ror	r20
     43a:	37 95       	ror	r19
     43c:	27 95       	ror	r18
     43e:	8a 95       	dec	r24
     440:	d2 f7       	brpl	.-12     	; 0x436 <debug_tx_bin+0x6c>
     442:	da 01       	movw	r26, r20
     444:	c9 01       	movw	r24, r18
     446:	81 70       	andi	r24, 0x01	; 1
     448:	90 70       	andi	r25, 0x00	; 0
     44a:	89 2b       	or	r24, r25
     44c:	11 f0       	breq	.+4      	; 0x452 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     44e:	81 e3       	ldi	r24, 0x31	; 49
     450:	01 c0       	rjmp	.+2      	; 0x454 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     452:	80 e3       	ldi	r24, 0x30	; 48
     454:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
     458:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     45a:	ca 15       	cp	r28, r10
     45c:	db 05       	cpc	r29, r11
     45e:	29 f7       	brne	.-54     	; 0x42a <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	df 90       	pop	r13
     46e:	cf 90       	pop	r12
     470:	bf 90       	pop	r11
     472:	af 90       	pop	r10
     474:	08 95       	ret

00000476 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     476:	8d e0       	ldi	r24, 0x0D	; 13
     478:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
  debug_tx_byte('\n');
     47c:	8a e0       	ldi	r24, 0x0A	; 10
     47e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
}
     482:	08 95       	ret

00000484 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     484:	80 e2       	ldi	r24, 0x20	; 32
     486:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
}
     48a:	08 95       	ret

0000048c <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     48c:	8c e2       	ldi	r24, 0x2C	; 44
     48e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
}
     492:	08 95       	ret

00000494 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	03 c0       	rjmp	.+6      	; 0x4a6 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     4a0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
        i++;
     4a4:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     4a6:	fe 01       	movw	r30, r28
     4a8:	e1 0f       	add	r30, r17
     4aa:	f1 1d       	adc	r31, r1
     4ac:	80 81       	ld	r24, Z
     4ae:	88 23       	and	r24, r24
     4b0:	b9 f7       	brne	.-18     	; 0x4a0 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	08 95       	ret

000004ba <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     4ba:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_nl();
     4be:	0e 94 3b 02 	call	0x476	; 0x476 <debug_tx_nl>
}
     4c2:	08 95       	ret

000004c4 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     4c4:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     4c8:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
}
     4cc:	08 95       	ret

000004ce <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     4ce:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_cm();
     4d2:	0e 94 46 02 	call	0x48c	; 0x48c <debug_tx_cm>
}
     4d6:	08 95       	ret

000004d8 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	6b 01       	movw	r12, r22
     4e8:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     4ea:	61 15       	cp	r22, r1
     4ec:	71 05       	cpc	r23, r1
     4ee:	81 05       	cpc	r24, r1
     4f0:	91 05       	cpc	r25, r1
     4f2:	31 f4       	brne	.+12     	; 0x500 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     4f4:	10 92 56 01 	sts	0x0156, r1
    debug.input_num_digits=1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	80 93 5e 01 	sts	0x015E, r24
     4fe:	23 c0       	rjmp	.+70     	; 0x546 <debug_determine_digit_numbers+0x6e>
     500:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     502:	0b 2d       	mov	r16, r11
     504:	10 e0       	ldi	r17, 0x00	; 0
     506:	0e 5c       	subi	r16, 0xCE	; 206
     508:	1e 4f       	sbci	r17, 0xFE	; 254
     50a:	c7 01       	movw	r24, r14
     50c:	b6 01       	movw	r22, r12
     50e:	2a e0       	ldi	r18, 0x0A	; 10
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	0e 94 10 0a 	call	0x1420	; 0x1420 <__udivmodsi4>
     51a:	f8 01       	movw	r30, r16
     51c:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     51e:	c7 01       	movw	r24, r14
     520:	b6 01       	movw	r22, r12
     522:	2a e0       	ldi	r18, 0x0A	; 10
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	0e 94 10 0a 	call	0x1420	; 0x1420 <__udivmodsi4>
     52e:	c9 01       	movw	r24, r18
     530:	da 01       	movw	r26, r20
     532:	6c 01       	movw	r12, r24
     534:	7d 01       	movw	r14, r26
      i++;
     536:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     538:	c1 14       	cp	r12, r1
     53a:	d1 04       	cpc	r13, r1
     53c:	e1 04       	cpc	r14, r1
     53e:	f1 04       	cpc	r15, r1
     540:	01 f7       	brne	.-64     	; 0x502 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     542:	b0 92 5e 01 	sts	0x015E, r11
  }
}
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	bf 90       	pop	r11
     554:	08 95       	ret

00000556 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     556:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     558:	10 91 5e 01 	lds	r17, 0x015E
     55c:	09 c0       	rjmp	.+18     	; 0x570 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     55e:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     560:	e1 2f       	mov	r30, r17
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	ee 5c       	subi	r30, 0xCE	; 206
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     56a:	80 5d       	subi	r24, 0xD0	; 208
     56c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     570:	11 23       	and	r17, r17
     572:	a9 f7       	brne	.-22     	; 0x55e <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     574:	1f 91       	pop	r17
     576:	08 95       	ret

00000578 <debug_tx_number>:

void debug_tx_number(int32_t num){
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	7b 01       	movw	r14, r22
     582:	8c 01       	movw	r16, r24
  if(num<0){
     584:	97 ff       	sbrs	r25, 7
     586:	0b c0       	rjmp	.+22     	; 0x59e <debug_tx_number+0x26>
    debug_tx_byte('-');
     588:	8d e2       	ldi	r24, 0x2D	; 45
     58a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <debug_tx_byte>
	num=-num;
     58e:	10 95       	com	r17
     590:	00 95       	com	r16
     592:	f0 94       	com	r15
     594:	e0 94       	com	r14
     596:	e1 1c       	adc	r14, r1
     598:	f1 1c       	adc	r15, r1
     59a:	01 1d       	adc	r16, r1
     59c:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     59e:	c8 01       	movw	r24, r16
     5a0:	b7 01       	movw	r22, r14
     5a2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     5a6:	0e 94 ab 02 	call	0x556	; 0x556 <debug_tx_number_digits>
}
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	08 95       	ret

000005b4 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     5b4:	0e 94 bc 02 	call	0x578	; 0x578 <debug_tx_number>
  debug_tx_nl();
     5b8:	0e 94 3b 02 	call	0x476	; 0x476 <debug_tx_nl>
}
     5bc:	08 95       	ret

000005be <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     5be:	0e 94 bc 02 	call	0x578	; 0x578 <debug_tx_number>
  debug_tx_sp();
     5c2:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
}
     5c6:	08 95       	ret

000005c8 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     5c8:	0e 94 bc 02 	call	0x578	; 0x578 <debug_tx_number>
  debug_tx_text(",");
     5cc:	8c e1       	ldi	r24, 0x1C	; 28
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
}
     5d4:	08 95       	ret

000005d6 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     5d6:	0e 94 8b 01 	call	0x316	; 0x316 <debug_tx_hex>
  debug_tx_nl();
     5da:	0e 94 3b 02 	call	0x476	; 0x476 <debug_tx_nl>
}
     5de:	08 95       	ret

000005e0 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     5e0:	0e 94 8b 01 	call	0x316	; 0x316 <debug_tx_hex>
  debug_tx_sp();
     5e4:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
}
     5e8:	08 95       	ret

000005ea <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     5ea:	0e 94 8b 01 	call	0x316	; 0x316 <debug_tx_hex>
  debug_tx_text(",");
     5ee:	8c e1       	ldi	r24, 0x1C	; 28
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
}
     5f6:	08 95       	ret

000005f8 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     5f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <debug_tx_bin>
  debug_tx_nl();
     5fc:	0e 94 3b 02 	call	0x476	; 0x476 <debug_tx_nl>
}
     600:	08 95       	ret

00000602 <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     602:	0e 94 e5 01 	call	0x3ca	; 0x3ca <debug_tx_bin>
  debug_tx_sp();
     606:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
}
     60a:	08 95       	ret

0000060c <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     60c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <debug_tx_bin>
  debug_tx_text(",");
     610:	8c e1       	ldi	r24, 0x1C	; 28
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
}
     618:	08 95       	ret

0000061a <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	7a 01       	movw	r14, r20
     624:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     626:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     62a:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
  debug_tx_number_nl(num);
     62e:	c8 01       	movw	r24, r16
     630:	b7 01       	movw	r22, r14
     632:	0e 94 da 02 	call	0x5b4	; 0x5b4 <debug_tx_number_nl>
}
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	08 95       	ret

00000640 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	7a 01       	movw	r14, r20
     64a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     64c:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     650:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
  debug_tx_number_sp(num);
     654:	c8 01       	movw	r24, r16
     656:	b7 01       	movw	r22, r14
     658:	0e 94 df 02 	call	0x5be	; 0x5be <debug_tx_number_sp>
}
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	08 95       	ret

00000666 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	7a 01       	movw	r14, r20
     670:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     672:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     676:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
  debug_tx_number_cm(num);
     67a:	c8 01       	movw	r24, r16
     67c:	b7 01       	movw	r22, r14
     67e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <debug_tx_number_cm>
}
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	08 95       	ret

0000068c <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	7a 01       	movw	r14, r20
     696:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     698:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     69c:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     6a0:	c8 01       	movw	r24, r16
     6a2:	b7 01       	movw	r22, r14
     6a4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <debug_tx_number_hex_nl>
}
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	08 95       	ret

000006b2 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	7a 01       	movw	r14, r20
     6bc:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     6be:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     6c2:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     6c6:	c8 01       	movw	r24, r16
     6c8:	b7 01       	movw	r22, r14
     6ca:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_number_hex_sp>
}
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	08 95       	ret

000006d8 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	7a 01       	movw	r14, r20
     6e2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     6e4:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     6e8:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     6ec:	c8 01       	movw	r24, r16
     6ee:	b7 01       	movw	r22, r14
     6f0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <debug_tx_number_hex_cm>
}
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	7a 01       	movw	r14, r20
     708:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     70a:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     70e:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     712:	c8 01       	movw	r24, r16
     714:	b7 01       	movw	r22, r14
     716:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <debug_tx_number_bin_nl>
}
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	08 95       	ret

00000724 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	7a 01       	movw	r14, r20
     72e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     730:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     734:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     738:	c8 01       	movw	r24, r16
     73a:	b7 01       	movw	r22, r14
     73c:	0e 94 01 03 	call	0x602	; 0x602 <debug_tx_number_bin_sp>
}
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	08 95       	ret

0000074a <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	7a 01       	movw	r14, r20
     754:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     756:	0e 94 4a 02 	call	0x494	; 0x494 <debug_tx_text>
  debug_tx_sp();
     75a:	0e 94 42 02 	call	0x484	; 0x484 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     75e:	c8 01       	movw	r24, r16
     760:	b7 01       	movw	r22, r14
     762:	0e 94 06 03 	call	0x60c	; 0x60c <debug_tx_number_bin_cm>
}
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	08 95       	ret

00000770 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     770:	e2 e3       	ldi	r30, 0x32	; 50
     772:	f1 e0       	ldi	r31, 0x01	; 1
     774:	e8 0f       	add	r30, r24
     776:	f1 1d       	adc	r31, r1
     778:	83 81       	ldd	r24, Z+3	; 0x03
}
     77a:	08 95       	ret

0000077c <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     77c:	80 91 55 01 	lds	r24, 0x0155
}
     780:	08 95       	ret

00000782 <debug_flush_buf>:

void debug_flush_buf(void){
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     786:	fc 01       	movw	r30, r24
     788:	ee 5c       	subi	r30, 0xCE	; 206
     78a:	fe 4f       	sbci	r31, 0xFE	; 254
     78c:	13 82       	std	Z+3, r1	; 0x03
     78e:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     790:	80 32       	cpi	r24, 0x20	; 32
     792:	91 05       	cpc	r25, r1
     794:	c1 f7       	brne	.-16     	; 0x786 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     796:	10 92 55 01 	sts	0x0155, r1
}
     79a:	08 95       	ret

0000079c <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     79c:	80 91 34 01 	lds	r24, 0x0134
}
     7a0:	08 95       	ret

000007a2 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     7a2:	80 91 34 01 	lds	r24, 0x0134
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     7a6:	88 23       	and	r24, r24
     7a8:	11 f0       	breq	.+4      	; 0x7ae <debug_data_available_rx_buf+0xc>
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	08 c0       	rjmp	.+16     	; 0x7be <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     7ae:	80 91 55 01 	lds	r24, 0x0155
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	88 23       	and	r24, r24
     7b6:	09 f4       	brne	.+2      	; 0x7ba <debug_data_available_rx_buf+0x18>
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     7be:	89 2f       	mov	r24, r25
     7c0:	08 95       	ret

000007c2 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     7c2:	80 91 55 01 	lds	r24, 0x0155
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     7c6:	08 95       	ret

000007c8 <debug_init>:

void debug_init(void){
  debug_struct_init();
     7c8:	0e 94 81 00 	call	0x102	; 0x102 <debug_struct_init>
  debug_timings_init();
     7cc:	0e 94 9d 00 	call	0x13a	; 0x13a <debug_timings_init>
  debug_gpio_init();
     7d0:	0e 94 c2 00 	call	0x184	; 0x184 <debug_gpio_init>
}
     7d4:	08 95       	ret

000007d6 <__vector_4>:


ISR(ISR_PCINT_VECT){
     7d6:	1f 92       	push	r1
     7d8:	0f 92       	push	r0
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	0f 92       	push	r0
     7de:	11 24       	eor	r1, r1
     7e0:	2f 93       	push	r18
     7e2:	3f 93       	push	r19
     7e4:	4f 93       	push	r20
     7e6:	5f 93       	push	r21
     7e8:	6f 93       	push	r22
     7ea:	7f 93       	push	r23
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	af 93       	push	r26
     7f2:	bf 93       	push	r27
     7f4:	ef 93       	push	r30
     7f6:	ff 93       	push	r31
  debug.databsy=1;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 34 01 	sts	0x0134, r24
  uint8_t val=debug_rx_byte();
     7fe:	0e 94 56 01 	call	0x2ac	; 0x2ac <debug_rx_byte>
     802:	98 2f       	mov	r25, r24
  if(debug.error==0){
     804:	80 91 32 01 	lds	r24, 0x0132
     808:	88 23       	and	r24, r24
     80a:	99 f4       	brne	.+38     	; 0x832 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     80c:	e0 91 55 01 	lds	r30, 0x0155
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	ee 5c       	subi	r30, 0xCE	; 206
     814:	fe 4f       	sbci	r31, 0xFE	; 254
     816:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     818:	80 91 55 01 	lds	r24, 0x0155
     81c:	8f 5f       	subi	r24, 0xFF	; 255
     81e:	80 93 55 01 	sts	0x0155, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     822:	80 91 55 01 	lds	r24, 0x0155
     826:	81 32       	cpi	r24, 0x21	; 33
     828:	10 f0       	brcs	.+4      	; 0x82e <__vector_4+0x58>
	  debug.bufindex=0;
     82a:	10 92 55 01 	sts	0x0155, r1
	}
    debug_timer_start();
     82e:	0e 94 b0 00 	call	0x160	; 0x160 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     832:	ff 91       	pop	r31
     834:	ef 91       	pop	r30
     836:	bf 91       	pop	r27
     838:	af 91       	pop	r26
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	7f 91       	pop	r23
     840:	6f 91       	pop	r22
     842:	5f 91       	pop	r21
     844:	4f 91       	pop	r20
     846:	3f 91       	pop	r19
     848:	2f 91       	pop	r18
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <__vector_16>:

ISR(TIMER_OVF_VECT){
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     85e:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     862:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     864:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     866:	10 92 34 01 	sts	0x0134, r1
}
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	1f 90       	pop	r1
     872:	18 95       	reti

00000874 <CapTouch_Struct_Init>:
#ifdef CAPTOUCH_ENABLE_LPF
iir_lpf_t  IIR_LPF[CAPTOUCH_TOTAL_TOUCH_KEY*3];
#endif
  
void CapTouch_Struct_Init(void){
  CapTouch.Channel=0;
     874:	10 92 5f 01 	sts	0x015F, r1
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY;i++){
    CapTouch.Result[i]=0;
     878:	10 92 60 01 	sts	0x0160, r1
    CapTouch.CalibrationValue[i]=0;
     87c:	10 92 63 01 	sts	0x0163, r1
     880:	10 92 62 01 	sts	0x0162, r1
    CapTouch.RawADC1[i]=0;
     884:	10 92 67 01 	sts	0x0167, r1
     888:	10 92 66 01 	sts	0x0166, r1
    CapTouch.RawADC2[i]=0;
     88c:	10 92 6b 01 	sts	0x016B, r1
     890:	10 92 6a 01 	sts	0x016A, r1
    CapTouch.RawDiffADC[i]=0;
     894:	10 92 6f 01 	sts	0x016F, r1
     898:	10 92 6e 01 	sts	0x016E, r1
    CapTouch.DiffThreshold[i]=CAPTOUCH_THRESHOLD;
     89c:	8e e1       	ldi	r24, 0x1E	; 30
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	90 93 73 01 	sts	0x0173, r25
     8a4:	80 93 72 01 	sts	0x0172, r24
    CapTouch.TriggerMethod[i]=0;
     8a8:	10 92 76 01 	sts	0x0176, r1
    CapTouch.LastTouchState[i]=0;
     8ac:	10 92 78 01 	sts	0x0178, r1
    CapTouch.TouchDuration[i]=0;
     8b0:	10 92 7a 01 	sts	0x017A, r1
     8b4:	10 92 7b 01 	sts	0x017B, r1
     8b8:	10 92 7c 01 	sts	0x017C, r1
     8bc:	10 92 7d 01 	sts	0x017D, r1
    CapTouch.TouchDurationTemp[i]=0;
     8c0:	10 92 82 01 	sts	0x0182, r1
     8c4:	10 92 83 01 	sts	0x0183, r1
     8c8:	10 92 84 01 	sts	0x0184, r1
     8cc:	10 92 85 01 	sts	0x0185, r1
    CapTouch.MinShortPressTime=CAPTOUCH_SHORT_PRESS_TIME_MIN;
    CapTouch.MaxShortPressTime=CAPTOUCH_SHORT_PRESS_TIME_MAX;
    CapTouch.LongPressTime=CAPTOUCH_LONG_PRESS_TIME;
    CapTouch.LongPressFlag[i]=0;
     8d0:	10 92 90 01 	sts	0x0190, r1
    CapTouch.UsingReferenceTimer=0;
    CapTouch.ErrorCode[i]=0;
     8d4:	10 92 93 01 	sts	0x0193, r1
#endif
  
void CapTouch_Struct_Init(void){
  CapTouch.Channel=0;
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY;i++){
    CapTouch.Result[i]=0;
     8d8:	10 92 61 01 	sts	0x0161, r1
    CapTouch.CalibrationValue[i]=0;
     8dc:	10 92 65 01 	sts	0x0165, r1
     8e0:	10 92 64 01 	sts	0x0164, r1
    CapTouch.RawADC1[i]=0;
     8e4:	10 92 69 01 	sts	0x0169, r1
     8e8:	10 92 68 01 	sts	0x0168, r1
    CapTouch.RawADC2[i]=0;
     8ec:	10 92 6d 01 	sts	0x016D, r1
     8f0:	10 92 6c 01 	sts	0x016C, r1
    CapTouch.RawDiffADC[i]=0;
     8f4:	10 92 71 01 	sts	0x0171, r1
     8f8:	10 92 70 01 	sts	0x0170, r1
    CapTouch.DiffThreshold[i]=CAPTOUCH_THRESHOLD;
     8fc:	90 93 75 01 	sts	0x0175, r25
     900:	80 93 74 01 	sts	0x0174, r24
    CapTouch.TriggerMethod[i]=0;
     904:	10 92 77 01 	sts	0x0177, r1
    CapTouch.LastTouchState[i]=0;
     908:	10 92 79 01 	sts	0x0179, r1
    CapTouch.TouchDuration[i]=0;
     90c:	10 92 7e 01 	sts	0x017E, r1
     910:	10 92 7f 01 	sts	0x017F, r1
     914:	10 92 80 01 	sts	0x0180, r1
     918:	10 92 81 01 	sts	0x0181, r1
    CapTouch.TouchDurationTemp[i]=0;
     91c:	10 92 86 01 	sts	0x0186, r1
     920:	10 92 87 01 	sts	0x0187, r1
     924:	10 92 88 01 	sts	0x0188, r1
     928:	10 92 89 01 	sts	0x0189, r1
    CapTouch.MinShortPressTime=CAPTOUCH_SHORT_PRESS_TIME_MIN;
    CapTouch.MaxShortPressTime=CAPTOUCH_SHORT_PRESS_TIME_MAX;
    CapTouch.LongPressTime=CAPTOUCH_LONG_PRESS_TIME;
    CapTouch.LongPressFlag[i]=0;
     92c:	10 92 91 01 	sts	0x0191, r1
    CapTouch.UsingReferenceTimer=0;
    CapTouch.ErrorCode[i]=0;
     930:	10 92 94 01 	sts	0x0194, r1
     934:	10 92 92 01 	sts	0x0192, r1
     938:	84 e6       	ldi	r24, 0x64	; 100
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	90 93 8f 01 	sts	0x018F, r25
     940:	80 93 8e 01 	sts	0x018E, r24
     944:	82 e3       	ldi	r24, 0x32	; 50
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	90 93 8d 01 	sts	0x018D, r25
     94c:	80 93 8c 01 	sts	0x018C, r24
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 8b 01 	sts	0x018B, r25
     958:	80 93 8a 01 	sts	0x018A, r24
  }
}
     95c:	08 95       	ret

0000095e <CapTouch_IIR_LPF_Struct_Init>:

#ifdef CAPTOUCH_ENABLE_LPF
void CapTouch_IIR_LPF_Struct_Init(void){
     95e:	e5 e9       	ldi	r30, 0x95	; 149
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t start=2;
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY*3;i++){
    IIR_LPF[i].Alpha=CAPTOUCH_ENABLE_LPF;
     966:	22 e3       	ldi	r18, 0x32	; 50
     968:	20 83       	st	Z, r18
	IIR_LPF[i].Input=0;
     96a:	11 82       	std	Z+1, r1	; 0x01
     96c:	12 82       	std	Z+2, r1	; 0x02
     96e:	13 82       	std	Z+3, r1	; 0x03
     970:	14 82       	std	Z+4, r1	; 0x04
	IIR_LPF[i].Output=0;
     972:	15 82       	std	Z+5, r1	; 0x05
     974:	16 82       	std	Z+6, r1	; 0x06
     976:	17 82       	std	Z+7, r1	; 0x07
     978:	10 86       	std	Z+8, r1	; 0x08
    if(i == start){
     97a:	89 17       	cp	r24, r25
     97c:	11 f4       	brne	.+4      	; 0x982 <CapTouch_IIR_LPF_Struct_Init+0x24>
      IIR_LPF[i].Alpha = CAPTOUCH_OUTPUT_LPF;
     97e:	98 2f       	mov	r25, r24
     980:	9d 5f       	subi	r25, 0xFD	; 253
}

#ifdef CAPTOUCH_ENABLE_LPF
void CapTouch_IIR_LPF_Struct_Init(void){
  uint8_t start=2;
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY*3;i++){
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	39 96       	adiw	r30, 0x09	; 9
     986:	86 30       	cpi	r24, 0x06	; 6
     988:	79 f7       	brne	.-34     	; 0x968 <CapTouch_IIR_LPF_Struct_Init+0xa>
    if(i == start){
      IIR_LPF[i].Alpha = CAPTOUCH_OUTPUT_LPF;
      start+=3;
    }
  }
}
     98a:	08 95       	ret

0000098c <CapTouch_IIR_LPF_Set_Alpha>:

void CapTouch_IIR_LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  IIR_LPF[lpf_index].Alpha = val;
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	fc 01       	movw	r30, r24
     990:	23 e0       	ldi	r18, 0x03	; 3
     992:	ee 0f       	add	r30, r30
     994:	ff 1f       	adc	r31, r31
     996:	2a 95       	dec	r18
     998:	e1 f7       	brne	.-8      	; 0x992 <CapTouch_IIR_LPF_Set_Alpha+0x6>
     99a:	e8 0f       	add	r30, r24
     99c:	f9 1f       	adc	r31, r25
     99e:	eb 56       	subi	r30, 0x6B	; 107
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	60 83       	st	Z, r22
}
     9a4:	08 95       	ret

000009a6 <CapTouch_IIR_LPF_Get_Alpha>:

uint8_t CapTouch_IIR_LPF_Get_Alpha(uint8_t lpf_index){
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	fc 01       	movw	r30, r24
     9aa:	33 e0       	ldi	r19, 0x03	; 3
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	3a 95       	dec	r19
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <CapTouch_IIR_LPF_Get_Alpha+0x6>
     9b4:	e8 0f       	add	r30, r24
     9b6:	f9 1f       	adc	r31, r25
     9b8:	eb 56       	subi	r30, 0x6B	; 107
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
  return IIR_LPF[lpf_index].Alpha;
}
     9bc:	80 81       	ld	r24, Z
     9be:	08 95       	ret

000009c0 <CapTouch_IIR_LPF_Get_Filtered_Value>:

int32_t CapTouch_IIR_LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     9c0:	6f 92       	push	r6
     9c2:	7f 92       	push	r7
     9c4:	8f 92       	push	r8
     9c6:	9f 92       	push	r9
     9c8:	af 92       	push	r10
     9ca:	bf 92       	push	r11
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	5a 01       	movw	r10, r20
     9da:	6b 01       	movw	r12, r22
void CapTouch_IIR_LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  IIR_LPF[lpf_index].Alpha = val;
}

uint8_t CapTouch_IIR_LPF_Get_Alpha(uint8_t lpf_index){
  return IIR_LPF[lpf_index].Alpha;
     9dc:	90 e0       	ldi	r25, 0x00	; 0
}

int32_t CapTouch_IIR_LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=CapTouch_IIR_LPF_Get_Alpha(lpf_index);
     9de:	4c 01       	movw	r8, r24
     9e0:	73 e0       	ldi	r23, 0x03	; 3
     9e2:	88 0c       	add	r8, r8
     9e4:	99 1c       	adc	r9, r9
     9e6:	7a 95       	dec	r23
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <CapTouch_IIR_LPF_Get_Filtered_Value+0x22>
     9ea:	88 0e       	add	r8, r24
     9ec:	99 1e       	adc	r9, r25
     9ee:	85 e9       	ldi	r24, 0x95	; 149
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	88 0e       	add	r8, r24
     9f4:	99 1e       	adc	r9, r25
     9f6:	f4 01       	movw	r30, r8
     9f8:	20 81       	ld	r18, Z
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	50 e0       	ldi	r21, 0x00	; 0
  tmp1*=val;
  int32_t tmp2=100;
  tmp2-=CapTouch_IIR_LPF_Get_Alpha(lpf_index);
     a00:	64 e6       	ldi	r22, 0x64	; 100
     a02:	e6 2e       	mov	r14, r22
     a04:	f1 2c       	mov	r15, r1
     a06:	01 2d       	mov	r16, r1
     a08:	11 2d       	mov	r17, r1
     a0a:	e2 1a       	sub	r14, r18
     a0c:	f3 0a       	sbc	r15, r19
     a0e:	04 0b       	sbc	r16, r20
     a10:	15 0b       	sbc	r17, r21
  tmp2*=IIR_LPF[lpf_index].Output ;
  IIR_LPF[lpf_index].Output = tmp1 + tmp2;
  IIR_LPF[lpf_index].Output/=100;
     a12:	c6 01       	movw	r24, r12
     a14:	b5 01       	movw	r22, r10
     a16:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsi3>
     a1a:	5b 01       	movw	r10, r22
     a1c:	6c 01       	movw	r12, r24
     a1e:	45 e0       	ldi	r20, 0x05	; 5
     a20:	64 2e       	mov	r6, r20
     a22:	71 2c       	mov	r7, r1
     a24:	68 0c       	add	r6, r8
     a26:	79 1c       	adc	r7, r9
     a28:	f4 01       	movw	r30, r8
     a2a:	25 81       	ldd	r18, Z+5	; 0x05
     a2c:	36 81       	ldd	r19, Z+6	; 0x06
     a2e:	47 81       	ldd	r20, Z+7	; 0x07
     a30:	50 85       	ldd	r21, Z+8	; 0x08
     a32:	c8 01       	movw	r24, r16
     a34:	b7 01       	movw	r22, r14
     a36:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsi3>
     a3a:	a6 0e       	add	r10, r22
     a3c:	b7 1e       	adc	r11, r23
     a3e:	c8 1e       	adc	r12, r24
     a40:	d9 1e       	adc	r13, r25
     a42:	c6 01       	movw	r24, r12
     a44:	b5 01       	movw	r22, r10
     a46:	24 e6       	ldi	r18, 0x64	; 100
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divmodsi4>
     a52:	ca 01       	movw	r24, r20
     a54:	f4 01       	movw	r30, r8
     a56:	25 83       	std	Z+5, r18	; 0x05
     a58:	f3 01       	movw	r30, r6
     a5a:	31 83       	std	Z+1, r19	; 0x01
     a5c:	42 83       	std	Z+2, r20	; 0x02
     a5e:	93 83       	std	Z+3, r25	; 0x03
  return IIR_LPF[lpf_index].Output;
}
     a60:	b9 01       	movw	r22, r18
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	cf 90       	pop	r12
     a6e:	bf 90       	pop	r11
     a70:	af 90       	pop	r10
     a72:	9f 90       	pop	r9
     a74:	8f 90       	pop	r8
     a76:	7f 90       	pop	r7
     a78:	6f 90       	pop	r6
     a7a:	08 95       	ret

00000a7c <CapTouch_Set_Key_Pin_Input>:
#endif

void CapTouch_Set_Key_Pin_Input(uint8_t current_channel){
  CAPTOUCH_ADC_DDR &=~(1<<current_channel);
     a7c:	97 b1       	in	r25, 0x07	; 7
     a7e:	21 e0       	ldi	r18, 0x01	; 1
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <CapTouch_Set_Key_Pin_Input+0xc>
     a84:	22 0f       	add	r18, r18
     a86:	33 1f       	adc	r19, r19
     a88:	8a 95       	dec	r24
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <CapTouch_Set_Key_Pin_Input+0x8>
     a8c:	20 95       	com	r18
     a8e:	29 23       	and	r18, r25
     a90:	27 b9       	out	0x07, r18	; 7
}
     a92:	08 95       	ret

00000a94 <CapTouch_Set_Key_Pin_Analog>:

void CapTouch_Set_Key_Pin_Analog(uint8_t current_channel){
  CAPTOUCH_ADC_DDR &=~(1<<current_channel);
     a94:	97 b1       	in	r25, 0x07	; 7
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <CapTouch_Set_Key_Pin_Analog+0xc>
     a9c:	22 0f       	add	r18, r18
     a9e:	33 1f       	adc	r19, r19
     aa0:	8a 95       	dec	r24
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <CapTouch_Set_Key_Pin_Analog+0x8>
     aa4:	20 95       	com	r18
     aa6:	92 23       	and	r25, r18
     aa8:	97 b9       	out	0x07, r25	; 7
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
     aaa:	88 b1       	in	r24, 0x08	; 8
     aac:	28 23       	and	r18, r24
     aae:	28 b9       	out	0x08, r18	; 8
}
     ab0:	08 95       	ret

00000ab2 <CapTouch_Set_Key_Pin_Output>:

void CapTouch_Set_Key_Pin_Output(uint8_t current_channel){
  CAPTOUCH_ADC_DDR |= (1<<current_channel);
     ab2:	97 b1       	in	r25, 0x07	; 7
     ab4:	21 e0       	ldi	r18, 0x01	; 1
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <CapTouch_Set_Key_Pin_Output+0xc>
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	8a 95       	dec	r24
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <CapTouch_Set_Key_Pin_Output+0x8>
     ac2:	92 2b       	or	r25, r18
     ac4:	97 b9       	out	0x07, r25	; 7
}
     ac6:	08 95       	ret

00000ac8 <CapTouch_Set_Key_Pin_Output_Low>:

void CapTouch_Set_Key_Pin_Output_Low(uint8_t current_channel){
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
     ac8:	98 b1       	in	r25, 0x08	; 8
     aca:	21 e0       	ldi	r18, 0x01	; 1
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <CapTouch_Set_Key_Pin_Output_Low+0xc>
     ad0:	22 0f       	add	r18, r18
     ad2:	33 1f       	adc	r19, r19
     ad4:	8a 95       	dec	r24
     ad6:	e2 f7       	brpl	.-8      	; 0xad0 <CapTouch_Set_Key_Pin_Output_Low+0x8>
     ad8:	20 95       	com	r18
     ada:	29 23       	and	r18, r25
     adc:	28 b9       	out	0x08, r18	; 8
}
     ade:	08 95       	ret

00000ae0 <CapTouch_Set_Key_Pin_Output_High>:

void CapTouch_Set_Key_Pin_Output_High(uint8_t current_channel){
  CAPTOUCH_ADC_PORT|=(1<<current_channel);
     ae0:	98 b1       	in	r25, 0x08	; 8
     ae2:	21 e0       	ldi	r18, 0x01	; 1
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <CapTouch_Set_Key_Pin_Output_High+0xc>
     ae8:	22 0f       	add	r18, r18
     aea:	33 1f       	adc	r19, r19
     aec:	8a 95       	dec	r24
     aee:	e2 f7       	brpl	.-8      	; 0xae8 <CapTouch_Set_Key_Pin_Output_High+0x8>
     af0:	92 2b       	or	r25, r18
     af2:	98 b9       	out	0x08, r25	; 8
}
     af4:	08 95       	ret

00000af6 <CapTouch_ADC_Register_Config>:

void CapTouch_ADC_Register_Config(void){
  ADMUX =0x40;
     af6:	80 e4       	ldi	r24, 0x40	; 64
     af8:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA=0x87;
     afc:	87 e8       	ldi	r24, 0x87	; 135
     afe:	80 93 7a 00 	sts	0x007A, r24
}
     b02:	08 95       	ret

00000b04 <CapTouch_ADC_Wakeup>:

void CapTouch_ADC_Wakeup(void){
  ADCSRA|=(1<<ADEN);
     b04:	ea e7       	ldi	r30, 0x7A	; 122
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	80 68       	ori	r24, 0x80	; 128
     b0c:	80 83       	st	Z, r24
}
     b0e:	08 95       	ret

00000b10 <CapTouch_ADC_Sleep>:

void CapTouch_ADC_Sleep(void){
  ADCSRA&=~(1<<ADEN);
     b10:	ea e7       	ldi	r30, 0x7A	; 122
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8f 77       	andi	r24, 0x7F	; 127
     b18:	80 83       	st	Z, r24
}
     b1a:	08 95       	ret

00000b1c <CapTouch_ADC_Sample>:

uint16_t CapTouch_ADC_Sample(uint8_t channel){
  ADMUX=0x40|channel;
     b1c:	80 64       	ori	r24, 0x40	; 64
     b1e:	80 93 7c 00 	sts	0x007C, r24
  if(ADCSRA!=0x87){
     b22:	80 91 7a 00 	lds	r24, 0x007A
     b26:	87 38       	cpi	r24, 0x87	; 135
     b28:	19 f0       	breq	.+6      	; 0xb30 <CapTouch_ADC_Sample+0x14>
    ADCSRA=0x87;
     b2a:	87 e8       	ldi	r24, 0x87	; 135
     b2c:	80 93 7a 00 	sts	0x007A, r24
  }
  ADCSRA|=(1<<ADSC);
     b30:	80 91 7a 00 	lds	r24, 0x007A
     b34:	80 64       	ori	r24, 0x40	; 64
     b36:	80 93 7a 00 	sts	0x007A, r24
  while(!(ADCSRA & (1<<ADIF)));
     b3a:	80 91 7a 00 	lds	r24, 0x007A
     b3e:	84 ff       	sbrs	r24, 4
     b40:	fc cf       	rjmp	.-8      	; 0xb3a <CapTouch_ADC_Sample+0x1e>
  ADCSRA|=(1<<ADIF);
     b42:	80 91 7a 00 	lds	r24, 0x007A
     b46:	80 61       	ori	r24, 0x10	; 16
     b48:	80 93 7a 00 	sts	0x007A, r24
  return ADCW;
     b4c:	20 91 78 00 	lds	r18, 0x0078
     b50:	30 91 79 00 	lds	r19, 0x0079
}
     b54:	c9 01       	movw	r24, r18
     b56:	08 95       	ret

00000b58 <CapTouch_Precharge_SH_Cap>:
  CAPTOUCH_ADC_DDR &=~(1<<current_channel);
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
}

void CapTouch_Set_Key_Pin_Output(uint8_t current_channel){
  CAPTOUCH_ADC_DDR |= (1<<current_channel);
     b58:	27 b1       	in	r18, 0x07	; 7
     b5a:	e0 e3       	ldi	r30, 0x30	; 48
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
     b5e:	e8 0f       	add	r30, r24
     b60:	f1 1d       	adc	r31, r1
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	00 80       	ld	r0, Z
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <CapTouch_Precharge_SH_Cap+0x16>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <CapTouch_Precharge_SH_Cap+0x12>
     b72:	28 2b       	or	r18, r24
     b74:	27 b9       	out	0x07, r18	; 7
}

void CapTouch_Set_Key_Pin_Output_Low(uint8_t current_channel){
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
     b76:	28 b1       	in	r18, 0x08	; 8
     b78:	80 95       	com	r24
     b7a:	82 23       	and	r24, r18
     b7c:	88 b9       	out	0x08, r24	; 8

void CapTouch_Precharge_SH_Cap(uint8_t current_channel){
  CapTouch_Set_Key_Pin_Output(CapTouch_Pins[current_channel]);
  CapTouch_Set_Key_Pin_Output_Low(CapTouch_Pins[current_channel]);
  for(uint8_t i=0;i<CAPTOUCH_PRECHARGE_SMPL;i++){
    CapTouch_ADC_Sample(CAPTOUCH_INT_VREF_ADC_CHANNEL);
     b7e:	86 e0       	ldi	r24, 0x06	; 6
     b80:	0e 94 8e 05 	call	0xb1c	; 0xb1c <CapTouch_ADC_Sample>
  }
}
     b84:	08 95       	ret

00000b86 <CapTouch_ADC_Sample1>:

void CapTouch_ADC_Sample1(uint8_t current_channel){
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
  CapTouch_Set_Key_Pin_Analog(CapTouch_Pins[current_channel]);
     b96:	e8 2e       	mov	r14, r24
     b98:	ff 24       	eor	r15, r15
     b9a:	f0 e3       	ldi	r31, 0x30	; 48
     b9c:	cf 2e       	mov	r12, r31
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	df 2e       	mov	r13, r31
     ba2:	ce 0c       	add	r12, r14
     ba4:	df 1c       	adc	r13, r15
     ba6:	f6 01       	movw	r30, r12
     ba8:	80 81       	ld	r24, Z
     baa:	0e 94 4a 05 	call	0xa94	; 0xa94 <CapTouch_Set_Key_Pin_Analog>
  CapTouch.RawADC1[current_channel]=0;
     bae:	57 01       	movw	r10, r14
     bb0:	aa 0c       	add	r10, r10
     bb2:	bb 1c       	adc	r11, r11
     bb4:	85 01       	movw	r16, r10
     bb6:	01 5a       	subi	r16, 0xA1	; 161
     bb8:	1e 4f       	sbci	r17, 0xFE	; 254
     bba:	f8 01       	movw	r30, r16
     bbc:	10 86       	std	Z+8, r1	; 0x08
     bbe:	17 82       	std	Z+7, r1	; 0x07
  for(uint8_t i=0;i<CAPTOUCH_SAMPLE1_SMPL;i++){
    CapTouch.RawADC1[current_channel]+=CapTouch_ADC_Sample(CapTouch_Pins[current_channel]);
     bc0:	f6 01       	movw	r30, r12
     bc2:	80 81       	ld	r24, Z
     bc4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <CapTouch_ADC_Sample>
     bc8:	ac 01       	movw	r20, r24
     bca:	f8 01       	movw	r30, r16
     bcc:	90 87       	std	Z+8, r25	; 0x08
     bce:	87 83       	std	Z+7, r24	; 0x07
  }
  #ifdef CAPTOUCH_ENABLE_LPF
	CapTouch.RawADC1[current_channel] = CapTouch_IIR_LPF_Get_Filtered_Value((current_channel*3) ,CapTouch.RawADC1[current_channel]);
     bd0:	66 27       	eor	r22, r22
     bd2:	57 fd       	sbrc	r21, 7
     bd4:	60 95       	com	r22
     bd6:	76 2f       	mov	r23, r22
     bd8:	8a 2d       	mov	r24, r10
     bda:	8e 0d       	add	r24, r14
     bdc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <CapTouch_IIR_LPF_Get_Filtered_Value>
     be0:	f8 01       	movw	r30, r16
     be2:	70 87       	std	Z+8, r23	; 0x08
     be4:	67 83       	std	Z+7, r22	; 0x07
  #endif
}
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	df 90       	pop	r13
     bf0:	cf 90       	pop	r12
     bf2:	bf 90       	pop	r11
     bf4:	af 90       	pop	r10
     bf6:	08 95       	ret

00000bf8 <CapTouch_Precharge_Button>:
  CAPTOUCH_ADC_DDR &=~(1<<current_channel);
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
}

void CapTouch_Set_Key_Pin_Output(uint8_t current_channel){
  CAPTOUCH_ADC_DDR |= (1<<current_channel);
     bf8:	27 b1       	in	r18, 0x07	; 7
     bfa:	e0 e3       	ldi	r30, 0x30	; 48
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	e8 0f       	add	r30, r24
     c00:	f1 1d       	adc	r31, r1
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	00 80       	ld	r0, Z
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <CapTouch_Precharge_Button+0x16>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	0a 94       	dec	r0
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <CapTouch_Precharge_Button+0x12>
     c12:	28 2b       	or	r18, r24
     c14:	27 b9       	out	0x07, r18	; 7
void CapTouch_Set_Key_Pin_Output_Low(uint8_t current_channel){
  CAPTOUCH_ADC_PORT&=~(1<<current_channel);
}

void CapTouch_Set_Key_Pin_Output_High(uint8_t current_channel){
  CAPTOUCH_ADC_PORT|=(1<<current_channel);
     c16:	28 b1       	in	r18, 0x08	; 8
     c18:	82 2b       	or	r24, r18
     c1a:	88 b9       	out	0x08, r24	; 8

void CapTouch_Precharge_Button(uint8_t current_channel){
  CapTouch_Set_Key_Pin_Output(CapTouch_Pins[current_channel]);
  CapTouch_Set_Key_Pin_Output_High(CapTouch_Pins[current_channel]);
  for(uint8_t i=0;i<CAPTOUCH_DISCHARGE_SMPL;i++){
    CapTouch_ADC_Sample(CAPTOUCH_INT_GND_ADC_CHANNEL);
     c1c:	8f e0       	ldi	r24, 0x0F	; 15
     c1e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <CapTouch_ADC_Sample>
  }
}
     c22:	08 95       	ret

00000c24 <CapTouch_ADC_Sample2>:

void CapTouch_ADC_Sample2(uint8_t current_channel){
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
  CapTouch_Set_Key_Pin_Analog(CapTouch_Pins[current_channel]);
     c34:	e8 2e       	mov	r14, r24
     c36:	ff 24       	eor	r15, r15
     c38:	10 e3       	ldi	r17, 0x30	; 48
     c3a:	a1 2e       	mov	r10, r17
     c3c:	11 e0       	ldi	r17, 0x01	; 1
     c3e:	b1 2e       	mov	r11, r17
     c40:	ae 0c       	add	r10, r14
     c42:	bf 1c       	adc	r11, r15
     c44:	f5 01       	movw	r30, r10
     c46:	80 81       	ld	r24, Z
     c48:	0e 94 4a 05 	call	0xa94	; 0xa94 <CapTouch_Set_Key_Pin_Analog>
  CapTouch.RawADC2[current_channel]=0;
     c4c:	87 01       	movw	r16, r14
     c4e:	00 0f       	add	r16, r16
     c50:	11 1f       	adc	r17, r17
     c52:	af e5       	ldi	r26, 0x5F	; 95
     c54:	ca 2e       	mov	r12, r26
     c56:	a1 e0       	ldi	r26, 0x01	; 1
     c58:	da 2e       	mov	r13, r26
     c5a:	c0 0e       	add	r12, r16
     c5c:	d1 1e       	adc	r13, r17
     c5e:	f6 01       	movw	r30, r12
     c60:	14 86       	std	Z+12, r1	; 0x0c
     c62:	13 86       	std	Z+11, r1	; 0x0b
  for(uint8_t i=0;i<CAPTOUCH_SAMPLE2_SMPL;i++){
    CapTouch.RawADC2[current_channel]+=CapTouch_ADC_Sample(CapTouch_Pins[current_channel]);
     c64:	f5 01       	movw	r30, r10
     c66:	80 81       	ld	r24, Z
     c68:	0e 94 8e 05 	call	0xb1c	; 0xb1c <CapTouch_ADC_Sample>
     c6c:	ac 01       	movw	r20, r24
     c6e:	f6 01       	movw	r30, r12
     c70:	94 87       	std	Z+12, r25	; 0x0c
     c72:	83 87       	std	Z+11, r24	; 0x0b
  }
  #ifdef CAPTOUCH_ENABLE_LPF
	CapTouch.RawADC2[current_channel] = CapTouch_IIR_LPF_Get_Filtered_Value((current_channel*3)+1 ,CapTouch.RawADC2[current_channel]);
     c74:	0e 0d       	add	r16, r14
     c76:	1f 1d       	adc	r17, r15
     c78:	66 27       	eor	r22, r22
     c7a:	57 fd       	sbrc	r21, 7
     c7c:	60 95       	com	r22
     c7e:	76 2f       	mov	r23, r22
     c80:	80 2f       	mov	r24, r16
     c82:	8f 5f       	subi	r24, 0xFF	; 255
     c84:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <CapTouch_IIR_LPF_Get_Filtered_Value>
     c88:	f6 01       	movw	r30, r12
     c8a:	74 87       	std	Z+12, r23	; 0x0c
     c8c:	63 87       	std	Z+11, r22	; 0x0b
  #endif
}
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	bf 90       	pop	r11
     c9c:	af 90       	pop	r10
     c9e:	08 95       	ret

00000ca0 <CapTouch_Read_Delta>:

void CapTouch_Read_Delta(uint8_t current_channel){
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	08 2f       	mov	r16, r24
  CapTouch_Precharge_SH_Cap(current_channel);
     caa:	0e 94 ac 05 	call	0xb58	; 0xb58 <CapTouch_Precharge_SH_Cap>
  CapTouch_ADC_Sample1(current_channel);
     cae:	80 2f       	mov	r24, r16
     cb0:	0e 94 c3 05 	call	0xb86	; 0xb86 <CapTouch_ADC_Sample1>
  CapTouch_Precharge_Button(current_channel);
     cb4:	80 2f       	mov	r24, r16
     cb6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <CapTouch_Precharge_Button>
  CapTouch_ADC_Sample2(current_channel);
     cba:	80 2f       	mov	r24, r16
     cbc:	0e 94 12 06 	call	0xc24	; 0xc24 <CapTouch_ADC_Sample2>
  int delta=CapTouch.RawADC1[current_channel];
     cc0:	10 e0       	ldi	r17, 0x00	; 0
     cc2:	c8 01       	movw	r24, r16
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	2f e5       	ldi	r18, 0x5F	; 95
     cca:	e2 2e       	mov	r14, r18
     ccc:	21 e0       	ldi	r18, 0x01	; 1
     cce:	f2 2e       	mov	r15, r18
     cd0:	e8 0e       	add	r14, r24
     cd2:	f9 1e       	adc	r15, r25
     cd4:	f7 01       	movw	r30, r14
     cd6:	47 81       	ldd	r20, Z+7	; 0x07
     cd8:	50 85       	ldd	r21, Z+8	; 0x08
  delta-=CapTouch.RawADC2[current_channel];
     cda:	23 85       	ldd	r18, Z+11	; 0x0b
     cdc:	34 85       	ldd	r19, Z+12	; 0x0c
     cde:	42 1b       	sub	r20, r18
     ce0:	53 0b       	sbc	r21, r19
  CapTouch.RawDiffADC[current_channel]=delta;
     ce2:	50 8b       	std	Z+16, r21	; 0x10
     ce4:	47 87       	std	Z+15, r20	; 0x0f
  #ifdef CAPTOUCH_ENABLE_LPF
    CapTouch.RawDiffADC[current_channel] = CapTouch_IIR_LPF_Get_Filtered_Value((current_channel*3)+2, delta);
     ce6:	80 0f       	add	r24, r16
     ce8:	91 1f       	adc	r25, r17
     cea:	66 27       	eor	r22, r22
     cec:	57 fd       	sbrc	r21, 7
     cee:	60 95       	com	r22
     cf0:	76 2f       	mov	r23, r22
     cf2:	8e 5f       	subi	r24, 0xFE	; 254
     cf4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <CapTouch_IIR_LPF_Get_Filtered_Value>
     cf8:	f7 01       	movw	r30, r14
     cfa:	70 8b       	std	Z+16, r23	; 0x10
     cfc:	67 87       	std	Z+15, r22	; 0x0f
  #endif
}
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	08 95       	ret

00000d08 <CapTouch_Calibration>:


void CapTouch_Calibration(void){
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	28 97       	sbiw	r28, 0x08	; 8
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
  int32_t sum[CAPTOUCH_TOTAL_TOUCH_KEY];
  for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
	sum[key]=0;
     d28:	19 82       	std	Y+1, r1	; 0x01
     d2a:	1a 82       	std	Y+2, r1	; 0x02
     d2c:	1b 82       	std	Y+3, r1	; 0x03
     d2e:	1c 82       	std	Y+4, r1	; 0x04
     d30:	1d 82       	std	Y+5, r1	; 0x05
     d32:	1e 82       	std	Y+6, r1	; 0x06
     d34:	1f 82       	std	Y+7, r1	; 0x07
     d36:	18 86       	std	Y+8, r1	; 0x08
     d38:	cc 24       	eor	r12, r12
     d3a:	dd 24       	eor	r13, r13
  }

  for(int i=0;i<CAPTOUCH_CALIBRATION_SAMPLES;i++){
    for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
      CapTouch_Read_Delta(key);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 50 06 	call	0xca0	; 0xca0 <CapTouch_Read_Delta>
      sum[key]+=CapTouch.RawDiffADC[key];
     d42:	80 91 6e 01 	lds	r24, 0x016E
     d46:	90 91 6f 01 	lds	r25, 0x016F
     d4a:	aa 27       	eor	r26, r26
     d4c:	97 fd       	sbrc	r25, 7
     d4e:	a0 95       	com	r26
     d50:	ba 2f       	mov	r27, r26
     d52:	29 81       	ldd	r18, Y+1	; 0x01
     d54:	3a 81       	ldd	r19, Y+2	; 0x02
     d56:	4b 81       	ldd	r20, Y+3	; 0x03
     d58:	5c 81       	ldd	r21, Y+4	; 0x04
     d5a:	28 0f       	add	r18, r24
     d5c:	39 1f       	adc	r19, r25
     d5e:	4a 1f       	adc	r20, r26
     d60:	5b 1f       	adc	r21, r27
     d62:	29 83       	std	Y+1, r18	; 0x01
     d64:	3a 83       	std	Y+2, r19	; 0x02
     d66:	4b 83       	std	Y+3, r20	; 0x03
     d68:	5c 83       	std	Y+4, r21	; 0x04
	sum[key]=0;
  }

  for(int i=0;i<CAPTOUCH_CALIBRATION_SAMPLES;i++){
    for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
      CapTouch_Read_Delta(key);
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	0e 94 50 06 	call	0xca0	; 0xca0 <CapTouch_Read_Delta>
      sum[key]+=CapTouch.RawDiffADC[key];
     d70:	80 91 70 01 	lds	r24, 0x0170
     d74:	90 91 71 01 	lds	r25, 0x0171
     d78:	aa 27       	eor	r26, r26
     d7a:	97 fd       	sbrc	r25, 7
     d7c:	a0 95       	com	r26
     d7e:	ba 2f       	mov	r27, r26
     d80:	ed 80       	ldd	r14, Y+5	; 0x05
     d82:	fe 80       	ldd	r15, Y+6	; 0x06
     d84:	0f 81       	ldd	r16, Y+7	; 0x07
     d86:	18 85       	ldd	r17, Y+8	; 0x08
     d88:	e8 0e       	add	r14, r24
     d8a:	f9 1e       	adc	r15, r25
     d8c:	0a 1f       	adc	r16, r26
     d8e:	1b 1f       	adc	r17, r27
     d90:	ed 82       	std	Y+5, r14	; 0x05
     d92:	fe 82       	std	Y+6, r15	; 0x06
     d94:	0f 83       	std	Y+7, r16	; 0x07
     d96:	18 87       	std	Y+8, r17	; 0x08
  int32_t sum[CAPTOUCH_TOTAL_TOUCH_KEY];
  for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
	sum[key]=0;
  }

  for(int i=0;i<CAPTOUCH_CALIBRATION_SAMPLES;i++){
     d98:	08 94       	sec
     d9a:	c1 1c       	adc	r12, r1
     d9c:	d1 1c       	adc	r13, r1
     d9e:	80 e2       	ldi	r24, 0x20	; 32
     da0:	c8 16       	cp	r12, r24
     da2:	d1 04       	cpc	r13, r1
     da4:	59 f6       	brne	.-106    	; 0xd3c <CapTouch_Calibration+0x34>
      sum[key]+=CapTouch.RawDiffADC[key];
	}
  }
  
  for(uint8_t key=0;key<CAPTOUCH_TOTAL_TOUCH_KEY;key++){
	sum[key]/=CAPTOUCH_CALIBRATION_SAMPLES;
     da6:	69 81       	ldd	r22, Y+1	; 0x01
     da8:	7a 81       	ldd	r23, Y+2	; 0x02
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	20 e2       	ldi	r18, 0x20	; 32
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divmodsi4>
     dba:	c9 01       	movw	r24, r18
    CapTouch.CalibrationValue[key]=sum[key]-CapTouch.DiffThreshold[key];
     dbc:	20 91 72 01 	lds	r18, 0x0172
     dc0:	30 91 73 01 	lds	r19, 0x0173
     dc4:	82 1b       	sub	r24, r18
     dc6:	93 0b       	sbc	r25, r19
     dc8:	90 93 63 01 	sts	0x0163, r25
     dcc:	80 93 62 01 	sts	0x0162, r24
     dd0:	c8 01       	movw	r24, r16
     dd2:	b7 01       	movw	r22, r14
     dd4:	20 e2       	ldi	r18, 0x20	; 32
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divmodsi4>
     de0:	80 91 74 01 	lds	r24, 0x0174
     de4:	90 91 75 01 	lds	r25, 0x0175
     de8:	28 1b       	sub	r18, r24
     dea:	39 0b       	sbc	r19, r25
     dec:	30 93 65 01 	sts	0x0165, r19
     df0:	20 93 64 01 	sts	0x0164, r18
  }
}
     df4:	28 96       	adiw	r28, 0x08	; 8
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	08 95       	ret

00000e12 <CapTouch_Response>:


void CapTouch_Response(uint8_t current_channel){
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	08 2f       	mov	r16, r24
  CapTouch_Read_Delta(current_channel);
     e18:	0e 94 50 06 	call	0xca0	; 0xca0 <CapTouch_Read_Delta>
  if(CapTouch.CalibrationValue[current_channel] > CapTouch.RawDiffADC[current_channel]){
     e1c:	10 e0       	ldi	r17, 0x00	; 0
     e1e:	f8 01       	movw	r30, r16
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	e1 5a       	subi	r30, 0xA1	; 161
     e26:	fe 4f       	sbci	r31, 0xFE	; 254
     e28:	23 81       	ldd	r18, Z+3	; 0x03
     e2a:	34 81       	ldd	r19, Z+4	; 0x04
     e2c:	87 85       	ldd	r24, Z+15	; 0x0f
     e2e:	90 89       	ldd	r25, Z+16	; 0x10
     e30:	f8 01       	movw	r30, r16
     e32:	e1 5a       	subi	r30, 0xA1	; 161
     e34:	fe 4f       	sbci	r31, 0xFE	; 254
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	1c f4       	brge	.+6      	; 0xe42 <CapTouch_Response+0x30>
    CapTouch.Result[current_channel]=1;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	81 83       	std	Z+1, r24	; 0x01
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <CapTouch_Response+0x32>
  }else{
    CapTouch.Result[current_channel]=0;
     e42:	11 82       	std	Z+1, r1	; 0x01
  }
}
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret

00000e4a <CapTouch_Check_Trigger>:

void CapTouch_Check_Trigger(uint8_t current_channel){
     e4a:	1f 93       	push	r17
     e4c:	18 2f       	mov	r17, r24
  uint8_t current_state=0;
  CapTouch_Response(current_channel);
     e4e:	0e 94 09 07 	call	0xe12	; 0xe12 <CapTouch_Response>
  current_state=CapTouch.Result[current_channel];
     e52:	a1 2f       	mov	r26, r17
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	fd 01       	movw	r30, r26
     e58:	e1 5a       	subi	r30, 0xA1	; 161
     e5a:	fe 4f       	sbci	r31, 0xFE	; 254
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
  if((CapTouch.LastTouchState[current_channel]==0) && (current_state==1)){
     e5e:	81 8d       	ldd	r24, Z+25	; 0x19
     e60:	88 23       	and	r24, r24
     e62:	29 f4       	brne	.+10     	; 0xe6e <CapTouch_Check_Trigger+0x24>
     e64:	91 30       	cpi	r25, 0x01	; 1
     e66:	71 f4       	brne	.+28     	; 0xe84 <CapTouch_Check_Trigger+0x3a>
    CapTouch.LongPressFlag[current_channel]=0;     //Rising Edge
     e68:	11 aa       	std	Z+49, r1	; 0x31
    CapTouch.TriggerMethod[current_channel]=0x01;
     e6a:	97 8b       	std	Z+23, r25	; 0x17
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <CapTouch_Check_Trigger+0x42>
  }else if((CapTouch.LastTouchState[current_channel]==1) && (current_state==0)){
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	49 f4       	brne	.+18     	; 0xe84 <CapTouch_Check_Trigger+0x3a>
     e72:	99 23       	and	r25, r25
     e74:	11 f4       	brne	.+4      	; 0xe7a <CapTouch_Check_Trigger+0x30>
    CapTouch.TriggerMethod[current_channel]=0x04;  //Falling Edge
     e76:	84 e0       	ldi	r24, 0x04	; 4
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <CapTouch_Check_Trigger+0x36>
  }else if((CapTouch.LastTouchState[current_channel]==1) && (current_state==1)){
     e7a:	91 30       	cpi	r25, 0x01	; 1
     e7c:	19 f4       	brne	.+6      	; 0xe84 <CapTouch_Check_Trigger+0x3a>
    CapTouch.TriggerMethod[current_channel]=0x02;  //Constant Touched
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	87 8b       	std	Z+23, r24	; 0x17
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <CapTouch_Check_Trigger+0x42>
  }else{
    CapTouch.TriggerMethod[current_channel]=0x00;  //No Touch Event Occured
     e84:	fd 01       	movw	r30, r26
     e86:	e1 5a       	subi	r30, 0xA1	; 161
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	17 8a       	std	Z+23, r1	; 0x17
  }
  CapTouch.LastTouchState[current_channel]=current_state;
     e8c:	a1 5a       	subi	r26, 0xA1	; 161
     e8e:	be 4f       	sbci	r27, 0xFE	; 254
     e90:	59 96       	adiw	r26, 0x19	; 25
     e92:	9c 93       	st	X, r25
}
     e94:	1f 91       	pop	r17
     e96:	08 95       	ret

00000e98 <CapTouch_Check_Touch_Duration>:


void CapTouch_Check_Touch_Duration(uint8_t current_channel, uint32_t refernce_time){
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	18 2f       	mov	r17, r24
     ea6:	04 2f       	mov	r16, r20
     ea8:	f5 2e       	mov	r15, r21
     eaa:	e6 2e       	mov	r14, r22
     eac:	d7 2e       	mov	r13, r23
  int32_t duration=0;
  CapTouch_Check_Trigger(current_channel);
     eae:	0e 94 25 07 	call	0xe4a	; 0xe4a <CapTouch_Check_Trigger>
  if(CapTouch.TriggerMethod[current_channel] == 0x01){
     eb2:	61 2f       	mov	r22, r17
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	fb 01       	movw	r30, r22
     eb8:	e1 5a       	subi	r30, 0xA1	; 161
     eba:	fe 4f       	sbci	r31, 0xFE	; 254
     ebc:	17 89       	ldd	r17, Z+23	; 0x17
     ebe:	11 30       	cpi	r17, 0x01	; 1
     ec0:	01 f5       	brne	.+64     	; 0xf02 <CapTouch_Check_Touch_Duration+0x6a>
    CapTouch.UsingReferenceTimer|=(1<<current_channel);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	06 2e       	mov	r0, r22
     ec8:	02 c0       	rjmp	.+4      	; 0xece <CapTouch_Check_Touch_Duration+0x36>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <CapTouch_Check_Touch_Duration+0x32>
     ed2:	20 91 92 01 	lds	r18, 0x0192
     ed6:	28 2b       	or	r18, r24
     ed8:	20 93 92 01 	sts	0x0192, r18
    CapTouch.TouchDurationTemp[current_channel]=refernce_time;
     edc:	fb 01       	movw	r30, r22
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	ee 0f       	add	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	e1 5a       	subi	r30, 0xA1	; 161
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	df 01       	movw	r26, r30
     eec:	93 96       	adiw	r26, 0x23	; 35
     eee:	03 a3       	std	Z+35, r16	; 0x23
     ef0:	11 96       	adiw	r26, 0x01	; 1
     ef2:	fc 92       	st	X, r15
     ef4:	11 97       	sbiw	r26, 0x01	; 1
     ef6:	12 96       	adiw	r26, 0x02	; 2
     ef8:	ec 92       	st	X, r14
     efa:	12 97       	sbiw	r26, 0x02	; 2
     efc:	13 96       	adiw	r26, 0x03	; 3
     efe:	dc 92       	st	X, r13
     f00:	49 c0       	rjmp	.+146    	; 0xf94 <CapTouch_Check_Touch_Duration+0xfc>
  }else if( (CapTouch.TriggerMethod[current_channel] == 0x04) || (CapTouch.TriggerMethod[current_channel] == 0x02) ){
     f02:	14 30       	cpi	r17, 0x04	; 4
     f04:	11 f0       	breq	.+4      	; 0xf0a <CapTouch_Check_Touch_Duration+0x72>
     f06:	12 30       	cpi	r17, 0x02	; 2
     f08:	b1 f5       	brne	.+108    	; 0xf76 <CapTouch_Check_Touch_Duration+0xde>
    duration = refernce_time;
     f0a:	20 2f       	mov	r18, r16
     f0c:	3f 2d       	mov	r19, r15
     f0e:	4e 2d       	mov	r20, r14
     f10:	5d 2d       	mov	r21, r13
    duration-=CapTouch.TouchDurationTemp[current_channel];
     f12:	fb 01       	movw	r30, r22
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	e1 5a       	subi	r30, 0xA1	; 161
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	83 a1       	ldd	r24, Z+35	; 0x23
     f22:	94 a1       	ldd	r25, Z+36	; 0x24
     f24:	a5 a1       	ldd	r26, Z+37	; 0x25
     f26:	b6 a1       	ldd	r27, Z+38	; 0x26
     f28:	69 01       	movw	r12, r18
     f2a:	7a 01       	movw	r14, r20
     f2c:	c8 1a       	sub	r12, r24
     f2e:	d9 0a       	sbc	r13, r25
     f30:	ea 0a       	sbc	r14, r26
     f32:	fb 0a       	sbc	r15, r27
    if(duration>=0){
     f34:	f7 fc       	sbrc	r15, 7
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <CapTouch_Check_Touch_Duration+0xa8>
      CapTouch.TouchDuration[current_channel]=duration;
     f38:	c3 8e       	std	Z+27, r12	; 0x1b
     f3a:	d4 8e       	std	Z+28, r13	; 0x1c
     f3c:	e5 8e       	std	Z+29, r14	; 0x1d
     f3e:	f6 8e       	std	Z+30, r15	; 0x1e
    }
    if(CapTouch.TriggerMethod[current_channel]==0x04){
     f40:	14 30       	cpi	r17, 0x04	; 4
     f42:	41 f5       	brne	.+80     	; 0xf94 <CapTouch_Check_Touch_Duration+0xfc>
      CapTouch.TouchDurationTemp[current_channel]=refernce_time;
     f44:	fb 01       	movw	r30, r22
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	e1 5a       	subi	r30, 0xA1	; 161
     f50:	fe 4f       	sbci	r31, 0xFE	; 254
     f52:	23 a3       	std	Z+35, r18	; 0x23
     f54:	34 a3       	std	Z+36, r19	; 0x24
     f56:	45 a3       	std	Z+37, r20	; 0x25
     f58:	56 a3       	std	Z+38, r21	; 0x26
      CapTouch.UsingReferenceTimer&=~(1<<current_channel);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <CapTouch_Check_Touch_Duration+0xcc>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	6a 95       	dec	r22
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <CapTouch_Check_Touch_Duration+0xc8>
     f68:	80 95       	com	r24
     f6a:	20 91 92 01 	lds	r18, 0x0192
     f6e:	82 23       	and	r24, r18
     f70:	80 93 92 01 	sts	0x0192, r24
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <CapTouch_Check_Touch_Duration+0xfc>
    }
  }
  else{
    CapTouch.TouchDuration[current_channel]=0;
     f76:	fb 01       	movw	r30, r22
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	e1 5a       	subi	r30, 0xA1	; 161
     f82:	fe 4f       	sbci	r31, 0xFE	; 254
     f84:	13 8e       	std	Z+27, r1	; 0x1b
     f86:	14 8e       	std	Z+28, r1	; 0x1c
     f88:	15 8e       	std	Z+29, r1	; 0x1d
     f8a:	16 8e       	std	Z+30, r1	; 0x1e
    CapTouch.TouchDurationTemp[current_channel]=0;
     f8c:	13 a2       	std	Z+35, r1	; 0x23
     f8e:	14 a2       	std	Z+36, r1	; 0x24
     f90:	15 a2       	std	Z+37, r1	; 0x25
     f92:	16 a2       	std	Z+38, r1	; 0x26
  }
}
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	08 95       	ret

00000fa2 <CapTouch_Scan_Sensors>:


void CapTouch_Scan_Sensors(uint32_t refernce_time){
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	6b 01       	movw	r12, r22
     fb0:	7c 01       	movw	r14, r24
  ADMUX =0x40;
  ADCSRA=0x87;
}

void CapTouch_ADC_Wakeup(void){
  ADCSRA|=(1<<ADEN);
     fb2:	0a e7       	ldi	r16, 0x7A	; 122
     fb4:	10 e0       	ldi	r17, 0x00	; 0
     fb6:	f8 01       	movw	r30, r16
     fb8:	80 81       	ld	r24, Z
     fba:	80 68       	ori	r24, 0x80	; 128
     fbc:	80 83       	st	Z, r24


void CapTouch_Scan_Sensors(uint32_t refernce_time){
  #ifdef CAPTOUCH_AUTO_PWR_DOWN
    CapTouch_ADC_Wakeup();
	CapTouch_ADC_Sample(0);
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <CapTouch_ADC_Sample>
  #endif
  for(uint8_t channel=0;channel<CAPTOUCH_TOTAL_TOUCH_KEY;channel++){
    for(uint8_t i=0; i<CAPTOUCH_CHECK_DUR_SMPL;i++){
      CapTouch_Check_Touch_Duration(channel, refernce_time);
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	b7 01       	movw	r22, r14
     fc8:	a6 01       	movw	r20, r12
     fca:	0e 94 4c 07 	call	0xe98	; 0xe98 <CapTouch_Check_Touch_Duration>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	b7 01       	movw	r22, r14
     fd2:	a6 01       	movw	r20, r12
     fd4:	0e 94 4c 07 	call	0xe98	; 0xe98 <CapTouch_Check_Touch_Duration>
void CapTouch_ADC_Wakeup(void){
  ADCSRA|=(1<<ADEN);
}

void CapTouch_ADC_Sleep(void){
  ADCSRA&=~(1<<ADEN);
     fd8:	f8 01       	movw	r30, r16
     fda:	80 81       	ld	r24, Z
     fdc:	8f 77       	andi	r24, 0x7F	; 127
     fde:	80 83       	st	Z, r24
    }
  }
  #ifdef CAPTOUCH_AUTO_PWR_DOWN
    CapTouch_ADC_Sleep();
  #endif
}
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	cf 90       	pop	r12
     fec:	08 95       	ret

00000fee <CapTouch_Short_Pressed>:

uint8_t CapTouch_Short_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if(CapTouch.TriggerMethod[current_channel]==0x04){
     fee:	a8 2f       	mov	r26, r24
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	fd 01       	movw	r30, r26
     ff4:	e1 5a       	subi	r30, 0xA1	; 161
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	87 89       	ldd	r24, Z+23	; 0x17
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	29 f5       	brne	.+74     	; 0x1048 <CapTouch_Short_Pressed+0x5a>
    if((CapTouch.TouchDuration[current_channel]>=CapTouch.MinShortPressTime) && (CapTouch.TouchDuration[current_channel]<=CapTouch.MaxShortPressTime)){
     ffe:	aa 0f       	add	r26, r26
    1000:	bb 1f       	adc	r27, r27
    1002:	aa 0f       	add	r26, r26
    1004:	bb 1f       	adc	r27, r27
    1006:	a1 5a       	subi	r26, 0xA1	; 161
    1008:	be 4f       	sbci	r27, 0xFE	; 254
    100a:	5b 96       	adiw	r26, 0x1b	; 27
    100c:	2d 91       	ld	r18, X+
    100e:	3d 91       	ld	r19, X+
    1010:	4d 91       	ld	r20, X+
    1012:	5c 91       	ld	r21, X
    1014:	5e 97       	sbiw	r26, 0x1e	; 30
    1016:	80 91 8a 01 	lds	r24, 0x018A
    101a:	90 91 8b 01 	lds	r25, 0x018B
    101e:	a0 e0       	ldi	r26, 0x00	; 0
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	28 17       	cp	r18, r24
    1024:	39 07       	cpc	r19, r25
    1026:	4a 07       	cpc	r20, r26
    1028:	5b 07       	cpc	r21, r27
    102a:	74 f0       	brlt	.+28     	; 0x1048 <CapTouch_Short_Pressed+0x5a>
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	80 91 8c 01 	lds	r24, 0x018C
    1032:	90 91 8d 01 	lds	r25, 0x018D
    1036:	a0 e0       	ldi	r26, 0x00	; 0
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	82 17       	cp	r24, r18
    103c:	93 07       	cpc	r25, r19
    103e:	a4 07       	cpc	r26, r20
    1040:	b5 07       	cpc	r27, r21
    1042:	1c f0       	brlt	.+6      	; 0x104a <CapTouch_Short_Pressed+0x5c>
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	01 c0       	rjmp	.+2      	; 0x104a <CapTouch_Short_Pressed+0x5c>
    1048:	60 e0       	ldi	r22, 0x00	; 0
      sts=1;
    }
  }
  return sts;
}
    104a:	86 2f       	mov	r24, r22
    104c:	08 95       	ret

0000104e <CapTouch_Long_Pressed>:

uint8_t CapTouch_Long_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if((CapTouch.TouchDuration[current_channel]>CapTouch.LongPressTime) && (CapTouch.LongPressFlag[current_channel]==0)){
    104e:	68 2f       	mov	r22, r24
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	fb 01       	movw	r30, r22
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	e1 5a       	subi	r30, 0xA1	; 161
    105e:	fe 4f       	sbci	r31, 0xFE	; 254
    1060:	80 91 8e 01 	lds	r24, 0x018E
    1064:	90 91 8f 01 	lds	r25, 0x018F
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	23 8d       	ldd	r18, Z+27	; 0x1b
    106e:	34 8d       	ldd	r19, Z+28	; 0x1c
    1070:	45 8d       	ldd	r20, Z+29	; 0x1d
    1072:	56 8d       	ldd	r21, Z+30	; 0x1e
    1074:	82 17       	cp	r24, r18
    1076:	93 07       	cpc	r25, r19
    1078:	a4 07       	cpc	r26, r20
    107a:	b5 07       	cpc	r27, r21
    107c:	4c f4       	brge	.+18     	; 0x1090 <CapTouch_Long_Pressed+0x42>
    107e:	fb 01       	movw	r30, r22
    1080:	e1 5a       	subi	r30, 0xA1	; 161
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	81 a9       	ldd	r24, Z+49	; 0x31
    1086:	88 23       	and	r24, r24
    1088:	19 f4       	brne	.+6      	; 0x1090 <CapTouch_Long_Pressed+0x42>
    CapTouch.LongPressFlag[current_channel]=1;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	81 ab       	std	Z+49, r24	; 0x31
    108e:	08 95       	ret
    1090:	80 e0       	ldi	r24, 0x00	; 0
    sts=1;
  }
  return sts;
}
    1092:	08 95       	ret

00001094 <CapTouch_Constant_Pressed>:

uint8_t CapTouch_Constant_Pressed(uint8_t current_channel){
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
  uint8_t sts=0;
  if((CapTouch.TriggerMethod[current_channel]==0x02) && (CapTouch.TouchDuration[current_channel]>CapTouch.MinShortPressTime)){
    1098:	c8 2f       	mov	r28, r24
    109a:	d0 e0       	ldi	r29, 0x00	; 0
    109c:	fe 01       	movw	r30, r28
    109e:	e1 5a       	subi	r30, 0xA1	; 161
    10a0:	fe 4f       	sbci	r31, 0xFE	; 254
    10a2:	87 89       	ldd	r24, Z+23	; 0x17
    10a4:	82 30       	cpi	r24, 0x02	; 2
    10a6:	11 f0       	breq	.+4      	; 0x10ac <CapTouch_Constant_Pressed+0x18>
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	17 c0       	rjmp	.+46     	; 0x10da <CapTouch_Constant_Pressed+0x46>
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	cc 0f       	add	r28, r28
    10b0:	dd 1f       	adc	r29, r29
    10b2:	cc 0f       	add	r28, r28
    10b4:	dd 1f       	adc	r29, r29
    10b6:	c1 5a       	subi	r28, 0xA1	; 161
    10b8:	de 4f       	sbci	r29, 0xFE	; 254
    10ba:	80 91 8a 01 	lds	r24, 0x018A
    10be:	90 91 8b 01 	lds	r25, 0x018B
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    10c8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    10ca:	4d 8d       	ldd	r20, Y+29	; 0x1d
    10cc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    10ce:	82 17       	cp	r24, r18
    10d0:	93 07       	cpc	r25, r19
    10d2:	a4 07       	cpc	r26, r20
    10d4:	b5 07       	cpc	r27, r21
    10d6:	0c f4       	brge	.+2      	; 0x10da <CapTouch_Constant_Pressed+0x46>
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    sts=1;
  }
  return sts;
}
    10da:	86 2f       	mov	r24, r22
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <CapTouch_Short_Pressed_Filtered>:



uint8_t CapTouch_Short_Pressed_Filtered(uint8_t current_channel){
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	78 2f       	mov	r23, r24
    10e8:	ea e7       	ldi	r30, 0x7A	; 122
    10ea:	f1 e0       	ldi	r31, 0x01	; 1
    10ec:	61 e0       	ldi	r22, 0x01	; 1
  uint8_t  sts=0, res=1;
  for(uint8_t i=0;i<current_channel;i++){
    10ee:	c8 2f       	mov	r28, r24
    10f0:	d0 e0       	ldi	r29, 0x00	; 0
    10f2:	9e 01       	movw	r18, r28
    10f4:	22 0f       	add	r18, r18
    10f6:	33 1f       	adc	r19, r19
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	a9 01       	movw	r20, r18
    10fe:	4e 0f       	add	r20, r30
    1100:	5f 1f       	adc	r21, r31
    1102:	0a c0       	rjmp	.+20     	; 0x1118 <CapTouch_Short_Pressed_Filtered+0x36>
    if(CapTouch_Get_Touch_Duration(i)!=0){
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	a2 81       	ldd	r26, Z+2	; 0x02
    110a:	b3 81       	ldd	r27, Z+3	; 0x03
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	a1 05       	cpc	r26, r1
    1110:	b1 05       	cpc	r27, r1
    1112:	09 f0       	breq	.+2      	; 0x1116 <CapTouch_Short_Pressed_Filtered+0x34>
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	34 96       	adiw	r30, 0x04	; 4



uint8_t CapTouch_Short_Pressed_Filtered(uint8_t current_channel){
  uint8_t  sts=0, res=1;
  for(uint8_t i=0;i<current_channel;i++){
    1118:	e4 17       	cp	r30, r20
    111a:	f5 07       	cpc	r31, r21
    111c:	99 f7       	brne	.-26     	; 0x1104 <CapTouch_Short_Pressed_Filtered+0x22>
    if(CapTouch_Get_Touch_Duration(i)!=0){
	  res=0;
	}
  }
  
  if( (res == 1) && CapTouch_Short_Pressed(current_channel) ){
    111e:	61 30       	cpi	r22, 0x01	; 1
    1120:	d9 f5       	brne	.+118    	; 0x1198 <CapTouch_Short_Pressed_Filtered+0xb6>
  #endif
}

uint8_t CapTouch_Short_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if(CapTouch.TriggerMethod[current_channel]==0x04){
    1122:	c1 5a       	subi	r28, 0xA1	; 161
    1124:	de 4f       	sbci	r29, 0xFE	; 254
    1126:	8f 89       	ldd	r24, Y+23	; 0x17
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	b1 f5       	brne	.+108    	; 0x1198 <CapTouch_Short_Pressed_Filtered+0xb6>
    if((CapTouch.TouchDuration[current_channel]>=CapTouch.MinShortPressTime) && (CapTouch.TouchDuration[current_channel]<=CapTouch.MaxShortPressTime)){
    112c:	21 5a       	subi	r18, 0xA1	; 161
    112e:	3e 4f       	sbci	r19, 0xFE	; 254
    1130:	f9 01       	movw	r30, r18
    1132:	23 8d       	ldd	r18, Z+27	; 0x1b
    1134:	34 8d       	ldd	r19, Z+28	; 0x1c
    1136:	45 8d       	ldd	r20, Z+29	; 0x1d
    1138:	56 8d       	ldd	r21, Z+30	; 0x1e
    113a:	80 91 8a 01 	lds	r24, 0x018A
    113e:	90 91 8b 01 	lds	r25, 0x018B
    1142:	a0 e0       	ldi	r26, 0x00	; 0
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	28 17       	cp	r18, r24
    1148:	39 07       	cpc	r19, r25
    114a:	4a 07       	cpc	r20, r26
    114c:	5b 07       	cpc	r21, r27
    114e:	24 f1       	brlt	.+72     	; 0x1198 <CapTouch_Short_Pressed_Filtered+0xb6>
    1150:	80 91 8c 01 	lds	r24, 0x018C
    1154:	90 91 8d 01 	lds	r25, 0x018D
    1158:	a0 e0       	ldi	r26, 0x00	; 0
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	82 17       	cp	r24, r18
    115e:	93 07       	cpc	r25, r19
    1160:	a4 07       	cpc	r26, r20
    1162:	b5 07       	cpc	r27, r21
    1164:	cc f0       	brlt	.+50     	; 0x1198 <CapTouch_Short_Pressed_Filtered+0xb6>
  }else{
    res=0;
  }
  
  if(res == 1){
    for(uint8_t i=current_channel+1;i<CAPTOUCH_TOTAL_TOUCH_KEY;i++){
    1166:	27 2f       	mov	r18, r23
    1168:	2f 5f       	subi	r18, 0xFF	; 255
    116a:	31 e0       	ldi	r19, 0x01	; 1
    116c:	12 c0       	rjmp	.+36     	; 0x1192 <CapTouch_Short_Pressed_Filtered+0xb0>
      if(CapTouch_Get_Touch_Duration(i)!=0){
    116e:	e2 2f       	mov	r30, r18
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	ee 0f       	add	r30, r30
    1174:	ff 1f       	adc	r31, r31
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	e1 5a       	subi	r30, 0xA1	; 161
    117c:	fe 4f       	sbci	r31, 0xFE	; 254
    117e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1180:	94 8d       	ldd	r25, Z+28	; 0x1c
    1182:	a5 8d       	ldd	r26, Z+29	; 0x1d
    1184:	b6 8d       	ldd	r27, Z+30	; 0x1e
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	a1 05       	cpc	r26, r1
    118a:	b1 05       	cpc	r27, r1
    118c:	09 f0       	breq	.+2      	; 0x1190 <CapTouch_Short_Pressed_Filtered+0xae>
    118e:	30 e0       	ldi	r19, 0x00	; 0
  }else{
    res=0;
  }
  
  if(res == 1){
    for(uint8_t i=current_channel+1;i<CAPTOUCH_TOTAL_TOUCH_KEY;i++){
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	60 f3       	brcs	.-40     	; 0x116e <CapTouch_Short_Pressed_Filtered+0x8c>
    1196:	01 c0       	rjmp	.+2      	; 0x119a <CapTouch_Short_Pressed_Filtered+0xb8>
    1198:	30 e0       	ldi	r19, 0x00	; 0
	  }
	}
  }
  
  return sts;
}
    119a:	83 2f       	mov	r24, r19
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <CapTouch_Long_Pressed_Filtered>:

uint8_t CapTouch_Long_Pressed_Filtered(void){
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
  return sts;
}

uint8_t CapTouch_Long_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if((CapTouch.TouchDuration[current_channel]>CapTouch.LongPressTime) && (CapTouch.LongPressFlag[current_channel]==0)){
    11b2:	60 91 8e 01 	lds	r22, 0x018E
    11b6:	70 91 8f 01 	lds	r23, 0x018F
    11ba:	9b 01       	movw	r18, r22
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	80 91 7a 01 	lds	r24, 0x017A
    11c4:	90 91 7b 01 	lds	r25, 0x017B
    11c8:	a0 91 7c 01 	lds	r26, 0x017C
    11cc:	b0 91 7d 01 	lds	r27, 0x017D
    11d0:	28 17       	cp	r18, r24
    11d2:	39 07       	cpc	r19, r25
    11d4:	4a 07       	cpc	r20, r26
    11d6:	5b 07       	cpc	r21, r27
    11d8:	54 f4       	brge	.+20     	; 0x11ee <CapTouch_Long_Pressed_Filtered+0x4c>
    11da:	80 91 90 01 	lds	r24, 0x0190
    11de:	88 23       	and	r24, r24
    11e0:	31 f4       	brne	.+12     	; 0x11ee <CapTouch_Long_Pressed_Filtered+0x4c>
    CapTouch.LongPressFlag[current_channel]=1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 93 90 01 	sts	0x0190, r24
    11e8:	11 e0       	ldi	r17, 0x01	; 1
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <CapTouch_Long_Pressed_Filtered+0x50>
    11ee:	10 e0       	ldi	r17, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
  return sts;
}

uint8_t CapTouch_Long_Pressed(uint8_t current_channel){
  uint8_t sts=0;
  if((CapTouch.TouchDuration[current_channel]>CapTouch.LongPressTime) && (CapTouch.LongPressFlag[current_channel]==0)){
    11f2:	c0 90 7e 01 	lds	r12, 0x017E
    11f6:	d0 90 7f 01 	lds	r13, 0x017F
    11fa:	e0 90 80 01 	lds	r14, 0x0180
    11fe:	f0 90 81 01 	lds	r15, 0x0181
    1202:	2c 15       	cp	r18, r12
    1204:	3d 05       	cpc	r19, r13
    1206:	4e 05       	cpc	r20, r14
    1208:	5f 05       	cpc	r21, r15
    120a:	54 f4       	brge	.+20     	; 0x1220 <CapTouch_Long_Pressed_Filtered+0x7e>
    120c:	80 91 91 01 	lds	r24, 0x0191
    1210:	88 23       	and	r24, r24
    1212:	31 f4       	brne	.+12     	; 0x1220 <CapTouch_Long_Pressed_Filtered+0x7e>
    CapTouch.LongPressFlag[current_channel]=1;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	80 93 91 01 	sts	0x0191, r24
uint8_t CapTouch_Long_Pressed_Filtered(void){
  uint8_t  sts=0, lt_chnl=0, res=0;
  for(uint8_t i=0;i<CAPTOUCH_TOTAL_TOUCH_KEY; i++){
    if(CapTouch_Long_Pressed(i)){
	  lt_chnl=i;
	  sts |= (1<<i);
    121a:	12 60       	ori	r17, 0x02	; 2
    121c:	01 e0       	ldi	r16, 0x01	; 1
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <CapTouch_Long_Pressed_Filtered+0x84>
    1220:	00 e0       	ldi	r16, 0x00	; 0
	  res=1;
    }
  }
  if(res==1){
    1222:	91 30       	cpi	r25, 0x01	; 1
    1224:	89 f5       	brne	.+98     	; 0x1288 <CapTouch_Long_Pressed_Filtered+0xe6>
    for(uint8_t i=0; i<lt_chnl; i++){
      if(CapTouch_Get_Touch_Duration(i)>=(CapTouch.LongPressTime/2)){
    1226:	76 95       	lsr	r23
    1228:	67 95       	ror	r22
    122a:	ab 01       	movw	r20, r22
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	ca e7       	ldi	r28, 0x7A	; 122
    1232:	d1 e0       	ldi	r29, 0x01	; 1
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	1a c0       	rjmp	.+52     	; 0x126e <CapTouch_Long_Pressed_Filtered+0xcc>
    123a:	f9 01       	movw	r30, r18
int CapTouch_Get_Calibration_Value(uint8_t current_channel){
  return CapTouch.CalibrationValue[current_channel];
}

int32_t CapTouch_Get_Touch_Duration(uint8_t current_channel){
  return CapTouch.TouchDuration[current_channel];
    123c:	89 91       	ld	r24, Y+
    123e:	99 91       	ld	r25, Y+
    1240:	a9 91       	ld	r26, Y+
    1242:	b9 91       	ld	r27, Y+
    1244:	2f 5f       	subi	r18, 0xFF	; 255
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
	  res=1;
    }
  }
  if(res==1){
    for(uint8_t i=0; i<lt_chnl; i++){
      if(CapTouch_Get_Touch_Duration(i)>=(CapTouch.LongPressTime/2)){
    1248:	84 17       	cp	r24, r20
    124a:	95 07       	cpc	r25, r21
    124c:	a6 07       	cpc	r26, r22
    124e:	b7 07       	cpc	r27, r23
    1250:	74 f0       	brlt	.+28     	; 0x126e <CapTouch_Long_Pressed_Filtered+0xcc>
	    sts |= (1<<i);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 2e       	mov	r0, r30
    1258:	02 c0       	rjmp	.+4      	; 0x125e <CapTouch_Long_Pressed_Filtered+0xbc>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <CapTouch_Long_Pressed_Filtered+0xb8>
    1262:	18 2b       	or	r17, r24
		CapTouch.LongPressFlag[i]=1;
    1264:	e1 5a       	subi	r30, 0xA1	; 161
    1266:	fe 4f       	sbci	r31, 0xFE	; 254
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	81 ab       	std	Z+49, r24	; 0x31
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <CapTouch_Long_Pressed_Filtered+0xd0>
	  sts |= (1<<i);
	  res=1;
    }
  }
  if(res==1){
    for(uint8_t i=0; i<lt_chnl; i++){
    126e:	20 17       	cp	r18, r16
    1270:	20 f3       	brcs	.-56     	; 0x123a <CapTouch_Long_Pressed_Filtered+0x98>
	    sts |= (1<<i);
		CapTouch.LongPressFlag[i]=1;
	    break;
	  }
    }
    for(uint8_t i=lt_chnl+1; i<CAPTOUCH_TOTAL_TOUCH_KEY; i++){
    1272:	00 23       	and	r16, r16
    1274:	49 f4       	brne	.+18     	; 0x1288 <CapTouch_Long_Pressed_Filtered+0xe6>
      if(CapTouch_Get_Touch_Duration(i)>=(CapTouch.LongPressTime/2)){
    1276:	c4 16       	cp	r12, r20
    1278:	d5 06       	cpc	r13, r21
    127a:	e6 06       	cpc	r14, r22
    127c:	f7 06       	cpc	r15, r23
    127e:	24 f0       	brlt	.+8      	; 0x1288 <CapTouch_Long_Pressed_Filtered+0xe6>
	    sts |= (1<<i);
    1280:	12 60       	ori	r17, 0x02	; 2
		CapTouch.LongPressFlag[i]=1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 91 01 	sts	0x0191, r24
	    break;
	  }
    }
  }
  return sts;
}
    1288:	81 2f       	mov	r24, r17
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	08 95       	ret

0000129c <CapTouch_Set_Short_Press_Min_Time>:

void CapTouch_Set_Short_Press_Min_Time(uint8_t val){
  CapTouch.MinShortPressTime=val;
    129c:	80 93 8a 01 	sts	0x018A, r24
    12a0:	10 92 8b 01 	sts	0x018B, r1
}
    12a4:	08 95       	ret

000012a6 <CapTouch_Set_Short_Press_Max_Time>:

void CapTouch_Set_Short_Press_Max_Time(uint8_t val){
  CapTouch.MaxShortPressTime=val;
    12a6:	80 93 8c 01 	sts	0x018C, r24
    12aa:	10 92 8d 01 	sts	0x018D, r1
}
    12ae:	08 95       	ret

000012b0 <CapTouch_Set_Long_Press_Time>:

void CapTouch_Set_Long_Press_Time(uint8_t val){
  CapTouch.LongPressTime=val;
    12b0:	80 93 8e 01 	sts	0x018E, r24
    12b4:	10 92 8f 01 	sts	0x018F, r1
}
    12b8:	08 95       	ret

000012ba <CapTouch_Get_RawADC1>:

int CapTouch_Get_RawADC1(uint8_t current_channel){
    12ba:	e8 2f       	mov	r30, r24
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	ee 0f       	add	r30, r30
    12c0:	ff 1f       	adc	r31, r31
    12c2:	e1 5a       	subi	r30, 0xA1	; 161
    12c4:	fe 4f       	sbci	r31, 0xFE	; 254
  return CapTouch.RawADC1[current_channel];
}
    12c6:	87 81       	ldd	r24, Z+7	; 0x07
    12c8:	90 85       	ldd	r25, Z+8	; 0x08
    12ca:	08 95       	ret

000012cc <CapTouch_Get_RawADC2>:

int CapTouch_Get_RawADC2(uint8_t current_channel){
    12cc:	e8 2f       	mov	r30, r24
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	ee 0f       	add	r30, r30
    12d2:	ff 1f       	adc	r31, r31
    12d4:	e1 5a       	subi	r30, 0xA1	; 161
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
  return CapTouch.RawADC2[current_channel];
}
    12d8:	83 85       	ldd	r24, Z+11	; 0x0b
    12da:	94 85       	ldd	r25, Z+12	; 0x0c
    12dc:	08 95       	ret

000012de <CapTouch_Get_RawDifferentialADC>:

int CapTouch_Get_RawDifferentialADC(uint8_t current_channel){
    12de:	e8 2f       	mov	r30, r24
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	e1 5a       	subi	r30, 0xA1	; 161
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
  return CapTouch.RawDiffADC[current_channel];
}
    12ea:	87 85       	ldd	r24, Z+15	; 0x0f
    12ec:	90 89       	ldd	r25, Z+16	; 0x10
    12ee:	08 95       	ret

000012f0 <CapTouch_Get_Calibration_Value>:

int CapTouch_Get_Calibration_Value(uint8_t current_channel){
    12f0:	e8 2f       	mov	r30, r24
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	e1 5a       	subi	r30, 0xA1	; 161
    12fa:	fe 4f       	sbci	r31, 0xFE	; 254
  return CapTouch.CalibrationValue[current_channel];
}
    12fc:	83 81       	ldd	r24, Z+3	; 0x03
    12fe:	94 81       	ldd	r25, Z+4	; 0x04
    1300:	08 95       	ret

00001302 <CapTouch_Get_Touch_Duration>:

int32_t CapTouch_Get_Touch_Duration(uint8_t current_channel){
    1302:	e8 2f       	mov	r30, r24
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	e1 5a       	subi	r30, 0xA1	; 161
    1310:	fe 4f       	sbci	r31, 0xFE	; 254
    1312:	df 01       	movw	r26, r30
    1314:	5b 96       	adiw	r26, 0x1b	; 27
    1316:	63 8d       	ldd	r22, Z+27	; 0x1b
    1318:	11 96       	adiw	r26, 0x01	; 1
    131a:	7c 91       	ld	r23, X
    131c:	11 97       	sbiw	r26, 0x01	; 1
  return CapTouch.TouchDuration[current_channel];
}
    131e:	12 96       	adiw	r26, 0x02	; 2
    1320:	8c 91       	ld	r24, X
    1322:	12 97       	sbiw	r26, 0x02	; 2
    1324:	13 96       	adiw	r26, 0x03	; 3
    1326:	9c 91       	ld	r25, X
    1328:	08 95       	ret

0000132a <CapTouch_Get_Touch_Response>:

uint8_t CapTouch_Get_Touch_Response(uint8_t current_channel){
    132a:	ef e5       	ldi	r30, 0x5F	; 95
    132c:	f1 e0       	ldi	r31, 0x01	; 1
    132e:	e8 0f       	add	r30, r24
    1330:	f1 1d       	adc	r31, r1
  return CapTouch.Result[current_channel];
}
    1332:	81 81       	ldd	r24, Z+1	; 0x01
    1334:	08 95       	ret

00001336 <CapTouch_Get_Reference_Timer_Use_Flag>:

uint8_t CapTouch_Get_Reference_Timer_Use_Flag(void){
    1336:	80 91 92 01 	lds	r24, 0x0192
    133a:	81 11       	cpse	r24, r1
    133c:	81 e0       	ldi	r24, 0x01	; 1
  if(CapTouch.UsingReferenceTimer){
    return 1;
  }else{
    return 0;
  }
}
    133e:	08 95       	ret

00001340 <CapTouch_Get_ErrorCode>:

uint8_t CapTouch_Get_ErrorCode(uint8_t current_channel){
    1340:	ef e5       	ldi	r30, 0x5F	; 95
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	e8 0f       	add	r30, r24
    1346:	f1 1d       	adc	r31, r1
  return CapTouch.ErrorCode[current_channel];
}
    1348:	84 a9       	ldd	r24, Z+52	; 0x34
    134a:	08 95       	ret

0000134c <CapTouch_Get_Debug_Data>:

void CapTouch_Get_Debug_Data(uint8_t current_channel, int *data_out){
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	eb 01       	movw	r28, r22
  data_out[0]=8;
    1352:	28 e0       	ldi	r18, 0x08	; 8
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	39 83       	std	Y+1, r19	; 0x01
    1358:	28 83       	st	Y, r18
  data_out[1]=current_channel;
    135a:	a8 2f       	mov	r26, r24
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	bb 83       	std	Y+3, r27	; 0x03
    1360:	aa 83       	std	Y+2, r26	; 0x02
  data_out[2]=CapTouch_Get_RawADC1(current_channel);
    1362:	fd 01       	movw	r30, r26
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	e1 5a       	subi	r30, 0xA1	; 161
    136a:	fe 4f       	sbci	r31, 0xFE	; 254
    136c:	87 81       	ldd	r24, Z+7	; 0x07
    136e:	90 85       	ldd	r25, Z+8	; 0x08
    1370:	9d 83       	std	Y+5, r25	; 0x05
    1372:	8c 83       	std	Y+4, r24	; 0x04
  data_out[3]=CapTouch_Get_RawADC2(current_channel);
    1374:	83 85       	ldd	r24, Z+11	; 0x0b
    1376:	94 85       	ldd	r25, Z+12	; 0x0c
    1378:	9f 83       	std	Y+7, r25	; 0x07
    137a:	8e 83       	std	Y+6, r24	; 0x06
  data_out[4]=CapTouch_Get_RawDifferentialADC(current_channel);
    137c:	87 85       	ldd	r24, Z+15	; 0x0f
    137e:	90 89       	ldd	r25, Z+16	; 0x10
    1380:	99 87       	std	Y+9, r25	; 0x09
    1382:	88 87       	std	Y+8, r24	; 0x08
  data_out[5]=CapTouch_Get_Calibration_Value(current_channel);
    1384:	83 81       	ldd	r24, Z+3	; 0x03
    1386:	94 81       	ldd	r25, Z+4	; 0x04
    1388:	9b 87       	std	Y+11, r25	; 0x0b
    138a:	8a 87       	std	Y+10, r24	; 0x0a
  data_out[6]=CapTouch_Get_Touch_Duration(current_channel);
    138c:	fd 01       	movw	r30, r26
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	e1 5a       	subi	r30, 0xA1	; 161
    1398:	fe 4f       	sbci	r31, 0xFE	; 254
    139a:	83 8d       	ldd	r24, Z+27	; 0x1b
    139c:	94 8d       	ldd	r25, Z+28	; 0x1c
    139e:	9d 87       	std	Y+13, r25	; 0x0d
    13a0:	8c 87       	std	Y+12, r24	; 0x0c
  data_out[7]=CapTouch_Get_Touch_Response(current_channel);
    13a2:	a1 5a       	subi	r26, 0xA1	; 161
    13a4:	be 4f       	sbci	r27, 0xFE	; 254
    13a6:	11 96       	adiw	r26, 0x01	; 1
    13a8:	8c 91       	ld	r24, X
    13aa:	8e 87       	std	Y+14, r24	; 0x0e
    13ac:	1f 86       	std	Y+15, r1	; 0x0f
  data_out[8]=CapTouch_Get_Reference_Timer_Use_Flag();
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	80 91 92 01 	lds	r24, 0x0192
    13b6:	88 23       	and	r24, r24
    13b8:	11 f0       	breq	.+4      	; 0x13be <CapTouch_Get_Debug_Data+0x72>
    13ba:	21 e0       	ldi	r18, 0x01	; 1
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	39 8b       	std	Y+17, r19	; 0x11
    13c0:	28 8b       	std	Y+16, r18	; 0x10
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <CapTouch_Init>:

void CapTouch_Init(void){
  CapTouch_Struct_Init();
    13c8:	0e 94 3a 04 	call	0x874	; 0x874 <CapTouch_Struct_Init>
  #ifdef CAPTOUCH_ENABLE_LPF
    CapTouch_IIR_LPF_Struct_Init();
    13cc:	0e 94 af 04 	call	0x95e	; 0x95e <CapTouch_IIR_LPF_Struct_Init>
void CapTouch_Set_Key_Pin_Output_High(uint8_t current_channel){
  CAPTOUCH_ADC_PORT|=(1<<current_channel);
}

void CapTouch_ADC_Register_Config(void){
  ADMUX =0x40;
    13d0:	80 e4       	ldi	r24, 0x40	; 64
    13d2:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA=0x87;
    13d6:	87 e8       	ldi	r24, 0x87	; 135
    13d8:	80 93 7a 00 	sts	0x007A, r24
  CapTouch_Struct_Init();
  #ifdef CAPTOUCH_ENABLE_LPF
    CapTouch_IIR_LPF_Struct_Init();
  #endif
  CapTouch_ADC_Register_Config();
  CapTouch_Calibration();
    13dc:	0e 94 84 06 	call	0xd08	; 0xd08 <CapTouch_Calibration>
}
    13e0:	08 95       	ret

000013e2 <__mulsi3>:
    13e2:	62 9f       	mul	r22, r18
    13e4:	d0 01       	movw	r26, r0
    13e6:	73 9f       	mul	r23, r19
    13e8:	f0 01       	movw	r30, r0
    13ea:	82 9f       	mul	r24, r18
    13ec:	e0 0d       	add	r30, r0
    13ee:	f1 1d       	adc	r31, r1
    13f0:	64 9f       	mul	r22, r20
    13f2:	e0 0d       	add	r30, r0
    13f4:	f1 1d       	adc	r31, r1
    13f6:	92 9f       	mul	r25, r18
    13f8:	f0 0d       	add	r31, r0
    13fa:	83 9f       	mul	r24, r19
    13fc:	f0 0d       	add	r31, r0
    13fe:	74 9f       	mul	r23, r20
    1400:	f0 0d       	add	r31, r0
    1402:	65 9f       	mul	r22, r21
    1404:	f0 0d       	add	r31, r0
    1406:	99 27       	eor	r25, r25
    1408:	72 9f       	mul	r23, r18
    140a:	b0 0d       	add	r27, r0
    140c:	e1 1d       	adc	r30, r1
    140e:	f9 1f       	adc	r31, r25
    1410:	63 9f       	mul	r22, r19
    1412:	b0 0d       	add	r27, r0
    1414:	e1 1d       	adc	r30, r1
    1416:	f9 1f       	adc	r31, r25
    1418:	bd 01       	movw	r22, r26
    141a:	cf 01       	movw	r24, r30
    141c:	11 24       	eor	r1, r1
    141e:	08 95       	ret

00001420 <__udivmodsi4>:
    1420:	a1 e2       	ldi	r26, 0x21	; 33
    1422:	1a 2e       	mov	r1, r26
    1424:	aa 1b       	sub	r26, r26
    1426:	bb 1b       	sub	r27, r27
    1428:	fd 01       	movw	r30, r26
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <__udivmodsi4_ep>

0000142c <__udivmodsi4_loop>:
    142c:	aa 1f       	adc	r26, r26
    142e:	bb 1f       	adc	r27, r27
    1430:	ee 1f       	adc	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	a2 17       	cp	r26, r18
    1436:	b3 07       	cpc	r27, r19
    1438:	e4 07       	cpc	r30, r20
    143a:	f5 07       	cpc	r31, r21
    143c:	20 f0       	brcs	.+8      	; 0x1446 <__udivmodsi4_ep>
    143e:	a2 1b       	sub	r26, r18
    1440:	b3 0b       	sbc	r27, r19
    1442:	e4 0b       	sbc	r30, r20
    1444:	f5 0b       	sbc	r31, r21

00001446 <__udivmodsi4_ep>:
    1446:	66 1f       	adc	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	1a 94       	dec	r1
    1450:	69 f7       	brne	.-38     	; 0x142c <__udivmodsi4_loop>
    1452:	60 95       	com	r22
    1454:	70 95       	com	r23
    1456:	80 95       	com	r24
    1458:	90 95       	com	r25
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	bd 01       	movw	r22, r26
    1460:	cf 01       	movw	r24, r30
    1462:	08 95       	ret

00001464 <__divmodsi4>:
    1464:	97 fb       	bst	r25, 7
    1466:	09 2e       	mov	r0, r25
    1468:	05 26       	eor	r0, r21
    146a:	0e d0       	rcall	.+28     	; 0x1488 <__divmodsi4_neg1>
    146c:	57 fd       	sbrc	r21, 7
    146e:	04 d0       	rcall	.+8      	; 0x1478 <__divmodsi4_neg2>
    1470:	d7 df       	rcall	.-82     	; 0x1420 <__udivmodsi4>
    1472:	0a d0       	rcall	.+20     	; 0x1488 <__divmodsi4_neg1>
    1474:	00 1c       	adc	r0, r0
    1476:	38 f4       	brcc	.+14     	; 0x1486 <__divmodsi4_exit>

00001478 <__divmodsi4_neg2>:
    1478:	50 95       	com	r21
    147a:	40 95       	com	r20
    147c:	30 95       	com	r19
    147e:	21 95       	neg	r18
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	4f 4f       	sbci	r20, 0xFF	; 255
    1484:	5f 4f       	sbci	r21, 0xFF	; 255

00001486 <__divmodsi4_exit>:
    1486:	08 95       	ret

00001488 <__divmodsi4_neg1>:
    1488:	f6 f7       	brtc	.-4      	; 0x1486 <__divmodsi4_exit>
    148a:	90 95       	com	r25
    148c:	80 95       	com	r24
    148e:	70 95       	com	r23
    1490:	61 95       	neg	r22
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	8f 4f       	sbci	r24, 0xFF	; 255
    1496:	9f 4f       	sbci	r25, 0xFF	; 255
    1498:	08 95       	ret

0000149a <_exit>:
    149a:	f8 94       	cli

0000149c <__stop_program>:
    149c:	ff cf       	rjmp	.-2      	; 0x149c <__stop_program>
